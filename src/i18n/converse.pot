# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR Jan-Carel Brand
# This file is distributed under the same license as the Converse.js package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Converse.js 10.1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-03-26 09:59+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. extract protocol
#. relative-scheme
#. extract "user:pass@host:port"
#. : may be within the path
#. extract "user:pass@host:port"
#. what's left must be the path
#. and we're done
#. Copy chrome, IE, opera backslash-handling behavior.
#. Back slashes before the query string get converted to forward slashes
#. See: https://github.com/joyent/node/blob/386fd24f49b0e9d1a8a076592a404168faeecc34/lib/url.js#L115-L124
#. See: https://code.google.com/p/chromium/issues/detail?id=25916
#. https://github.com/medialize/URI.js/pull/233
#. extract host:port
#. IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6
#. I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts
#. IPv6+port in the format [2001:db8::1]:80 (for the time being)
#. IPv6 host contains multiple colons - but no port
#. this notation is actually not allowed by RFC 3986, but we're a liberal parser
#. extract username:password
#. authority@ must come before /path or \path
#. throw out the funky business - "?"[name"="value"&"]+
#. no "=" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters
#. ignore attempt at exploiting JavaScript internals
#. according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html
#. being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed
#. the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!
#. URI.js treats the query string as being application/x-www-form-urlencoded
#. see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type
#. ignore attempt at exploiting JavaScript internals
#. http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded
#. don't append "=" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization
#. Nothing to do here
#. true if exists (but may be empty)
#. data[name] !== undefined;
#. true if exists and non-empty
#. allow complex comparison
#. falls through
#. find first non-matching character
#. revert to last /
#. attribut(e=["']?$)
#. make sure we include well balanced parens
#. the extract only contains the starting marker of a URI,
#. e.g. "www" or "http://"
#. Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)
#. they are not part of DNS and therefore ignored by URI.js
#. not null and not an empty string
#. test punycode
#. noConflict
#. window.location is reported to be an object, but it's not the sort
#. of object we're looking for:
#. * location.protocol ends with a colon
#. * location.query != object.search
#. * location.hash != object.fragment
#. simply serializing the unknown object should do the trick
#. (for location, not for everything...)
#. identification accessors
#. hostname identification
#. component specific input validation
#. accept trailing ://
#. compound accessors
#. fraction accessors
#. convenience, return "www" from "www.example.org"
#. grab domain and add another segment
#. convenience, return "example.org" from "www.example.org"
#. if hostname consists of 1 or 2 segments, it must be the domain
#. grab tld and add another segment
#. return "org" from "www.example.org"
#. fully qualifier directories begin with a slash
#. directories always end with a slash
#. suffix may only contain alnum characters (yup, I made this up.)
#. allow negative indexes to address from the end
#. jshint laxbreak: true
#. jshint laxbreak: false
#. collapse empty elements within array
#. empty trailing elements have to be overwritten
#. to prevent results such as /foo//bar
#. mutating query string
#. sanitizing URLs
#. remove port of it's the protocol's default
#. handle relative paths
#. handle relative files (as opposed to directories)
#. resolve simples
#. remember leading parents
#. resolve parents
#. no more ../ to resolve
#. top level cannot be relative, skip it
#. revert to relative
#. expect unicode input, iso8859 output
#. expect iso8859 input, unicode output
#. removing username, password, because they shouldn't be displayed according to RFC 3986
#. resolving relative and absolute URLs
#. Directly returns even if this._parts.hostname is empty.
#. determine common sub path
#. If the paths have nothing in common, return a relative URL with the absolute path.
#. comparing URIs
#. exact match
#. extract query string
#. definitely not equal if not even non-query parts match
#. query parameters have the same length, even if they're permuted
#. two contains a parameter not present in one
#. state
#. *
#. *
#. *
#. module decorator
#. ! https://mths.be/punycode v1.4.0 by @mathias
#. * Detect free variables
#. *
#. * The `punycode` object.
#. * @name punycode
#. * @type Object
#.
#. * Highest positive signed 32-bit float value
#. aka. 0x7FFFFFFF or 2^31-1
#. * Bootstring parameters
#. 0x80
#. '\x2D'
#. * Regular expressions
#. unprintable ASCII chars + non-ASCII chars
#. RFC 3490 separators
#. * Error messages
#. * Convenience shortcuts
#. * Temporary variable
#. --------------------------------------------------------------------------
#. *
#. * A generic error utility function.
#. * @private
#. * @param {String} type The error type.
#. * @returns {Error} Throws a `RangeError` with the applicable error message.
#.
#. *
#. * A generic `Array#map` utility function.
#. * @private
#. * @param {Array} array The array to iterate over.
#. * @param {Function} callback The function that gets called for every array
#. * item.
#. * @returns {Array} A new array of values returned by the callback function.
#.
#. *
#. * A simple `Array#map`-like wrapper to work with domain name strings or email
#. * addresses.
#. * @private
#. * @param {String} domain The domain name or email address.
#. * @param {Function} callback The function that gets called for every
#. * character.
#. * @returns {Array} A new string of characters returned by the callback
#. * function.
#.
#. In email addresses, only the domain name should be punycoded. Leave
#. the local part (i.e. everything up to `@`) intact.
#. Avoid `split(regex)` for IE8 compatibility. See #17.
#. *
#. * Creates an array containing the numeric code points of each Unicode
#. * character in the string. While JavaScript uses UCS-2 internally,
#. * this function will convert a pair of surrogate halves (each of which
#. * UCS-2 exposes as separate characters) into a single code point,
#. * matching UTF-16.
#. * @see `punycode.ucs2.encode`
#. * @see <https://mathiasbynens.be/notes/javascript-encoding>
#. * @memberOf punycode.ucs2
#. * @name decode
#. * @param {String} string The Unicode input string (UCS-2).
#. * @returns {Array} The new array of code points.
#.
#. high surrogate, and there is a next character
#. low surrogate
#. unmatched surrogate; only append this code unit, in case the next
#. code unit is the high surrogate of a surrogate pair
#. *
#. * Creates a string based on an array of numeric code points.
#. * @see `punycode.ucs2.decode`
#. * @memberOf punycode.ucs2
#. * @name encode
#. * @param {Array} codePoints The array of numeric code points.
#. * @returns {String} The new Unicode string (UCS-2).
#.
#. *
#. * Converts a basic code point into a digit/integer.
#. * @see `digitToBasic()`
#. * @private
#. * @param {Number} codePoint The basic numeric code point value.
#. * @returns {Number} The numeric value of a basic code point (for use in
#. * representing integers) in the range `0` to `base - 1`, or `base` if
#. * the code point does not represent a value.
#.
#. *
#. * Converts a digit/integer into a basic code point.
#. * @see `basicToDigit()`
#. * @private
#. * @param {Number} digit The numeric value of a basic code point.
#. * @returns {Number} The basic code point whose value (when used for
#. * representing integers) is `digit`, which needs to be in the range
#. * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
#. * used; else, the lowercase form is used. The behavior is undefined
#. * if `flag` is non-zero and `digit` has no uppercase form.
#.
#. 0..25 map to ASCII a..z or A..Z
#. 26..35 map to ASCII 0..9
#. *
#. * Bias adaptation function as per section 3.4 of RFC 3492.
#. * https://tools.ietf.org/html/rfc3492#section-3.4
#. * @private
#.
#. no initialization
#. *
#. * Converts a Punycode string of ASCII-only symbols to a string of Unicode
#. * symbols.
#. * @memberOf punycode
#. * @param {String} input The Punycode string of ASCII-only symbols.
#. * @returns {String} The resulting string of Unicode symbols.
#.
#. Don't use UCS-2
#. * Cached calculation results
#. Handle the basic code points: let `basic` be the number of input code
#. points before the last delimiter, or `0` if there is none, then copy
#. the first basic code points to the output.
#. if it's not a basic code point
#. Main decoding loop: start just after the last delimiter if any basic code
#. points were copied; start at the beginning otherwise.
#. no final expression
#. `index` is the index of the next character to be consumed.
#. Decode a generalized variable-length integer into `delta`,
#. which gets added to `i`. The overflow checking is easier
#. if we increase `i` as we go, then subtract off its starting
#. value at the end to obtain `delta`.
#. no condition
#. `i` was supposed to wrap around from `out` to `0`,
#. incrementing `n` each time, so we'll fix that now:
#. Insert `n` at position `i` of the output
#. *
#. * Converts a string of Unicode symbols (e.g. a domain name label) to a
#. * Punycode string of ASCII-only symbols.
#. * @memberOf punycode
#. * @param {String} input The string of Unicode symbols.
#. * @returns {String} The resulting Punycode string of ASCII-only symbols.
#.
#. * `inputLength` will hold the number of code points in `input`.
#. * Cached calculation results
#. Convert the input in UCS-2 to Unicode
#. Cache the length
#. Initialize the state
#. Handle the basic code points
#. `handledCPCount` is the number of code points that have been handled;
#. `basicLength` is the number of basic code points.
#. Finish the basic string - if it is not empty - with a delimiter
#. Main encoding loop:
#. All non-basic code points < n have been handled already. Find the next
#. larger one:
#. Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
#. but guard against overflow
#. Represent delta as a generalized variable-length integer
#. no condition
#. *
#. * Converts a Punycode string representing a domain name or an email address
#. * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
#. * it doesn't matter if you call it on a string that has already been
#. * converted to Unicode.
#. * @memberOf punycode
#. * @param {String} input The Punycoded domain name or email address to
#. * convert to Unicode.
#. * @returns {String} The Unicode representation of the given Punycode
#. * string.
#.
#. *
#. * Converts a Unicode string representing a domain name or an email address to
#. * Punycode. Only the non-ASCII parts of the domain name will be converted,
#. * i.e. it doesn't matter if you call it with a domain that's already in
#. * ASCII.
#. * @memberOf punycode
#. * @param {String} input The domain name or email address to convert, as a
#. * Unicode string.
#. * @returns {String} The Punycode representation of the given domain name or
#. * email address.
#.
#. --------------------------------------------------------------------------
#. * Define the public API
#. *
#. * A string representing the current Punycode.js version number.
#. * @memberOf punycode
#. * @type String
#.
#. *
#. * An object of methods to convert from JavaScript's internal character
#. * representation (UCS-2) to Unicode code points, and back.
#. * @see <https://mathiasbynens.be/notes/javascript-encoding>
#. * @memberOf punycode
#. * @type Object
#.
#. * Expose `punycode`
#. Some AMD build optimizers, like r.js, check for specific condition patterns
#. like the following:
#. *
#. *
#. *
#. *
#. *
#. *
#. *
#. *
#. *
#. *
#. *
#. *
#. ! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE
#. *
#. *
#. *
#. *
#. *
#. *
#. *
#. *
#. *
#. *
#. *
#. *
#. TODO(Babel 8): Remove this file.
#. Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
#. *
#. ****
#. **********************************************************************
#. ****
#. The module cache
#. ****
#. ****
#. ****
#. The require function
#. ****
#. ****
#. Check if module is in cache
#. ****
#. ****
#. ****
#. ****
#. ****
#. Create a new module (and put it into the cache)
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. Execute the module function
#. ****
#. ****
#. ****
#. Flag the module as loaded
#. ****
#. ****
#. ****
#. Return the exports of the module
#. ****
#. ****
#. ****
#. ****
#. expose the modules object (__webpack_modules__)
#. ****
#. ****
#. **********************************************************************
#. ****
#. webpack/runtime/compat get default export
#. ****
#. ****
#. getDefaultExport function for compatibility with non-harmony modules
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. webpack/runtime/create fake namespace object
#. ****
#. ****
#. ****
#. ****
#. create a fake namespace object
#. ****
#. mode & 1: value is a module id, require it
#. ****
#. mode & 2: merge all properties of value into the ns
#. ****
#. mode & 4: return value when already ns object
#. ****
#. mode & 16: return value when it's Promise-like
#. ****
#. mode & 8|1: behave like require
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. webpack/runtime/define property getters
#. ****
#. ****
#. define getter functions for harmony exports
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. webpack/runtime/ensure chunk
#. ****
#. ****
#. ****
#. This file contains only the entry chunk.
#. ****
#. The chunk loading function for additional chunks
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. webpack/runtime/get javascript chunk filename
#. ****
#. ****
#. This function allow to reference async chunks
#. ****
#. ****
#. return url for filenames based on template
#. ****
#. ****
#. ****
#. ****
#. ****
#. webpack/runtime/global
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. webpack/runtime/hasOwnProperty shorthand
#. ****
#. ****
#. ****
#. ****
#. ****
#. webpack/runtime/load script
#. ****
#. ****
#. ****
#. ****
#. loadScript function to load a script via script tag
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. avoid mem leaks in IE.
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. webpack/runtime/make namespace object
#. ****
#. ****
#. define __esModule on exports
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. webpack/runtime/node module decorator
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. webpack/runtime/publicPath
#. ****
#. ****
#. ****
#. ****
#. ****
#. webpack/runtime/jsonp chunk loading
#. ****
#. ****
#. no baseURI
#. ****
#. ****
#. object to store loaded and loading chunks
#. ****
#. undefined = chunk not loaded, null = chunk preloaded/prefetched
#. ****
#. [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. JSONP chunk loading for javascript
#. ****
#. ****
#. 0 means "already installed".
#. ****
#. ****
#. a Promise means "currently loading".
#. ****
#. ****
#. ****
#. ****
#. all chunks have JS
#. ****
#. setup Promise in chunk cache
#. ****
#. ****
#. ****
#. ****
#. start chunk loading
#. ****
#. ****
#. create error before stack unwound to get useful stacktrace later
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. no prefetching
#. ****
#. ****
#. no preloaded
#. ****
#. ****
#. no HMR
#. ****
#. ****
#. no HMR manifest
#. ****
#. ****
#. no on chunks loaded
#. ****
#. ****
#. install a JSONP callback for chunk loading
#. ****
#. ****
#. ****
#. add "moreModules" to the modules object,
#. ****
#. then flag all "chunkIds" as loaded and fire callback
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. ****
#. **********************************************************************
#. This entry need to be wrapped in an IIFE because it need to be in strict mode.
#. ESM COMPAT FLAG
#. EXPORTS
#. reexport
#. reexport
#. reexport
#. reexport
#. reexport
#. reexport
#. reexport
#. reexport
#. reexport
#. reexport
#. reexport
#. reexport
#. reexport
#. reexport
#. reexport
#. reexport
#. reexport
#. reexport
#. binding
#. reexport
#. reexport
#. reexport
#. NAMESPACE OBJECT: ./src/strophe-shims.js
#. NAMESPACE OBJECT: ./node_modules/strophe.js/src/utils.js
#. EXTERNAL MODULE: ./node_modules/dayjs/dayjs.min.js
#. #__PURE__
#. EXTERNAL MODULE: ./node_modules/dayjs/plugin/advancedFormat.js
#. #__PURE__
#. CONCATENATED MODULE: ./src/strophe-shims.js
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/constants.js
#. *
#. * Common namespace constants from the XMPP RFCs and XEPs.
#. *
#. * @typedef { Object } NS
#. * @property {string} NS.HTTPBIND - HTTP BIND namespace from XEP 124.
#. * @property {string} NS.BOSH - BOSH namespace from XEP 206.
#. * @property {string} NS.CLIENT - Main XMPP client namespace.
#. * @property {string} NS.AUTH - Legacy authentication namespace.
#. * @property {string} NS.ROSTER - Roster operations namespace.
#. * @property {string} NS.PROFILE - Profile namespace.
#. * @property {string} NS.DISCO_INFO - Service discovery info namespace from XEP 30.
#. * @property {string} NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.
#. * @property {string} NS.MUC - Multi-User Chat namespace from XEP 45.
#. * @property {string} NS.SASL - XMPP SASL namespace from RFC 3920.
#. * @property {string} NS.STREAM - XMPP Streams namespace from RFC 3920.
#. * @property {string} NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.
#. * @property {string} NS.SESSION - XMPP Session namespace from RFC 3920.
#. * @property {string} NS.XHTML_IM - XHTML-IM namespace from XEP 71.
#. * @property {string} NS.XHTML - XHTML body namespace from XEP 71.
#. * @property {string} NS.STANZAS
#. * @property {string} NS.FRAMING
#.
#. *
#. * Contains allowed tags, tag attributes, and css properties.
#. * Used in the {@link Strophe.createHtml} function to filter incoming html into the allowed XHTML-IM subset.
#. * See [XEP-0071](http://xmpp.org/extensions/xep-0071.html#profile-summary) for the list of recommended
#. * allowed tags and their attributes.
#.
#. * @type {never[]}
#. * @type {never[]}
#. * @type {never[]}
#. * @type {never[]}
#. * @typedef {number} connstatus
#. *
#. * Connection status constants for use by the connection handler
#. * callback.
#. *
#. * @typedef {Object} Status
#. * @property {connstatus} Status.ERROR - An error has occurred
#. * @property {connstatus} Status.CONNECTING - The connection is currently being made
#. * @property {connstatus} Status.CONNFAIL - The connection attempt failed
#. * @property {connstatus} Status.AUTHENTICATING - The connection is authenticating
#. * @property {connstatus} Status.AUTHFAIL - The authentication attempt failed
#. * @property {connstatus} Status.CONNECTED - The connection has succeeded
#. * @property {connstatus} Status.DISCONNECTED - The connection has been terminated
#. * @property {connstatus} Status.DISCONNECTING - The connection is currently being terminated
#. * @property {connstatus} Status.ATTACHED - The connection has been attached
#. * @property {connstatus} Status.REDIRECT - The connection has been redirected
#. * @property {connstatus} Status.CONNTIMEOUT - The connection has timed out
#. * @property {connstatus} Status.BINDREQUIRED - The JID resource needs to be bound for this session
#. * @property {connstatus} Status.ATTACHFAIL - Failed to attach to a pre-existing session
#. * @property {connstatus} Status.RECONNECTING - Not used by Strophe, but added for integrators
#.
#. *
#. * Logging level indicators.
#. * @typedef {0|1|2|3|4} LogLevel
#. * @typedef {'DEBUG'|'INFO'|'WARN'|'ERROR'|'FATAL'} LogLevelName
#. * @typedef {Record<LogLevelName, LogLevel>} LogLevels
#.
#. *
#. * DOM element types.
#. *
#. * - ElementType.NORMAL - Normal element.
#. * - ElementType.TEXT - Text data element.
#. * - ElementType.FRAGMENT - XHTML fragment element.
#.
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/log.js
#. *
#. * @typedef {import('./constants').LogLevel} LogLevel
#.
#. *
#. * Library consumers can use this function to set the log level of Strophe.
#. * The default log level is Strophe.LogLevel.INFO.
#. * @param {LogLevel} level
#. * @example Strophe.setLogLevel(Strophe.LogLevel.DEBUG);
#.
#. *
#. *
#. * Please note that data sent and received over the wire is logged
#. * via {@link Strophe.Connection#rawInput|Strophe.Connection.rawInput()}
#. * and {@link Strophe.Connection#rawOutput|Strophe.Connection.rawOutput()}.
#. *
#. * The different levels and their meanings are
#. *
#. *   DEBUG - Messages useful for debugging purposes.
#. *   INFO - Informational messages.  This is mostly information like
#. *     'disconnect was called' or 'SASL auth succeeded'.
#. *   WARN - Warnings about potential problems.  This is mostly used
#. *     to report transient connection errors like request timeouts.
#. *   ERROR - Some error occurred.
#. *   FATAL - A non-recoverable fatal error occurred.
#. *
#. * @param {number} level - The log level of the log message.
#. *     This will be one of the values in Strophe.LOG_LEVELS.
#. * @param {string} msg - The log message.
#.
#. *
#. * Log a message at the Strophe.LOG_LEVELS.DEBUG level.
#. * @param {string} msg - The log message.
#.
#. *
#. * Log a message at the Strophe.LOG_LEVELS.INFO level.
#. * @param {string} msg - The log message.
#.
#. *
#. * Log a message at the Strophe.LOG_LEVELS.WARN level.
#. * @param {string} msg - The log message.
#.
#. *
#. * Log a message at the Strophe.LOG_LEVELS.ERROR level.
#. * @param {string} msg - The log message.
#.
#. *
#. * Log a message at the Strophe.LOG_LEVELS.FATAL level.
#. * @param {string} msg - The log message.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/utils.js
#. global btoa
#. *
#. * Properly logs an error to the console
#. * @param {Error} e
#.
#. *
#. * @param {string} str
#. * @return {string}
#.
#. *
#. * @param {ArrayBufferLike} x
#. * @param {ArrayBufferLike} y
#.
#. *
#. * @param {ArrayBufferLike} buffer
#. * @return {string}
#.
#. This function is due to mobz (https://stackoverflow.com/users/1234628/mobz)
#. and Emmanuel (https://stackoverflow.com/users/288564/emmanuel)
#. *
#. * @param {string} str
#. * @return {ArrayBufferLike}
#.
#. *
#. * @param {string} str
#. * @return {ArrayBufferLike}
#.
#. *
#. * @param {Cookies} cookies
#.
#. *
#. * @typedef {Object.<string, string>} Cookie
#. *
#. * A map of cookie names to string values or to maps of cookie values.
#. * @typedef {Cookie|Object.<string, Cookie>} Cookies
#. *
#. * For example:
#. * { "myCookie": "1234" }
#. *
#. * or:
#. * { "myCookie": {
#. *    "value": "1234",
#. *    "domain": ".example.org",
#. *    "path": "/",
#. *    "expires": expirationDate
#. *    }
#. * }
#. *
#. * These values get passed to {@link Strophe.Connection} via options.cookies
#.
#. * @type {Document}
#. *
#. * Get the DOM document to generate elements.
#. * @return {Document} - The currently used DOM document.
#.
#. *
#. * Creates an XML DOM text node.
#. * Provides a cross implementation version of document.createTextNode.
#. * @param {string} text - The content of the text node.
#. * @return {Text} - A new XML DOM text node.
#.
#. *
#. * Creates an XML DOM node.
#. * @param {string} html - The content of the html node.
#. * @return {XMLDocument}
#.
#. *
#. * Create an XML DOM element.
#. *
#. * This function creates an XML DOM element correctly across all
#. * implementations. Note that these are not HTML DOM elements, which
#. * aren't appropriate for XMPP stanzas.
#. *
#. * @param {string} name - The name for the element.
#. * @param {Array<Array<string>>|Object.<string,string|number>|string|number} [attrs]
#. *    An optional array or object containing
#. *    key/value pairs to use as element attributes.
#. *    The object should be in the format `{'key': 'value'}`.
#. *    The array should have the format `[['key1', 'value1'], ['key2', 'value2']]`.
#. * @param {string|number} [text] - The text child data for the element.
#. *
#. * @return {Element} A new XML DOM element.
#.
#. * @type {number|string}
#. eslint-disable-next-line no-eq-null
#. eslint-disable-next-line no-eq-null
#. *
#. * Utility method to determine whether a tag is allowed
#. * in the XHTML_IM namespace.
#. *
#. * XHTML tag names are case sensitive and must be lower case.
#. * @method Strophe.XHTML.validTag
#. * @param {string} tag
#.
#. *
#. * @typedef {'a'|'blockquote'|'br'|'cite'|'em'|'img'|'li'|'ol'|'p'|'span'|'strong'|'ul'|'body'} XHTMLAttrs
#.
#. *
#. * Utility method to determine whether an attribute is allowed
#. * as recommended per XEP-0071
#. *
#. * XHTML attribute names are case sensitive and must be lower case.
#. * @method Strophe.XHTML.validAttribute
#. * @param {string} tag
#. * @param {string} attribute
#.
#. * @type {XHTMLAttrs}
#. *
#. * @method Strophe.XHTML.validCSS
#. * @param {string} style
#.
#. *
#. * Copy an HTML DOM Element into an XML DOM.
#. * This function copies a DOM element and all its descendants and returns
#. * the new copy.
#. * @method Strophe.createHtml
#. * @param {HTMLElement} elem - A DOM element.
#. * @return {Node} - A new, copied DOM element tree.
#.
#. XHTML tags must be lower case.
#. * @type {XHTMLAttrs}
#. * @type {Object.<'csstext',string>}
#. we're dealing with IE, need to get CSS out
#. filter out invalid css styles
#. invalid elements
#. *
#. * Copy an HTML DOM Node into an XML DOM.
#. * This function copies a DOM element and all its descendants and returns
#. * the new copy.
#. * @method Strophe.createHtml
#. * @param {Node} node - A DOM element.
#. * @return {Node} - A new, copied DOM element tree.
#.
#. * @type {HTMLElement}
#. *
#. * Copy an XML DOM element.
#. *
#. * This function copies a DOM element and all its descendants and returns
#. * the new copy.
#. * @method Strophe.copyElement
#. * @param {Node} node - A DOM element.
#. * @return {Element|Text} - A new, copied DOM element tree.
#.
#. * @type {Element}
#. *
#. * Excapes invalid xml characters.
#. * @method Strophe.xmlescape
#. * @param {string} text - text to escape.
#. * @return {string} - Escaped text.
#.
#. *
#. * Unexcapes invalid xml characters.
#. * @method Strophe.xmlunescape
#. * @param {string} text - text to unescape.
#. * @return {string} - Unescaped text.
#.
#. *
#. * Map a function over some or all child elements of a given element.
#. *
#. * This is a small convenience function for mapping a function over
#. * some or all of the children of an element.  If elemName is null, all
#. * children will be passed to the function, otherwise only children
#. * whose tag names match elemName will be passed.
#. *
#. * @method Strophe.forEachChild
#. * @param {Element} elem - The element to operate on.
#. * @param {string} elemName - The child element tag name filter.
#. * @param {Function} func - The function to apply to each child.  This
#. *    function should take a single argument, a DOM element.
#.
#. *
#. * Compare an element's tag name with a string.
#. * This function is case sensitive.
#. * @method Strophe.isTagEqual
#. * @param {Element} el - A DOM element.
#. * @param {string} name - The element name.
#. * @return {boolean}
#. *  true if the element's tag name matches _el_, and false
#. *  otherwise.
#.
#. *
#. * Get the concatenation of all text children of an element.
#. * @method Strophe.getText
#. * @param {Element} elem - A DOM element.
#. * @return {string} - A String with the concatenated text of all text element children.
#.
#. *
#. * Escape the node part (also called local part) of a JID.
#. * @method Strophe.escapeNode
#. * @param {string} node - A node (or local part).
#. * @return {string} An escaped node (or local part).
#.
#. *
#. * Unescape a node part (also called local part) of a JID.
#. * @method Strophe.unescapeNode
#. * @param {string} node - A node (or local part).
#. * @return {string} An unescaped node (or local part).
#.
#. *
#. * Get the node portion of a JID String.
#. * @method Strophe.getNodeFromJid
#. * @param {string} jid - A JID.
#. * @return {string} - A String containing the node.
#.
#. *
#. * Get the domain portion of a JID String.
#. * @method Strophe.getDomainFromJid
#. * @param {string} jid - A JID.
#. * @return {string} - A String containing the domain.
#.
#. *
#. * Get the resource portion of a JID String.
#. * @method Strophe.getResourceFromJid
#. * @param {string} jid - A JID.
#. * @return {string} - A String containing the resource.
#.
#. *
#. * Get the bare JID from a JID String.
#. * @method Strophe.getBareJidFromJid
#. * @param {string} jid - A JID.
#. * @return {string} - A String containing the bare JID.
#.
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/builder.js
#. *
#. * Create a {@link Strophe.Builder}
#. * This is an alias for `new Strophe.Builder(name, attrs)`.
#. * @param {string} name - The root element name.
#. * @param {Object.<string,string|number>} [attrs] - The attributes for the root element in object notation.
#. * @return {Builder} A new Strophe.Builder object.
#.
#. *
#. * Create a {@link Strophe.Builder} with a `<message/>` element as the root.
#. * @param {Object.<string,string>} [attrs] - The <message/> element attributes in object notation.
#. * @return {Builder} A new Strophe.Builder object.
#.
#. *
#. * Create a {@link Strophe.Builder} with an `<iq/>` element as the root.
#. * @param {Object.<string,string>} [attrs] - The <iq/> element attributes in object notation.
#. * @return {Builder} A new Strophe.Builder object.
#.
#. *
#. * Create a {@link Strophe.Builder} with a `<presence/>` element as the root.
#. * @param {Object.<string,string>} [attrs] - The <presence/> element attributes in object notation.
#. * @return {Builder} A new Strophe.Builder object.
#.
#. *
#. * This class provides an interface similar to JQuery but for building
#. * DOM elements easily and rapidly.  All the functions except for `toString()`
#. * and tree() return the object, so calls can be chained.
#. *
#. * The corresponding DOM manipulations to get a similar fragment would be
#. * a lot more tedious and probably involve several helper variables.
#. *
#. * Since adding children makes new operations operate on the child, up()
#. * is provided to traverse up the tree.  To add two children, do
#. * > builder.c('child1', ...).up().c('child2', ...)
#. *
#. * The next operation on the Builder will be relative to the second child.
#. *
#. * @example
#. *  // Here's an example using the $iq() builder helper.
#. *  $iq({to: 'you', from: 'me', type: 'get', id: '1'})
#. *      .c('query', {xmlns: 'strophe:example'})
#. *      .c('example')
#. *      .toString()
#. *
#. *  // The above generates this XML fragment
#. *  //  <iq to='you' from='me' type='get' id='1'>
#. *  //    <query xmlns='strophe:example'>
#. *  //      <example/>
#. *  //    </query>
#. *  //  </iq>
#.
#. #__PURE__
#. *
#. * @typedef {Object.<string, string|number>} StanzaAttrs
#. * @property {string} [StanzaAttrs.xmlns]
#.
#. *
#. * The attributes should be passed in object notation.
#. * @param {string} name - The name of the root element.
#. * @param {StanzaAttrs} [attrs] - The attributes for the root element in object notation.
#. * @example const b = new Builder('message', {to: 'you', from: 'me'});
#. * @example const b = new Builder('messsage', {'xml:lang': 'en'});
#.
#. Set correct namespace for jabber:client elements
#. Holds the tree being built.
#. Points to the current operation node.
#. *
#. * Render a DOM element and all descendants to a String.
#. * @param {Element|Builder} elem - A DOM element.
#. * @return {string} - The serialized element tree as a String.
#.
#. *
#. * Return the DOM tree.
#. *
#. * This function returns the current DOM tree as an element object.  This
#. * is suitable for passing to functions like Strophe.Connection.send().
#. *
#. * @return {Element} The DOM tree as a element object.
#.
#. *
#. * Serialize the DOM tree to a String.
#. *
#. * This function returns a string serialization of the current DOM
#. * tree.  It is often used internally to pass data to a
#. * Strophe.Request object.
#. *
#. * @return {string} The serialized DOM tree in a String.
#.
#. *
#. * Make the current parent element the new current element.
#. * This function is often used after c() to traverse back up the tree.
#. *
#. * @example
#. *  // For example, to add two children to the same element
#. *  builder.c('child1', {}).up().c('child2', {});
#. *
#. * @return {Builder} The Strophe.Builder object.
#.
#. *
#. * Make the root element the new current element.
#. *
#. * When at a deeply nested element in the tree, this function can be used
#. * to jump back to the root of the tree, instead of having to repeatedly
#. * call up().
#. *
#. * @return {Builder} The Strophe.Builder object.
#.
#. *
#. * Add or modify attributes of the current element.
#. *
#. * The attributes should be passed in object notation.
#. * This function does not move the current element pointer.
#. * @param {Object.<string, string|number|null>} moreattrs - The attributes to add/modify in object notation.
#. *  If an attribute is set to `null` or `undefined`, it will be removed.
#. * @return {Builder} The Strophe.Builder object.
#.
#. eslint-disable-next-line no-eq-null
#. *
#. * Add a child to the current element and make it the new current
#. * element.
#. *
#. * This function moves the current element pointer to the child,
#. * unless text is provided.  If you need to add another child, it
#. * is necessary to use up() to go back to the parent in the tree.
#. *
#. * @param {string} name - The name of the child.
#. * @param {Object.<string, string>|string} [attrs] - The attributes of the child in object notation.
#. * @param {string} [text] - The text to add to the child.
#. *
#. * @return {Builder} The Strophe.Builder object.
#.
#. *
#. * Add a child to the current element and make it the new current
#. * element.
#. *
#. * This function is the same as c() except that instead of using a
#. * name and an attributes object to create the child it uses an
#. * existing DOM element object.
#. *
#. * @param {Element} elem - A DOM element.
#. * @return {Builder} The Strophe.Builder object.
#.
#. * @type {Element}
#. *
#. * Add a child text element.
#. *
#. * This *does not* make the child the new current element since there
#. * are no children of text elements.
#. *
#. * @param {string} text - The text data to append to the current element.
#. * @return {Builder} The Strophe.Builder object.
#.
#. *
#. * Replace current element contents with the HTML passed in.
#. *
#. * This *does not* make the child the new current element
#. *
#. * @param {string} html - The html to insert as contents of current element.
#. * @return {Builder} The Strophe.Builder object.
#.
#. force the browser to try and fix any invalid HTML tags
#. copy cleaned html into an xml dom
#. normal element, so recurse
#. * @type {Element}
#. text element to escape values
#. cdata section so don't escape values
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/request.js
#. *
#. * _Private_ variable that keeps track of the request ids for connections.
#.
#. *
#. * Helper class that provides a cross implementation abstraction
#. * for a BOSH related XMLHttpRequest.
#. *
#. * The Request class is used internally to encapsulate BOSH request
#. * information.  It is not meant to be used from user's code.
#. *
#. * @property {number} id
#. * @property {number} sends
#. * @property {XMLHttpRequest} xhr
#.
#. #__PURE__
#. *
#. * Create and initialize a new Request object.
#. *
#. * @param {Element} elem - The XML data to be sent in the request.
#. * @param {Function} func - The function that will be called when the
#. *     XMLHttpRequest readyState changes.
#. * @param {number} rid - The BOSH rid attribute associated with this request.
#. * @param {number} [sends=0] - The number of times this same request has been sent.
#.
#. save original function in case we need to make a new request
#. from this one.
#. *
#. * Get a response from the underlying XMLHttpRequest.
#. * This function attempts to get a response from the request and checks
#. * for errors.
#. * @throws "parsererror" - A parser error occured.
#. * @throws "bad-format" - The entity has sent XML that cannot be processed.
#. * @return {Element} - The DOM element tree of the response.
#.
#. In Node (with xhr2) or React Native, we may get responseText but no responseXML.
#. We can try to parse it manually.
#. *
#. * _Private_ helper function to create XMLHttpRequests.
#. * This function creates XMLHttpRequests across all implementations.
#. * @private
#. * @return {XMLHttpRequest}
#.
#. use Function.bind() to prepend ourselves as an argument
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/bosh.js
#. *
#. * A JavaScript library to enable BOSH in Strophejs.
#. *
#. * this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)
#. * to emulate a persistent, stateful, two-way connection to an XMPP server.
#. * More information on BOSH can be found in XEP 124.
#.
#. *
#. * @typedef {import("./connection.js").default} Connection
#.
#. *
#. * _Private_ helper class that handles BOSH Connections
#. * The Bosh class is used internally by Connection
#. * to encapsulate BOSH sessions. It is not meant to be used from user's code.
#.
#. #__PURE__
#. *
#. * @param {Connection} connection - The Connection that will use BOSH.
#.
#. request id for body tags
#. The current session ID.
#. default BOSH values
#. *
#. * BOSH-Connections will have all stanzas wrapped in a <body> tag when
#. * passed to {@link Connection#xmlInput|xmlInput()} or {@link Connection#xmlOutput|xmlOutput()}.
#. * To strip this tag, User code can set {@link Bosh#strip|strip} to `true`:
#. *
#. * > // You can set `strip` on the prototype
#. * > Bosh.prototype.strip = true;
#. *
#. * > // Or you can set it on the Bosh instance (which is `._proto` on the connection instance.
#. * > const conn = new Connection();
#. * > conn._proto.strip = true;
#. *
#. * This will enable stripping of the body tag in both
#. * {@link Connection#xmlInput|xmlInput} and {@link Connection#xmlOutput|xmlOutput}.
#. *
#. * @property {boolean} [strip=false]
#.
#. * @type {Request[]}
#. *
#. * @param {number} m
#.
#. *
#. * _Private_ helper function to generate the <body/> wrapper for BOSH.
#. * @private
#. * @return {Builder} - A Builder with a <body/> element.
#.
#. *
#. * Reset the connection.
#. * This function is called by the reset function of the Connection
#.
#. *
#. * _Private_ function that initializes the BOSH connection.
#. * Creates and sends the Request that initializes the BOSH connection.
#. * @param {number} wait - The optional HTTPBIND wait value.  This is the
#. *     time the server will wait before returning an empty result for
#. *     a request.  The default setting of 60 seconds is recommended.
#. *     Other settings will require tweaks to the Strophe.TIMEOUT value.
#. * @param {number} hold - The optional HTTPBIND hold value.  This is the
#. *     number of connections the server will hold at one time.  This
#. *     should almost always be set to 1 (the default).
#. * @param {string} route
#.
#. *
#. * Attach to an already created and authenticated BOSH session.
#. *
#. * This function is provided to allow Strophe to attach to BOSH
#. * sessions which have been created externally, perhaps by a Web
#. * application.  This is often used to support auto-login type features
#. * without putting user credentials into the page.
#. *
#. * @param {string} jid - The full JID that is bound by the session.
#. * @param {string} sid - The SID of the BOSH session.
#. * @param {number} rid - The current RID of the BOSH session.  This RID
#. *     will be used by the next request.
#. * @param {Function} callback The connect callback function.
#. * @param {number} wait - The optional HTTPBIND wait value.  This is the
#. *     time the server will wait before returning an empty result for
#. *     a request.  The default setting of 60 seconds is recommended.
#. *     Other settings will require tweaks to the Strophe.TIMEOUT value.
#. * @param {number} hold - The optional HTTPBIND hold value.  This is the
#. *     number of connections the server will hold at one time.  This
#. *     should almost always be set to 1 (the default).
#. * @param {number} wind - The optional HTTBIND window value.  This is the
#. *     allowed range of request ids that are valid.  The default is 5.
#.
#. *
#. * Attempt to restore a cached BOSH session
#. *
#. * @param {string} jid - The full JID that is bound by the session.
#. *     This parameter is optional but recommended, specifically in cases
#. *     where prebinded BOSH sessions are used where it's important to know
#. *     that the right session is being restored.
#. * @param {Function} callback The connect callback function.
#. * @param {number} wait - The optional HTTPBIND wait value.  This is the
#. *     time the server will wait before returning an empty result for
#. *     a request.  The default setting of 60 seconds is recommended.
#. *     Other settings will require tweaks to the Strophe.TIMEOUT value.
#. * @param {number} hold - The optional HTTPBIND hold value.  This is the
#. *     number of connections the server will hold at one time.  This
#. *     should almost always be set to 1 (the default).
#. * @param {number} wind - The optional HTTBIND window value.  This is the
#. *     allowed range of request ids that are valid.  The default is 5.
#.
#. If authcid is null, then it's an anonymous login, so
#. we compare only the domains:
#. *
#. * _Private_ handler for the beforeunload event.
#. * This handler is used to process the Bosh-part of the initial request.
#. * @private
#.
#. *
#. * _Private_ handler for initial connection request.
#. * This handler is used to process the Bosh-part of the initial request.
#. * @param {Element} bodyWrap - The received stanza.
#.
#. an error occurred
#. check to make sure we don't overwrite these if _connect_cb is
#. called multiple times in the case of missing stream:features
#. *
#. * _Private_ part of Connection.disconnect for Bosh
#. * @param {Element|Builder} pres - This stanza will be sent before disconnecting.
#.
#. *
#. * _Private_ function to disconnect.
#. * Resets the SID and RID.
#.
#. *
#. * _Private_ function to check if the Request queue is empty.
#. * @return {boolean} - True, if there are no Requests queued, False otherwise.
#.
#. *
#. * _Private_ function to call error handlers registered for HTTP errors.
#. * @private
#. * @param {Request} req - The request that is changing readyState.
#.
#. *
#. * _Private_ function to handle the error count.
#. *
#. * Requests are resent automatically until their error count reaches
#. * 5.  Each time an error is encountered, this function is called to
#. * increment the count and disconnect if the count is too high.
#. * @private
#. * @param {number} reqStatus - The request status.
#.
#. *
#. * @callback connectionCallback
#. * @param {Connection} connection
#.
#. *
#. * Called on stream start/restart when no stream:features
#. * has been received and sends a blank poll request.
#. * @param {connectionCallback} callback
#.
#. *
#. * _Private_ timeout handler for handling non-graceful disconnection.
#. * Cancels all remaining Requests and clears the queue.
#.
#. *
#. * _Private_ helper function that makes sure all pending requests are aborted.
#.
#. *
#. * _Private_ handler called by {@link Connection#_onIdle|Connection._onIdle()}.
#. * Sends all queued Requests or polls with empty Request if there are none.
#.
#. if no requests are in progress, poll
#. * @type {Element}
#. *
#. * Returns the HTTP status code from a {@link Request}
#. * @private
#. * @param {Request} req - The {@link Request} instance.
#. * @param {number} [def] - The default value that should be returned if no status value was found.
#.
#. *
#. * _Private_ handler for {@link Request} state changes.
#. *
#. * This function is called when the XMLHttpRequest readyState changes.
#. * It contains a lot of error handling logic for the many ways that
#. * requests can fail, and calls the request callback when requests
#. * succeed.
#. * @private
#. *
#. * @param {Function} func - The handler for the request.
#. * @param {Request} req - The request that is changing readyState.
#.
#. The request is not yet complete
#. remove from internal queue
#. request succeeded
#. if request 1 finished, or request 0 finished and request
#. 1 is over _TIMEOUT seconds old, we need to
#. restart the other - both will be in the first spot, as the
#. completed request has been removed from the queue already
#. call handler
#. request failed
#. *
#. * _Private_ function to process a request in the queue.
#. *
#. * This function takes requests off the queue and sends them and
#. * restarts dead requests.
#. * @private
#. *
#. * @param {number} i - The index of the request in the queue.
#.
#. make sure we limit the number of retries
#. setting to null fails on IE6, so set to empty function
#. IE9 doesn't have setRequestHeader
#. Fires the XHR request -- may be invoked immediately
#. or on a gradually expanding retry window for reconnects
#. Implement progressive backoff for reconnects --
#. First retry (send === 1) should also be instantaneous
#. Using a cube of the retry number creates a nicely
#. expanding retry window
#. XXX: setTimeout should be called only with function expressions (23974bc1)
#. *
#. * _Private_ function to remove a request from the queue.
#. * @private
#. * @param {Request} req - The request to remove.
#.
#. IE6 fails on setting to null, so set to empty function
#. *
#. * _Private_ function to restart a request that is presumed dead.
#. * @private
#. *
#. * @param {number} i - The index of the request in the queue.
#.
#. *
#. * _Private_ function to get a stanza out of a request.
#. * Tries to extract a stanza out of a Request Object.
#. * When this fails the current connection will be disconnected.
#. *
#. * @param {Request} req - The Request.
#. * @return {Element} - The stanza that was passed.
#.
#. *
#. * _Private_ function to send initial disconnect sequence.
#. *
#. * This is the first step in a graceful disconnect.  It sends
#. * the BOSH server a terminate body and includes an unavailable
#. * presence if authentication has completed.
#. * @private
#. * @param {Element|Builder} [pres]
#.
#. *
#. * _Private_ part of the Connection.send function for BOSH
#. * Just triggers the RequestHandler to send the messages that are in the queue
#.
#. *
#. * Send an xmpp:restart stanza.
#.
#. *
#. * _Private_ function to throttle requests to the connection window.
#. *
#. * This function makes sure we don't send requests so fast that the
#. * request ids overflow the connection window in the case that one
#. * request died.
#. * @private
#.
#. *
#. * @returns {number}
#.
#. *
#. * @param {number} m
#.
#. *
#. * @returns {number}
#.
#. ignore errors from undefined status attribute. Works
#. around a browser bug
#. harmony default export
#. EXTERNAL MODULE: ./node_modules/abab/index.js
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/handler.js
#. *
#. * _Private_ helper class for managing stanza handlers.
#. *
#. * A Handler encapsulates a user provided callback function to be
#. * executed when matching stanzas are received by the connection.
#. * Handlers can be either one-off or persistant depending on their
#. * return value. Returning true will cause a Handler to remain active, and
#. * returning false will remove the Handler.
#. *
#. * Users will not use Handler objects directly, but instead they
#. * will use {@link Connection.addHandler} and
#. * {@link Connection.deleteHandler}.
#.
#. #__PURE__
#. *
#. * @typedef {Object} HandlerOptions
#. * @property {boolean} [HandlerOptions.matchBareFromJid]
#. * @property {boolean} [HandlerOptions.ignoreNamespaceFragment]
#.
#. *
#. * Create and initialize a new Handler.
#. *
#. * @param {Function} handler - A function to be executed when the handler is run.
#. * @param {string} ns - The namespace to match.
#. * @param {string} name - The element name to match.
#. * @param {string|string[]} type - The stanza type (or types if an array) to match.
#. * @param {string} [id] - The element id attribute to match.
#. * @param {string} [from] - The element from attribute to match.
#. * @param {HandlerOptions} [options] - Handler options
#.
#. whether the handler is a user handler or a system handler
#. *
#. * Returns the XML namespace attribute on an element.
#. * If `ignoreNamespaceFragment` was passed in for this handler, then the
#. * URL fragment will be stripped.
#. * @param {Element} elem - The XML element with the namespace.
#. * @return {string} - The namespace, with optionally the fragment stripped.
#.
#. *
#. * Tests if a stanza matches the namespace set for this Handler.
#. * @param {Element} elem - The XML element to test.
#. * @return {boolean} - true if the stanza matches and false otherwise.
#.
#. * @param {Element} elem
#. *
#. * Tests if a stanza matches the Handler.
#. * @param {Element} elem - The XML element to test.
#. * @return {boolean} - true if the stanza matches and false otherwise.
#.
#. *
#. * Run the callback on a matching stanza.
#. * @param {Element} elem - The DOM element that triggered the Handler.
#. * @return {boolean} - A boolean indicating if the handler should remain active.
#.
#. *
#. * Get a String representation of the Handler object.
#. * @return {string}
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/timed-handler.js
#. *
#. * _Private_ helper class for managing timed handlers.
#. *
#. * A Strophe.TimedHandler encapsulates a user provided callback that
#. * should be called after a certain period of time or at regular
#. * intervals.  The return value of the callback determines whether the
#. * Strophe.TimedHandler will continue to fire.
#. *
#. * Users will not use Strophe.TimedHandler objects directly, but instead
#. * they will use {@link Strophe.Connection#addTimedHandler|addTimedHandler()} and
#. * {@link Strophe.Connection#deleteTimedHandler|deleteTimedHandler()}.
#. *
#. * @memberof Strophe
#.
#. #__PURE__
#. *
#. * Create and initialize a new Strophe.TimedHandler object.
#. * @param {number} period - The number of milliseconds to wait before the
#. *     handler is called.
#. * @param {Function} handler - The callback to run when the handler fires.  This
#. *     function should take no arguments.
#.
#. *
#. * Run the callback for the Strophe.TimedHandler.
#. *
#. * @return {boolean} Returns the result of running the handler,
#. *  which is `true` if the Strophe.TimedHandler should be called again,
#. *  and `false` otherwise.
#.
#. *
#. * Reset the last called time for the Strophe.TimedHandler.
#.
#. *
#. * Get a string representation of the Strophe.TimedHandler object.
#. * @return {string}
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/sasl.js
#. *
#. * @typedef {import("./connection.js").default} Connection
#.
#. *
#. * Encapsulates an SASL authentication mechanism.
#. *
#. * User code may override the priority for each mechanism or disable it completely.
#. * See <priority> for information about changing priority and <test> for informatian on
#. * how to disable a mechanism.
#. *
#. * By default, all mechanisms are enabled and t_he priorities are
#. *
#. *     SCRAM-SHA-512 - 72
#. *     SCRAM-SHA-384 - 71
#. *     SCRAM-SHA-256 - 70
#. *     SCRAM-SHA-1   - 60
#. *     PLAIN         - 50
#. *     OAUTHBEARER   - 40
#. *     X-OAUTH2      - 30
#. *     ANONYMOUS     - 20
#. *     EXTERNAL      - 10
#. *
#. * See: {@link Strophe.Connection#registerSASLMechanisms}
#.
#. #__PURE__
#. *
#. * PrivateConstructor: Strophe.SASLMechanism
#. * SASL auth mechanism abstraction.
#. * @param {String} [name] - SASL Mechanism name.
#. * @param {Boolean} [isClientFirst] - If client should send response first without challenge.
#. * @param {Number} [priority] - Priority.
#.
#. * Mechanism name.
#. *
#. * If client sends response without initial server challenge.
#.
#. *
#. * Determines which {@link SASLMechanism} is chosen for authentication (Higher is better).
#. * Users may override this to prioritize mechanisms differently.
#. *
#. * Example: (This will cause Strophe to choose the mechanism that the server sent first)
#. *
#. * > Strophe.SASLPlain.priority = Strophe.SASLSHA1.priority;
#. *
#. * See <SASL mechanisms> for a list of available mechanisms.
#.
#. *
#. * Checks if mechanism able to run.
#. * To disable a mechanism, make this return false;
#. *
#. * To disable plain authentication run
#. * > Strophe.SASLPlain.test = function() {
#. * >   return false;
#. * > }
#. *
#. * See <SASL mechanisms> for a list of available mechanisms.
#. * @param {Connection} connection - Target Connection.
#. * @return {boolean} If mechanism was able to run.
#.
#. eslint-disable-next-line class-methods-use-this, no-unused-vars
#. *
#. * Called before starting mechanism on some connection.
#. * @param {Connection} connection - Target Connection.
#.
#. *
#. * Called by protocol implementation on incoming challenge.
#. *
#. * By deafult, if the client is expected to send data first (isClientFirst === true),
#. * this method is called with `challenge` as null on the first call,
#. * unless `clientChallenge` is overridden in the relevant subclass.
#. * @param {Connection} connection - Target Connection.
#. * @param {string} [challenge] - current challenge to handle.
#. * @return {string|Promise<string|false>} Mechanism response.
#.
#. eslint-disable-next-line no-unused-vars, class-methods-use-this
#. *
#. * Called by the protocol implementation if the client is expected to send
#. * data first in the authentication exchange (i.e. isClientFirst === true).
#. * @param {Connection} connection - Target Connection.
#. * @return {string|Promise<string|false>} Mechanism response.
#.
#. *
#. * Protocol informs mechanism implementation about SASL failure.
#.
#. *
#. * Protocol informs mechanism implementation about SASL success.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/sasl-anon.js
#. *
#. * @typedef {import("./connection.js").default} Connection
#.
#. #__PURE__
#. *
#. * SASL ANONYMOUS authentication.
#.
#. *
#. * @param {Connection} connection
#.
#. eslint-disable-next-line class-methods-use-this
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/sasl-external.js
#. *
#. * @typedef {import("./connection.js").default} Connection
#.
#. #__PURE__
#. *
#. * SASL EXTERNAL authentication.
#. *
#. * The EXTERNAL mechanism allows a client to request the server to use
#. * credentials established by means external to the mechanism to
#. * authenticate the client. The external means may be, for instance,
#. * TLS services.
#.
#. *
#. * @param {Connection} connection
#.
#. eslint-disable-next-line class-methods-use-this
#. According to XEP-178, an authzid SHOULD NOT be presented when the
#. * authcid contained or implied in the client certificate is the JID (i.e.
#. * authzid) with which the user wants to log in as.
#. *
#. * To NOT send the authzid, the user should therefore set the authcid equal
#. * to the JID when instantiating a new Strophe.Connection object.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/sasl-oauthbearer.js
#. *
#. * @typedef {import("./connection.js").default} Connection
#.
#. #__PURE__
#. *
#. * SASL OAuth Bearer authentication.
#.
#. *
#. * @param {Connection} connection
#.
#. eslint-disable-next-line class-methods-use-this
#. *
#. * @param {Connection} connection
#.
#. eslint-disable-next-line class-methods-use-this
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/sasl-plain.js
#. *
#. * @typedef {import("./connection.js").default} Connection
#.
#. #__PURE__
#. *
#. * SASL PLAIN authentication.
#.
#. *
#. * @param {Connection} connection
#.
#. eslint-disable-next-line class-methods-use-this
#. *
#. * @param {Connection} connection
#.
#. eslint-disable-next-line class-methods-use-this
#. Only include authzid if it differs from authcid.
#. See: https://tools.ietf.org/html/rfc6120#section-6.3.8
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/scram.js
#. *
#. * @typedef {import("./connection.js").default} Connection
#.
#. *
#. * @param {string} authMessage
#. * @param {ArrayBufferLike} clientKey
#. * @param {string} hashName
#.
#. *
#. * This function parses the information in a SASL SCRAM challenge response,
#. * into an object of the form
#. * { nonce: String,
#. *   salt:  ArrayBuffer,
#. *   iter:  Int
#. * }
#. * Returns undefined on failure.
#. * @param {string} challenge
#.
#. #__PURE__
#. Mandatory but unknown extension, per RFC 5802 we should abort
#. Non-mandatory extension, per RFC 5802 we should ignore it
#. Consider iteration counts less than 4096 insecure, as reccommended by
#. RFC 5802
#. *
#. * Derive the client and server keys given a string password,
#. * a hash name, and a bit length.
#. * Returns an object of the following form:
#. * { ck: ArrayBuffer, the client key
#. *   sk: ArrayBuffer, the server key
#. * }
#. * @param {string} password
#. * @param {BufferSource} salt
#. * @param {number} iter
#. * @param {string} hashName
#. * @param {number} hashBits
#.
#. *
#. * @param {string} authMessage
#. * @param {BufferSource} sk
#. * @param {string} hashName
#.
#. #__PURE__
#. *
#. * Generate an ASCII nonce (not containing the ',' character)
#. * @return {string}
#.
#. #__PURE__
#. generate 16 random bytes of nonce, base64 encoded
#. *
#. * @typedef {Object} Password
#. * @property {string} Password.name
#. * @property {string} Password.ck
#. * @property {string} Password.sk
#. * @property {number} Password.iter
#. * @property {string} salt
#.
#. *
#. * On success, sets
#. * connection_sasl_data["server-signature"]
#. * and
#. * connection._sasl_data.keys
#. *
#. * The server signature should be verified after this function completes..
#. *
#. * On failure, returns connection._sasl_failure_cb();
#. * @param {Connection} connection
#. * @param {string} challenge
#. * @param {string} hashName
#. * @param {number} hashBits
#.
#. #__PURE__
#. The RFC requires that we verify the (server) nonce has the client
#. nonce as an initial substring.
#. * @type {string}
#. Either restore the client key and server key passed in, or derive new ones
#. * @type {Password}
#. * @type {Password}
#. * @type {Password}
#. * @type {Password}
#. * @type {Password}
#. *
#. * Returns a string containing the client first message
#. * @param {Connection} connection
#. * @param {string} test_cnonce
#.
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/sasl-sha1.js
#. *
#. * @typedef {import("./connection.js").default} Connection
#.
#. #__PURE__
#. *
#. * SASL SCRAM SHA 1 authentication.
#.
#. *
#. * @param {Connection} connection
#.
#. eslint-disable-next-line class-methods-use-this
#. *
#. * @param {Connection} connection
#. * @param {string} [challenge]
#. * @return {Promise<string|false>} Mechanism response.
#.
#. eslint-disable-next-line class-methods-use-this
#. #__PURE__
#. *
#. * @param {Connection} connection
#. * @param {string} [test_cnonce]
#.
#. eslint-disable-next-line class-methods-use-this
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/sasl-sha256.js
#. *
#. * @typedef {import("./connection.js").default} Connection
#.
#. #__PURE__
#. *
#. * SASL SCRAM SHA 256 authentication.
#.
#. *
#. * @param {Connection} connection
#.
#. eslint-disable-next-line class-methods-use-this
#. *
#. * @param {Connection} connection
#. * @param {string} [challenge]
#.
#. eslint-disable-next-line class-methods-use-this
#. #__PURE__
#. *
#. * @param {Connection} connection
#. * @param {string} [test_cnonce]
#.
#. eslint-disable-next-line class-methods-use-this
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/sasl-sha384.js
#. *
#. * @typedef {import("./connection.js").default} Connection
#.
#. #__PURE__
#. *
#. * SASL SCRAM SHA 384 authentication.
#.
#. *
#. * @param {Connection} connection
#.
#. eslint-disable-next-line class-methods-use-this
#. *
#. * @param {Connection} connection
#. * @param {string} [challenge]
#.
#. eslint-disable-next-line class-methods-use-this
#. #__PURE__
#. *
#. * @param {Connection} connection
#. * @param {string} [test_cnonce]
#.
#. eslint-disable-next-line class-methods-use-this
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/sasl-sha512.js
#. *
#. * @typedef {import("./connection.js").default} Connection
#.
#. #__PURE__
#. *
#. * SASL SCRAM SHA 512 authentication.
#.
#. *
#. * @param {Connection} connection
#.
#. eslint-disable-next-line class-methods-use-this
#. *
#. * @param {Connection} connection
#. * @param {string} [challenge]
#.
#. eslint-disable-next-line class-methods-use-this
#. #__PURE__
#. *
#. * @param {Connection} connection
#. * @param {string} [test_cnonce]
#.
#. eslint-disable-next-line class-methods-use-this
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/sasl-xoauth2.js
#. *
#. * @typedef {import("./connection.js").default} Connection
#.
#. #__PURE__
#. *
#. * SASL X-OAuth2 authentication.
#.
#. *
#. * @param {Connection} connection
#.
#. eslint-disable-next-line class-methods-use-this
#. *
#. * @param {Connection} connection
#.
#. eslint-disable-next-line class-methods-use-this
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/errors.js
#. #__PURE__
#. *
#. * @param {string} message
#.
#. #__PURE__
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/websocket.js
#. *
#. * A JavaScript library to enable XMPP over Websocket in Strophejs.
#. *
#. * This file implements XMPP over WebSockets for Strophejs.
#. * If a Connection is established with a Websocket url (ws://...)
#. * Strophe will use WebSockets.
#. * For more information on XMPP-over-WebSocket see RFC 7395:
#. * http://tools.ietf.org/html/rfc7395
#. *
#. * WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)
#.
#. global clearTimeout, location
#. *
#. * @typedef {import("./connection.js").default} Connection
#.
#. *
#. * Helper class that handles WebSocket Connections
#. *
#. * The WebSocket class is used internally by Connection
#. * to encapsulate WebSocket sessions. It is not meant to be used from user's code.
#.
#. #__PURE__
#. *
#. * Create and initialize a WebSocket object.
#. * Currently only sets the connection Object.
#. * @param {Connection} connection - The Connection that will use WebSockets.
#.
#. If the service is not an absolute URL, assume it is a path and put the absolute
#. URL together from options, current URL and the path.
#. *
#. * _Private_ helper function to generate the <stream> start tag for WebSockets
#. * @private
#. * @return {Builder} - A Builder with a <stream> element.
#.
#. *
#. * _Private_ checks a message for stream:error
#. * @private
#. * @param {Element} bodyWrap - The received stanza.
#. * @param {number} connectstatus - The ConnectStatus that will be set on error.
#. * @return {boolean} - true if there was a streamerror, false otherwise.
#.
#. close the connection on stream_error
#. *
#. * Reset the connection.
#. *
#. * This function is called by the reset function of the Strophe Connection.
#. * Is not needed by WebSockets.
#.
#. eslint-disable-next-line class-methods-use-this
#. *
#. * _Private_ function called by Connection.connect
#. *
#. * Creates a WebSocket for a connection and assigns Callbacks to it.
#. * Does nothing if there already is a WebSocket.
#.
#. Ensure that there is no open WebSocket from a previous Connection.
#. *
#. * @typedef {Object} WebsocketLike
#. * @property {(str: string) => void} WebsocketLike.send
#. * @property {function(): void} WebsocketLike.close
#. * @property {function(): void} WebsocketLike.onopen
#. * @property {(e: ErrorEvent) => void} WebsocketLike.onerror
#. * @property {(e: CloseEvent) => void} WebsocketLike.onclose
#. * @property {(message: MessageEvent) => void} WebsocketLike.onmessage
#. * @property {string} WebsocketLike.readyState
#.
#. * @type {import('ws')|WebSocket|WebsocketLike}
#. * @param {ErrorEvent} e
#. * @param {CloseEvent} e
#. *
#. * Gets replaced with this._onMessage once _onInitialMessage is called
#. * @param {MessageEvent} message
#.
#. *
#. * _Private_ function called by Connection._connect_cb
#. * checks for stream:error
#. * @param {Element} bodyWrap - The received stanza.
#.
#. *
#. * _Private_ function that checks the opening <open /> tag for errors.
#. *
#. * Disconnects if there is an error and returns false, true otherwise.
#. * @private
#. * @param {Element} message - Stanza containing the <open /> tag.
#.
#. Check for errors in the <open /> tag
#. *
#. * _Private_ function that handles the first connection messages.
#. *
#. * On receiving an opening stream tag this callback replaces itself with the real
#. * message handler. On receiving a stream error the connection is terminated.
#. * @param {MessageEvent} message
#.
#. Strip the XML Declaration, if there is one
#. _handleStreamSteart will check for XML errors and disconnect on error
#. _connect_cb will check for stream:error and disconnect on error
#. <close xmlns="urn:ietf:params:xml:ns:xmpp-framing />
#. Parse the raw string to an XML element
#. Report this input to the raw and xml handlers
#. Valid scenarios: WSS->WSS, WS->ANY
#. *
#. * Called by _onInitialMessage in order to replace itself with the general message handler.
#. * This method is overridden by WorkerWebsocket, which manages a
#. * websocket connection via a service worker and doesn't have direct access
#. * to the socket.
#.
#. * @param {MessageEvent} m
#. *
#. * _Private_ function called by Connection.disconnect
#. * Disconnects and sends a last stanza if one is given
#. * @param {Element|Builder} [pres] - This stanza will be sent before disconnecting.
#.
#. *
#. * _Private_ function to disconnect.
#. * Just closes the Socket for WebSockets
#.
#. *
#. * PrivateFunction _streamWrap
#. * _Private_ helper function to wrap a stanza in a <stream> tag.
#. * This is used so Strophe can process stanzas from WebSockets like BOSH
#. * @param {string} stanza
#.
#. eslint-disable-next-line class-methods-use-this
#. *
#. * _Private_ function to close the WebSocket.
#. *
#. * Closes the socket if it is still open and deletes it
#.
#. *
#. * _Private_ function to check if the message queue is empty.
#. * @return {true} - True, because WebSocket messages are send immediately after queueing.
#.
#. eslint-disable-next-line class-methods-use-this
#. *
#. * _Private_ function to handle websockets closing.
#. * @param {CloseEvent} [e]
#.
#. in case the onError callback was not called (Safari 10 does not
#. call onerror when the initial connection fails) we need to
#. dispatch a CONNFAIL status update to be consistent with the
#. behavior on other browsers.
#. *
#. * @callback connectionCallback
#. * @param {Connection} connection
#.
#. *
#. * Called on stream start/restart when no stream:features
#. * has been received.
#. * @param {connectionCallback} callback
#.
#. *
#. * _Private_ timeout handler for handling non-graceful disconnection.
#. *
#. * This does nothing for WebSockets
#.
#. eslint-disable-line class-methods-use-this
#. *
#. * _Private_ helper function that makes sure all pending requests are aborted.
#.
#. eslint-disable-line class-methods-use-this
#. *
#. * _Private_ function to handle websockets errors.
#. * @param {Object} error - The websocket error.
#.
#. *
#. * _Private_ function called by Connection._onIdle
#. * sends all queued stanzas
#.
#. Shut up tsc
#. *
#. * _Private_ function to handle websockets messages.
#. *
#. * This function parses each of the messages as if they are full documents.
#. * [TODO : We may actually want to use a SAX Push parser].
#. *
#. * Since all XMPP traffic starts with
#. * <stream:stream version='1.0'
#. *                xml:lang='en'
#. *                xmlns='jabber:client'
#. *                xmlns:stream='http://etherx.jabber.org/streams'
#. *                id='3697395463'
#. *                from='SERVER'>
#. *
#. * The first stanza will always fail to be parsed.
#. *
#. * Additionally, the seconds stanza will always be <stream:features> with
#. * the stream NS defined in the previous stanza, so we need to 'force'
#. * the inclusion of the NS in this stanza.
#. *
#. * @param {MessageEvent} message - The websocket message event
#.
#. check for closing stream
#. This handles stream restarts
#. handle unavailable presence stanza before disconnecting
#. if we are already disconnecting we will ignore the unavailable stanza and
#. wait for the </stream:stream> tag before we close the connection
#. *
#. * _Private_ function to handle websockets connection setup.
#. * The opening stream tag is sent here.
#. * @private
#.
#. *
#. * _Private_ part of the Connection.send function for WebSocket
#. * Just flushes the messages that are in the queue
#.
#. *
#. * Send an xmpp:restart stanza.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/worker-websocket.js
#. *
#. * @license MIT
#. * @copyright JC Brand
#.
#. *
#. * Helper class that handles a websocket connection inside a shared worker.
#.
#. #__PURE__
#. *
#. * @typedef {import("./connection.js").default} Connection
#.
#. *
#. * Create and initialize a WorkerWebsocket object.
#. * @param {Connection} connection - The Connection
#.
#. *
#. * @private
#.
#. * @param {string} str
#. * @param {ErrorEvent} e
#. * @param {CloseEvent} e
#. * @param {MessageEvent} m
#. *
#. * @param {Function} callback
#.
#. * @param {MessageEvent} m
#. *
#. * @param {number} status
#. * @param {string} jid
#.
#. *
#. * @param {Element|Builder} pres - This stanza will be sent before disconnecting.
#.
#. *
#. * Called by _onInitialMessage in order to replace itself with the general message handler.
#. * This method is overridden by WorkerWebsocket, which manages a
#. * websocket connection via a service worker and doesn't have direct access
#. * to the socket.
#.
#. * @param {MessageEvent} m
#. *
#. * function that handles messages received from the service worker
#. * @private
#. * @param {MessageEvent} ev
#.
#. * @type {'_attachCallback'|'_onOpen'|'_onClose'|'_onError'}
#. * @type {Object.<string, number>}
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/connection.js
#. *
#. * _Private_ variable Used to store plugin names that need
#. * initialization during Connection construction.
#. * @type {Object.<string, Object>}
#.
#. *
#. * @typedef {import("./sasl.js").default} SASLMechanism
#. * @typedef {import("./request.js").default} Request
#.
#. *
#. * **XMPP Connection manager**
#. *
#. * This class is the main part of Strophe.  It manages a BOSH or websocket
#. * connection to an XMPP server and dispatches events to the user callbacks
#. * as data arrives.
#. *
#. * It supports various authentication mechanisms (e.g. SASL PLAIN, SASL SCRAM),
#. * and more can be added via
#. * {@link Connection#registerSASLMechanisms|registerSASLMechanisms()}.
#. *
#. * After creating a Connection object, the user will typically
#. * call {@link Connection#connect|connect()} with a user supplied callback
#. * to handle connection level events like authentication failure,
#. * disconnection, or connection complete.
#. *
#. * The user will also have several event handlers defined by using
#. * {@link Connection#addHandler|addHandler()} and
#. * {@link Connection#addTimedHandler|addTimedHandler()}.
#. * These will allow the user code to respond to interesting stanzas or do
#. * something periodically with the connection. These handlers will be active
#. * once authentication is finished.
#. *
#. * To send data to the connection, use {@link Connection#send|send()}.
#. *
#. * @memberof Strophe
#.
#. #__PURE__
#. *
#. * @typedef {Object.<string, string>} Cookie
#. * @typedef {Cookie|Object.<string, Cookie>} Cookies
#.
#. *
#. * @typedef {Object} ConnectionOptions
#. * @property {Cookies} [cookies]
#. *  Allows you to pass in cookies that will be included in HTTP requests.
#. *  Relevant to both the BOSH and Websocket transports.
#. *
#. *  The passed in value must be a map of cookie names and string values.
#. *
#. *  > { "myCookie": {
#. *  >     "value": "1234",
#. *  >     "domain": ".example.org",
#. *  >     "path": "/",
#. *  >     "expires": expirationDate
#. *  >     }
#. *  > }
#. *
#. *  Note that cookies can't be set in this way for domains other than the one
#. *  that's hosting Strophe (i.e. cross-domain).
#. *  Those cookies need to be set under those domains, for example they can be
#. *  set server-side by making a XHR call to that domain to ask it to set any
#. *  necessary cookies.
#. * @property {SASLMechanism[]} [mechanisms]
#. *  Allows you to specify the SASL authentication mechanisms that this
#. *  instance of Connection (and therefore your XMPP client) will support.
#. *
#. *  The value must be an array of objects with {@link SASLMechanism}
#. *  prototypes.
#. *
#. *  If nothing is specified, then the following mechanisms (and their
#. *  priorities) are registered:
#. *
#. *      Mechanism       Priority
#. *      ------------------------
#. *      SCRAM-SHA-512   72
#. *      SCRAM-SHA-384   71
#. *      SCRAM-SHA-256   70
#. *      SCRAM-SHA-1     60
#. *      PLAIN           50
#. *      OAUTHBEARER     40
#. *      X-OAUTH2        30
#. *      ANONYMOUS       20
#. *      EXTERNAL        10
#. *
#. * @property {boolean} [explicitResourceBinding]
#. *  If `explicitResourceBinding` is set to `true`, then the XMPP client
#. *  needs to explicitly call {@link Connection.bind} once the XMPP
#. *  server has advertised the `urn:ietf:propertys:xml:ns:xmpp-bind` feature.
#. *
#. *  Making this step explicit allows client authors to first finish other
#. *  stream related tasks, such as setting up an XEP-0198 Stream Management
#. *  session, before binding the JID resource for this session.
#. *
#. * @property {'ws'|'wss'} [protocol]
#. *  _Note: This option is only relevant to Websocket connections, and not BOSH_
#. *
#. *  If you want to connect to the current host with a WebSocket connection you
#. *  can tell Strophe to use WebSockets through the "protocol" option.
#. *  Valid values are `ws` for WebSocket and `wss` for Secure WebSocket.
#. *  So to connect to "wss://CURRENT_HOSTNAME/xmpp-websocket" you would call
#. *
#. *      const conn = new Strophe.Connection(
#. *          "/xmpp-websocket/",
#. *          {protocol: "wss"}
#. *      );
#. *
#. *  Note that relative URLs _NOT_ starting with a "/" will also include the path
#. *  of the current site.
#. *
#. *  Also because downgrading security is not permitted by browsers, when using
#. *  relative URLs both BOSH and WebSocket connections will use their secure
#. *  variants if the current connection to the site is also secure (https).
#. *
#. * @property {string} [worker]
#. *  _Note: This option is only relevant to Websocket connections, and not BOSH_
#. *
#. *  Set this option to URL from where the shared worker script should be loaded.
#. *
#. *  To run the websocket connection inside a shared worker.
#. *  This allows you to share a single websocket-based connection between
#. *  multiple Connection instances, for example one per browser tab.
#. *
#. *  The script to use is the one in `src/shared-connection-worker.js`.
#. *
#. * @property {boolean} [sync]
#. *  Used to control whether BOSH HTTP requests will be made synchronously or not.
#. *  The default behaviour is asynchronous. If you want to make requests
#. *  synchronous, make "sync" evaluate to true.
#. *
#. *  > const conn = new Strophe.Connection("/http-bind/", {sync: true});
#. *
#. *  You can also toggle this on an already established connection.
#. *
#. *  > conn.options.sync = true;
#. *
#. * @property {string[]} [customHeaders]
#. *  Used to provide custom HTTP headers to be included in the BOSH HTTP requests.
#. *
#. * @property {boolean} [keepalive]
#. *  Used to instruct Strophe to maintain the current BOSH session across
#. *  interruptions such as webpage reloads.
#. *
#. *  It will do this by caching the sessions tokens in sessionStorage, and when
#. *  "restore" is called it will check whether there are cached tokens with
#. *  which it can resume an existing session.
#. *
#. * @property {boolean} [withCredentials]
#. *  Used to indicate wether cookies should be included in HTTP requests (by default
#. *  they're not).
#. *  Set this value to `true` if you are connecting to a BOSH service
#. *  and for some reason need to send cookies to it.
#. *  In order for this to work cross-domain, the server must also enable
#. *  credentials by setting the `Access-Control-Allow-Credentials` response header
#. *  to "true". For most usecases however this setting should be false (which
#. *  is the default).
#. *  Additionally, when using `Access-Control-Allow-Credentials`, the
#. *  `Access-Control-Allow-Origin` header can't be set to the wildcard "*", but
#. *  instead must be restricted to actual domains.
#. *
#. * @property {string} [contentType]
#. *  Used to change the default Content-Type, which is "text/xml; charset=utf-8".
#. *  Can be useful to reduce the amount of CORS preflight requests that are sent
#. *  to the server.
#.
#. *
#. * Create and initialize a {@link Connection} object.
#. *
#. * The transport-protocol for this connection will be chosen automatically
#. * based on the given service parameter. URLs starting with "ws://" or
#. * "wss://" will use WebSockets, URLs starting with "http://", "https://"
#. * or without a protocol will use [BOSH](https://xmpp.org/extensions/xep-0124.html).
#. *
#. * To make Strophe connect to the current host you can leave out the protocol
#. * and host part and just pass the path:
#. *
#. *  const conn = new Strophe.Connection("/http-bind/");
#. *
#. * @param {string} service - The BOSH or WebSocket service URL.
#. * @param {ConnectionOptions} options - A object containing configuration options
#.
#. The service URL
#. Configuration options
#. The connected JID.
#. the JIDs domain
#. stream:features
#. SASL
#. *
#. * @typedef {Object.<string, any>} SASLData
#. * @property {Object} [SASLData.keys]
#.
#. * @type {SASLData}
#. * @type {Object.<string, SASLMechanism>}
#. * @type {TimedHandler[]}
#. * @type {Handler[]}
#. * @type {TimedHandler[]}
#. * @type {Handler[]}
#. * @type {TimedHandler[]}
#. * @type {Handler[]}
#. * @type {Object.<number, Function>}
#. * @type {Object.<number, Function>}
#. * @type {(Element|'restart')[]}
#. Max retries before disconnecting
#. Call onIdle callback every 1/10th of a second
#. A client must always respond to incoming IQ "set" and "get" stanzas.
#. See https://datatracker.ietf.org/doc/html/rfc6120#section-8.2.3
#.
#. This is a fallback handler which gets called when no other handler
#. was called for a received IQ "set" or "get".
#. *
#. * @param {Element} iq
#.
#. initialize plugins
#. @ts-ignore
#. @ts-ignore
#. *
#. * Extends the Connection object with the given plugin.
#. * @param {string} name - The name of the extension.
#. * @param {Object} ptype - The plugin's prototype.
#.
#. *
#. * Select protocal based on this.options or this.service
#.
#. *
#. * Reset the connection.
#. *
#. * This function should be called after a connection is disconnected
#. * before that connection is reused.
#.
#. SASL
#. handler lists
#. * @type {Request[]}
#. *
#. * Pause the request manager.
#. *
#. * This will prevent Strophe from sending any more requests to the
#. * server.  This is very useful for temporarily pausing
#. * BOSH-Connections while a lot of send() calls are happening quickly.
#. * This causes Strophe to send the data in a single request, saving
#. * many request trips.
#.
#. *
#. * Resume the request manager.
#. *
#. * This resumes after pause() has been called.
#.
#. *
#. * Generate a unique ID for use in <iq/> elements.
#. *
#. * All <iq/> stanzas are required to have unique id attributes.  This
#. * function makes creating these easy.  Each connection instance has
#. * a counter which starts from zero, and the value of this counter
#. * plus a colon followed by the suffix becomes the unique id. If no
#. * suffix is supplied, the counter is used as the unique id.
#. *
#. * Suffixes are used to make debugging easier when reading the stream
#. * data, and their use is recommended.  The counter resets to 0 for
#. * every new connection for the same reason.  For connections to the
#. * same server that authenticate the same way, all the ids should be
#. * the same, which makes it easy to see changes.  This is useful for
#. * automated testing as well.
#. *
#. * @param {string} suffix - A optional suffix to append to the id.
#. * @returns {string} A unique string to be used for the id attribute.
#.
#. eslint-disable-next-line class-methods-use-this
#. *
#. * Register a handler function for when a protocol (websocker or HTTP)
#. * error occurs.
#. *
#. * NOTE: Currently only HTTP errors for BOSH requests are handled.
#. * Patches that handle websocket errors would be very welcome.
#. *
#. * @example
#. *  function onError(err_code){
#. *    //do stuff
#. *  }
#. *
#. *  const conn = Strophe.connect('http://example.com/http-bind');
#. *  conn.addProtocolErrorHandler('HTTP', 500, onError);
#. *  // Triggers HTTP 500 error and onError handler will be called
#. *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);
#. *
#. * @param {'HTTP'|'websocket'} protocol - 'HTTP' or 'websocket'
#. * @param {number} status_code - Error status code (e.g 500, 400 or 404)
#. * @param {Function} callback - Function that will fire on Http error
#.
#. *
#. * @typedef {Object} Password
#. * @property {string} Password.name
#. * @property {string} Password.ck
#. * @property {string} Password.sk
#. * @property {number} Password.iter
#. * @property {string} Password.salt
#.
#. *
#. * Starts the connection process.
#. *
#. * As the connection process proceeds, the user supplied callback will
#. * be triggered multiple times with status updates.  The callback
#. * should take two arguments - the status code and the error condition.
#. *
#. * The status code will be one of the values in the Strophe.Status
#. * constants.  The error condition will be one of the conditions
#. * defined in RFC 3920 or the condition 'strophe-parsererror'.
#. *
#. * The Parameters _wait_, _hold_ and _route_ are optional and only relevant
#. * for BOSH connections. Please see XEP 124 for a more detailed explanation
#. * of the optional parameters.
#. *
#. * @param {string} jid - The user's JID.  This may be a bare JID,
#. *     or a full JID.  If a node is not supplied, SASL OAUTHBEARER or
#. *     SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will
#. *     process the provided password value as an access token).
#. *   (String or Object) pass - The user's password, or an object containing
#. *     the users SCRAM client and server keys, in a fashion described as follows:
#. *
#. *     { name: String, representing the hash used (eg. SHA-1),
#. *       salt: String, base64 encoded salt used to derive the client key,
#. *       iter: Int,    the iteration count used to derive the client key,
#. *       ck:   String, the base64 encoding of the SCRAM client key
#. *       sk:   String, the base64 encoding of the SCRAM server key
#. *     }
#. * @param {string|Password} pass - The user password
#. * @param {Function} callback - The connect callback function.
#. * @param {number} [wait] - The optional HTTPBIND wait value.  This is the
#. *     time the server will wait before returning an empty result for
#. *     a request.  The default setting of 60 seconds is recommended.
#. * @param {number} [hold] - The optional HTTPBIND hold value.  This is the
#. *     number of connections the server will hold at one time.  This
#. *     should almost always be set to 1 (the default).
#. * @param {string} [route] - The optional route value.
#. * @param {string} [authcid] - The optional alternative authentication identity
#. *     (username) if intending to impersonate another user.
#. *     When using the SASL-EXTERNAL authentication mechanism, for example
#. *     with client certificates, then the authcid value is used to
#. *     determine whether an authorization JID (authzid) should be sent to
#. *     the server. The authzid should NOT be sent to the server if the
#. *     authzid and authcid are the same. So to prevent it from being sent
#. *     (for example when the JID is already contained in the client
#. *     certificate), set authcid to that same JID. See XEP-178 for more
#. *     details.
#. *  @param {number} [disconnection_timeout=3000] - The optional disconnection timeout
#. *     in milliseconds before _doDisconnect will be called.
#.
#. * Authorization identity
#. * Authentication identity (User name)
#. * Authentication identity (User password)
#. *
#. * The SASL SCRAM client and server keys. This variable will be populated with a non-null
#. * object of the above described form after a successful SCRAM connection
#.
#. parse jid for domain
#. *
#. * Attach to an already created and authenticated BOSH session.
#. *
#. * This function is provided to allow Strophe to attach to BOSH
#. * sessions which have been created externally, perhaps by a Web
#. * application.  This is often used to support auto-login type features
#. * without putting user credentials into the page.
#. *
#. * @param {string|Function} jid - The full JID that is bound by the session.
#. * @param {string} [sid] - The SID of the BOSH session.
#. * @param {number} [rid] - The current RID of the BOSH session.  This RID
#. *     will be used by the next request.
#. * @param {Function} [callback] - The connect callback function.
#. * @param {number} [wait] - The optional HTTPBIND wait value.  This is the
#. *     time the server will wait before returning an empty result for
#. *     a request.  The default setting of 60 seconds is recommended.
#. *     Other settings will require tweaks to the Strophe.TIMEOUT value.
#. * @param {number} [hold] - The optional HTTPBIND hold value.  This is the
#. *     number of connections the server will hold at one time.  This
#. *     should almost always be set to 1 (the default).
#. * @param {number} [wind] - The optional HTTBIND window value.  This is the
#. *     allowed range of request ids that are valid.  The default is 5.
#.
#. *
#. * Attempt to restore a cached BOSH session.
#. *
#. * This function is only useful in conjunction with providing the
#. * "keepalive":true option when instantiating a new {@link Connection}.
#. *
#. * When "keepalive" is set to true, Strophe will cache the BOSH tokens
#. * RID (Request ID) and SID (Session ID) and then when this function is
#. * called, it will attempt to restore the session from those cached
#. * tokens.
#. *
#. * This function must therefore be called instead of connect or attach.
#. *
#. * For an example on how to use it, please see examples/restore.js
#. *
#. * @param {string} jid - The user's JID.  This may be a bare JID or a full JID.
#. * @param {Function} callback - The connect callback function.
#. * @param {number} [wait] - The optional HTTPBIND wait value.  This is the
#. *     time the server will wait before returning an empty result for
#. *     a request.  The default setting of 60 seconds is recommended.
#. * @param {number} [hold] - The optional HTTPBIND hold value.  This is the
#. *     number of connections the server will hold at one time.  This
#. *     should almost always be set to 1 (the default).
#. * @param {number} [wind] - The optional HTTBIND window value.  This is the
#. *     allowed range of request ids that are valid.  The default is 5.
#.
#. *
#. * Checks whether sessionStorage and JSON are supported and whether we're
#. * using BOSH.
#.
#. *
#. * User overrideable function that receives XML data coming into the
#. * connection.
#. *
#. * The default function does nothing.  User code can override this with
#. * > Connection.xmlInput = function (elem) {
#. * >   (user code)
#. * > };
#. *
#. * Due to limitations of current Browsers' XML-Parsers the opening and closing
#. * <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.
#. *
#. * BOSH-Connections will have all stanzas wrapped in a <body> tag. See
#. * <Bosh.strip> if you want to strip this tag.
#. *
#. * @param {Node|MessageEvent} elem - The XML data received by the connection.
#.
#. eslint-disable-next-line no-unused-vars, class-methods-use-this
#. *
#. * User overrideable function that receives XML data sent to the
#. * connection.
#. *
#. * The default function does nothing.  User code can override this with
#. * > Connection.xmlOutput = function (elem) {
#. * >   (user code)
#. * > };
#. *
#. * Due to limitations of current Browsers' XML-Parsers the opening and closing
#. * <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.
#. *
#. * BOSH-Connections will have all stanzas wrapped in a <body> tag. See
#. * <Bosh.strip> if you want to strip this tag.
#. *
#. * @param {Element} elem - The XMLdata sent by the connection.
#.
#. eslint-disable-next-line no-unused-vars, class-methods-use-this
#. *
#. * User overrideable function that receives raw data coming into the
#. * connection.
#. *
#. * The default function does nothing.  User code can override this with
#. * > Connection.rawInput = function (data) {
#. * >   (user code)
#. * > };
#. *
#. * @param {string} data - The data received by the connection.
#.
#. eslint-disable-next-line no-unused-vars, class-methods-use-this
#. *
#. * User overrideable function that receives raw data sent to the
#. * connection.
#. *
#. * The default function does nothing.  User code can override this with
#. * > Connection.rawOutput = function (data) {
#. * >   (user code)
#. * > };
#. *
#. * @param {string} data - The data sent by the connection.
#.
#. eslint-disable-next-line no-unused-vars, class-methods-use-this
#. *
#. * User overrideable function that receives the new valid rid.
#. *
#. * The default function does nothing. User code can override this with
#. * > Connection.nextValidRid = function (rid) {
#. * >    (user code)
#. * > };
#. *
#. * @param {number} rid - The next valid rid
#.
#. eslint-disable-next-line no-unused-vars, class-methods-use-this
#. *
#. * Send a stanza.
#. *
#. * This function is called to push data onto the send queue to
#. * go out over the wire.  Whenever a request is sent to the BOSH
#. * server, all pending data is sent and the queue is flushed.
#. *
#. * @param {Element|Builder|Element[]|Builder[]} stanza - The stanza to send
#.
#. *
#. * Immediately send any pending outgoing data.
#. *
#. * Normally send() queues outgoing data until the next idle period
#. * (100ms), which optimizes network use in the common cases when
#. * several send()s are called in succession. flush() can be used to
#. * immediately send all pending data.
#.
#. cancel the pending idle period and run the idle function
#. immediately
#. *
#. * Helper function to send presence stanzas. The main benefit is for
#. * sending presence stanzas for which you expect a responding presence
#. * stanza with the same id (for example when leaving a chat room).
#. *
#. * @param {Element} stanza - The stanza to send.
#. * @param {Function} [callback] - The callback function for a successful request.
#. * @param {Function} [errback] - The callback function for a failed or timed
#. *    out request.  On timeout, the stanza will be null.
#. * @param {number} [timeout] - The time specified in milliseconds for a
#. *    timeout to occur.
#. * @return {string} The id used to send the presence.
#.
#. * @type {TimedHandler}
#. inject id if not found
#. * @param {Element} stanza
#. remove timeout handler if there is one
#. if timeout specified, set up a timeout handler.
#. get rid of normal handler
#. call errback on timeout with null stanza
#. *
#. * Helper function to send IQ stanzas.
#. *
#. * @param {Element|Builder} stanza - The stanza to send.
#. * @param {Function} [callback] - The callback function for a successful request.
#. * @param {Function} [errback] - The callback function for a failed or timed
#. *     out request.  On timeout, the stanza will be null.
#. * @param {number} [timeout] - The time specified in milliseconds for a
#. *     timeout to occur.
#. * @return {string} The id used to send the IQ.
#.
#. * @type {TimedHandler}
#. inject id if not found
#. * @param {Element} stanza
#. remove timeout handler if there is one
#. if timeout specified, set up a timeout handler.
#. get rid of normal handler
#. call errback on timeout with null stanza
#. *
#. * Queue outgoing data for later sending.  Also ensures that the data
#. * is a DOMElement.
#. * @private
#. * @param {Element} element
#.
#. *
#. * Send an xmpp:restart stanza.
#. * @private
#.
#. *
#. * Add a timed handler to the connection.
#. *
#. * This function adds a timed handler.  The provided handler will
#. * be called every period milliseconds until it returns false,
#. * the connection is terminated, or the handler is removed.  Handlers
#. * that wish to continue being invoked should return true.
#. *
#. * Because of method binding it is necessary to save the result of
#. * this function if you wish to remove a handler with
#. * deleteTimedHandler().
#. *
#. * Note that user handlers are not active until authentication is
#. * successful.
#. *
#. * @param {number} period - The period of the handler.
#. * @param {Function} handler - The callback function.
#. * @return {TimedHandler} A reference to the handler that can be used to remove it.
#.
#. *
#. * Delete a timed handler for a connection.
#. *
#. * This function removes a timed handler from the connection.  The
#. * handRef parameter is *not* the function passed to addTimedHandler(),
#. * but is the reference returned from addTimedHandler().
#. * @param {TimedHandler} handRef - The handler reference.
#.
#. this must be done in the Idle loop so that we don't change
#. the handlers during iteration
#. *
#. * @typedef {Object} HandlerOptions
#. * @property {boolean} [HandlerOptions.matchBareFromJid]
#. * @property {boolean} [HandlerOptions.ignoreNamespaceFragment]
#.
#. *
#. * Add a stanza handler for the connection.
#. *
#. * This function adds a stanza handler to the connection.  The
#. * handler callback will be called for any stanza that matches
#. * the parameters.  Note that if multiple parameters are supplied,
#. * they must all match for the handler to be invoked.
#. *
#. * The handler will receive the stanza that triggered it as its argument.
#. * *The handler should return true if it is to be invoked again;
#. * returning false will remove the handler after it returns.*
#. *
#. * As a convenience, the ns parameters applies to the top level element
#. * and also any of its immediate children.  This is primarily to make
#. * matching /iq/query elements easy.
#. *
#. * ### Options
#. *
#. * With the options argument, you can specify boolean flags that affect how
#. * matches are being done.
#. *
#. * Currently two flags exist:
#. *
#. * * *matchBareFromJid*:
#. *     When set to true, the from parameter and the
#. *     from attribute on the stanza will be matched as bare JIDs instead
#. *     of full JIDs. To use this, pass {matchBareFromJid: true} as the
#. *     value of options. The default value for matchBareFromJid is false.
#. *
#. * * *ignoreNamespaceFragment*:
#. *     When set to true, a fragment specified on the stanza's namespace
#. *     URL will be ignored when it's matched with the one configured for
#. *     the handler.
#. *
#. *     This means that if you register like this:
#. *
#. *     >   connection.addHandler(
#. *     >       handler,
#. *     >       'http://jabber.org/protocol/muc',
#. *     >       null, null, null, null,
#. *     >       {'ignoreNamespaceFragment': true}
#. *     >   );
#. *
#. *     Then a stanza with XML namespace of
#. *     'http://jabber.org/protocol/muc#user' will also be matched. If
#. *     'ignoreNamespaceFragment' is false, then only stanzas with
#. *     'http://jabber.org/protocol/muc' will be matched.
#. *
#. * ### Deleting the handler
#. *
#. * The return value should be saved if you wish to remove the handler
#. * with `deleteHandler()`.
#. *
#. * @param {Function} handler - The user callback.
#. * @param {string} ns - The namespace to match.
#. * @param {string} name - The stanza name to match.
#. * @param {string|string[]} type - The stanza type (or types if an array) to match.
#. * @param {string} id - The stanza id attribute to match.
#. * @param {string} [from] - The stanza from attribute to match.
#. * @param {HandlerOptions} [options] - The handler options
#. * @return {Handler} A reference to the handler that can be used to remove it.
#.
#. *
#. * Delete a stanza handler for a connection.
#. *
#. * This function removes a stanza handler from the connection.  The
#. * handRef parameter is *not* the function passed to addHandler(),
#. * but is the reference returned from addHandler().
#. *
#. * @param {Handler} handRef - The handler reference.
#.
#. this must be done in the Idle loop so that we don't change
#. the handlers during iteration
#. If a handler is being deleted while it is being added,
#. prevent it from getting added
#. *
#. * Register the SASL mechanisms which will be supported by this instance of
#. * Connection (i.e. which this XMPP client will support).
#. * @param {SASLMechanism[]} mechanisms - Array of objects with SASLMechanism prototypes
#.
#. *
#. * Register a single SASL mechanism, to be supported by this client.
#. * @param {any} Mechanism - Object with a Strophe.SASLMechanism prototype
#.
#. *
#. * Start the graceful disconnection process.
#. *
#. * This function starts the disconnection process.  This process starts
#. * by sending unavailable presence and sending BOSH body of type
#. * terminate.  A timeout handler makes sure that disconnection happens
#. * even if the BOSH server does not respond.
#. * If the Connection object isn't connected, at least tries to abort all pending requests
#. * so the connection object won't generate successful requests (which were already opened).
#. *
#. * The user supplied connection callback will be notified of the
#. * progress as this process happens.
#. *
#. * @param {string} [reason] - The reason the disconnect is occuring.
#.
#. setup timeout handler
#. *
#. * _Private_ helper function that makes sure plugins and the user's
#. * callback are notified of connection status changes.
#. * @param {number} status - the new connection status, one of the values
#. *     in Strophe.Status
#. * @param {string|null} [condition] - the error condition
#. * @param {Element} [elem] - The triggering stanza.
#.
#. notify all plugins listening for status changes
#. @ts-ignore
#. notify the user's callback
#. *
#. * _Private_ function to disconnect.
#. *
#. * This is the last piece of the disconnection logic.  This resets the
#. * connection and alerts the user's connection callback.
#. * @param {string|null} [condition] - the error condition
#.
#. Cancel Disconnect Timeout
#. delete handlers
#. tell the parent we disconnected
#. *
#. * _Private_ handler to processes incoming data from the the connection.
#. *
#. * Except for _connect_cb handling the initial connection request,
#. * this function handles the incoming data for all requests.  This
#. * function also fires stanza handlers that match each incoming
#. * stanza.
#. * @param {Element | Request} req - The request that has data ready.
#. * @param {string} [raw] - The stanza as raw string.
#.
#. * @type {Element}
#. * @type {Request}
#. remove handlers scheduled for deletion
#. add handlers scheduled for addition
#. handle graceful disconnect
#. Don't process stanzas that come in after disconnect
#. an error occurred
#. send each incoming stanza through the handler chain
#. * @param {Element} child
#. if the handler throws an exception, we consider it as false
#. If no handler was fired for an incoming IQ with type="set",
#. then we return an IQ error stanza with service-unavailable.
#. *
#. * @callback connectionCallback
#. * @param {Connection} connection
#.
#. *
#. * _Private_ handler for initial connection request.
#. *
#. * This handler is used to process the initial connection request
#. * response from the BOSH server. It is used to set up authentication
#. * handlers and start the authentication process.
#. *
#. * SASL authentication will be attempted if available, otherwise
#. * the code will fall back to legacy authentication.
#. *
#. * @param {Element | Request} req - The current request.
#. * @param {connectionCallback} _callback - low level (xmpp) connect callback function.
#. *     Useful for plugins with their own xmpp connect callback (when they
#. *     want to do something special).
#. * @param {string} [raw] - The stanza as raw string.
#.
#. * @type {Element}
#. * @type {Request}
#. Check for the stream:features tag
#. There are no matching SASL mechanisms and also no legacy
#. auth available.
#. *
#. * Sorts an array of objects with prototype SASLMechanism according to
#. * their priorities.
#. * @param {SASLMechanism[]} mechanisms - Array of SASL mechanisms.
#.
#. eslint-disable-next-line  class-methods-use-this
#. Sorting mechanisms according to priority.
#. *
#. * Set up authentication
#. *
#. * Continues the initial connection request by setting up authentication
#. * handlers and starting the authentication process.
#. *
#. * SASL authentication will be attempted if available, otherwise
#. * the code will fall back to legacy authentication.
#. *
#. * @param {SASLMechanism[]} matched - Array of SASL mechanisms supported.
#.
#. *
#. * Iterate through an array of SASL mechanisms and attempt authentication
#. * with the highest priority (enabled) mechanism.
#. *
#. * @private
#. * @param {SASLMechanism[]} mechanisms - Array of SASL mechanisms.
#. * @return {Boolean} mechanism_found - true or false, depending on whether a
#. *  valid SASL mechanism was found with which authentication could be started.
#.
#. * @type {string}
#. *
#. * _Private_ handler for the SASL challenge
#. * @private
#. * @param {Element} elem
#.
#. #__PURE__
#. *
#. * Attempt legacy (i.e. non-SASL) authentication.
#. * @private
#.
#. we don't have a node, which is required for non-anonymous
#. client connections
#. Fall back to legacy authentication
#. *
#. * _Private_ handler for legacy authentication.
#. *
#. * This handler is called in response to the initial <iq type='get'/>
#. * for legacy authentication.  It builds an authentication <iq/> and
#. * sends it, creating a handler (calling back to _auth2_cb()) to
#. * handle the result
#. * @private
#. * @return {false} `false` to remove the handler.
#.
#. eslint-disable-next-line no-unused-vars
#.
#. build plaintext auth iq
#. since the user has not supplied a resource, we pick
#. a default one here.  unlike other auth methods, the server
#. cannot do this for us.
#. *
#. * _Private_ handler for succesful SASL authentication.
#. * @private
#. * @param {Element} elem - The matching stanza.
#. * @return {false} `false` to remove the handler.
#.
#. remove old handlers
#. remove old handlers
#. * @type {Handler[]}
#. *
#. * @param {Handler[]} handlers
#. * @param {Element} elem
#.
#. * @param {Element} elem
#. * @param {Element} elem
#. we must send an xmpp:restart now
#. *
#. * @private
#. * @param {Element} elem - The matching stanza.
#. * @return {false} `false` to remove the handler.
#.
#. save stream:features for future usage
#. *
#. * Sends an IQ to the XMPP server to bind a JID resource for this session.
#. *
#. * https://tools.ietf.org/html/rfc6120#section-7.5
#. *
#. * If `explicitResourceBinding` was set to a truthy value in the options
#. * passed to the Connection constructor, then this function needs
#. * to be called explicitly by the client author.
#. *
#. * Otherwise it'll be called automatically as soon as the XMPP server
#. * advertises the "urn:ietf:params:xml:ns:xmpp-bind" stream feature.
#.
#. *
#. * _Private_ handler for binding result and session start.
#. * @private
#. * @param {Element} elem - The matching stanza.
#. * @return {false} `false` to remove the handler.
#.
#. TODO - need to grab errors
#. *
#. * Send IQ request to establish a session with the XMPP server.
#. *
#. * See https://xmpp.org/rfcs/rfc3921.html#session
#. *
#. * Note: The protocol for session establishment has been determined as
#. * unnecessary and removed in RFC-6121.
#. * @private
#.
#. *
#. * _Private_ handler for the server's IQ response to a client's session
#. * request.
#. *
#. * This sets Connection.authenticated to true on success, which
#. * starts the processing of user handlers.
#. *
#. * See https://xmpp.org/rfcs/rfc3921.html#session
#. *
#. * Note: The protocol for session establishment has been determined as
#. * unnecessary and removed in RFC-6121.
#. * @private
#. * @param {Element} elem - The matching stanza.
#. * @return {false} `false` to remove the handler.
#.
#. *
#. * _Private_ handler for SASL authentication failure.
#. * @param {Element} [elem] - The matching stanza.
#. * @return {false} `false` to remove the handler.
#.
#. delete unneeded handlers
#. *
#. * _Private_ handler to finish legacy authentication.
#. *
#. * This handler is called when the result from the jabber:iq:auth
#. * <iq/> stanza is returned.
#. * @private
#. * @param {Element} elem - The stanza that triggered the callback.
#. * @return {false} `false` to remove the handler.
#.
#. *
#. * _Private_ function to add a system level timed handler.
#. *
#. * This function is used to add a TimedHandler for the
#. * library code.  System timed handlers are allowed to run before
#. * authentication is complete.
#. * @param {number} period - The period of the handler.
#. * @param {Function} handler - The callback function.
#.
#. *
#. * _Private_ function to add a system level stanza handler.
#. *
#. * This function is used to add a Handler for the
#. * library code.  System stanza handlers are allowed to run before
#. * authentication is complete.
#. * @param {Function} handler - The callback function.
#. * @param {string} ns - The namespace to match.
#. * @param {string} name - The stanza name to match.
#. * @param {string} type - The stanza type attribute to match.
#. * @param {string} id - The stanza id attribute to match.
#.
#. *
#. * _Private_ timeout handler for handling non-graceful disconnection.
#. *
#. * If the graceful disconnect process does not complete within the
#. * time allotted, this handler finishes the disconnect anyway.
#. * @return {false} `false` to remove the handler.
#.
#. actually disconnect
#. *
#. * _Private_ handler to process events during idle cycle.
#. *
#. * This handler is called every 100ms to fire timed handlers that
#. * are ready and keep poll requests going.
#.
#. add timed handlers scheduled for addition
#. NOTE: we add before remove in the case a timed handler is
#. added and then deleted before the next _onIdle() call.
#. remove timed handlers that have been scheduled for deletion
#. call ready timed handlers
#. reactivate the timer only if connected
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/stanza.js
#. *
#. * @param {string} string
#. * @param {boolean} [throwErrorIfInvalidNS]
#. * @return {Element}
#.
#. *
#. * A Stanza represents a XML element used in XMPP (commonly referred to as
#. * stanzas).
#.
#. #__PURE__
#. *
#. * @param { string[] } strings
#. * @param { any[] } values
#.
#. *
#. * @return { string }
#.
#. *
#. * @return { Element }
#.
#. *
#. * Tagged template literal function which generates {@link Stanza } objects
#. * @example stx`<presence type="${type}" xmlns="jabber:client"><show>${show}</show></presence>`
#. *
#. * @param { string[] } strings
#. * @param { ...any } values
#.
#. CONCATENATED MODULE: ./node_modules/strophe.js/src/index.js
#. global globalThis
#. *
#. * A container for all Strophe library functions.
#. *
#. * This object is a container for all the objects and constants
#. * used in the library.  It is not meant to be instantiated, but to
#. * provide a namespace for library objects, constants, and functions.
#. *
#. * @namespace Strophe
#. * @property {Handler} Handler
#. * @property {Builder} Builder
#. * @property {Request} Request Represents HTTP Requests made for a BOSH connection
#. * @property {Bosh} Bosh Support for XMPP-over-HTTP via XEP-0124 (BOSH)
#. * @property {Websocket} Websocket Support for XMPP over websocket
#. * @property {WorkerWebsocket} WorkerWebsocket Support for XMPP over websocket in a shared worker
#. * @property {number} TIMEOUT=1.1 Timeout multiplier. A waiting BOSH HTTP request
#. *  will be considered failed after Math.floor(TIMEOUT * wait) seconds have elapsed.
#. *  This defaults to 1.1, and with default wait, 66 seconds.
#. * @property {number} SECONDARY_TIMEOUT=0.1 Secondary timeout multiplier.
#. *  In cases where Strophe can detect early failure, it will consider the request
#. *  failed if it doesn't return after `Math.floor(SECONDARY_TIMEOUT * wait)`
#. *  seconds have elapsed. This defaults to 0.1, and with default wait, 6 seconds.
#. * @property {SASLAnonymous} SASLAnonymous SASL ANONYMOUS authentication.
#. * @property {SASLPlain} SASLPlain SASL PLAIN authentication
#. * @property {SASLSHA1} SASLSHA1 SASL SCRAM-SHA-1 authentication
#. * @property {SASLSHA256} SASLSHA256 SASL SCRAM-SHA-256 authentication
#. * @property {SASLSHA384} SASLSHA384 SASL SCRAM-SHA-384 authentication
#. * @property {SASLSHA512} SASLSHA512 SASL SCRAM-SHA-512 authentication
#. * @property {SASLOAuthBearer} SASLOAuthBearer SASL OAuth Bearer authentication
#. * @property {SASLExternal} SASLExternal SASL EXTERNAL authentication
#. * @property {SASLXOAuth2} SASLXOAuth2 SASL X-OAuth2 authentication
#. * @property {Status} Status
#. * @property {Object.<string, string>} NS
#. * @property {XHTML} XHTML
#.
#. * @constant: VERSION
#. *
#. * @returns {number}
#.
#. *
#. * @param {number} n
#.
#. *
#. * @returns {number}
#.
#. *
#. * @param {number} n
#.
#. Transports
#. Available authentication mechanisms
#. * @type {Object.<string, string>}
#. * @type {Status}
#. *
#. * Render a DOM element and all descendants to a String.
#. * @method Strophe.serialize
#. * @param {Element|Builder} elem - A DOM element.
#. * @return {string} - The serialized element tree as a String.
#.
#. *
#. * @typedef {import('./constants').LogLevel} LogLevel
#. *
#. * Library consumers can use this function to set the log level of Strophe.
#. * The default log level is Strophe.LogLevel.INFO.
#. * @param {LogLevel} level
#. * @example Strophe.setLogLevel(Strophe.LogLevel.DEBUG);
#.
#. *
#. * This function is used to extend the current namespaces in
#. * Strophe.NS. It takes a key and a value with the key being the
#. * name of the new namespace, with its actual value.
#. * @example: Strophe.addNamespace('PUBSUB', "http://jabber.org/protocol/pubsub");
#. *
#. * @param {string} name - The name under which the namespace will be
#. *     referenced under Strophe.NS
#. * @param {string} value - The actual namespace.
#.
#. *
#. * Extends the Strophe.Connection object with the given plugin.
#. * @param {string} name - The name of the extension.
#. * @param {Object} ptype - The plugin's prototype.
#.
#. CONCATENATED MODULE: ./src/headless/shared/constants.js
#. We don't differentiate between "chat" and "online"
#. Generated from css/images/user.svg
#. XEP-0085 Chat states
#. https =//xmpp.org/extensions/xep-0085.html
#. Chat types
#. Add Strophe Namespaces
#. Core plugins are whitelisted automatically
#. These are just the @converse/headless plugins, for the full converse,
#. the other plugins are whitelisted in src/consts.js
#. EXTERNAL MODULE: ./node_modules/dompurify/dist/purify.js
#. #__PURE__
#. CONCATENATED MODULE: ./src/headless/utils/html.js
#. *
#. * @param { any } el
#. * @returns { boolean }
#.
#. *
#. * @param { Element | typeof Strophe.Builder } stanza
#. * @param { string } name
#. * @returns { boolean }
#.
#. *
#. * Converts an HTML string into a DOM element.
#. * Expects that the HTML string has only one top-level element,
#. * i.e. not multiple ones.
#. * @method u#stringToElement
#. * @param {string} s - The HTML string
#.
#. *
#. * Returns a list of children of the DOM element that match the selector.
#. * @method u#queryChildren
#. * @param {HTMLElement} el - the DOM element
#. * @param {string} selector - the selector they should be matched against
#.
#. *
#. * @param {Element} el - the DOM element
#. * @return {number}
#.
#. eslint-disable no-cond-assign
#. *
#. * @param {string} str
#. * @return {string}
#.
#. CONCATENATED MODULE: ./src/headless/log.js
#. eslint-disable @typescript-eslint/no-empty-function
#. eslint-enable @typescript-eslint/no-empty-function
#. *
#. * The log namespace
#. * @namespace log
#.
#. harmony default export
#. *
#. * The the log-level, which determines how verbose the logging is.
#. * @method log#setLogLevel
#. * @param {keyof LEVELS} level - The loglevel which allows for filtering of log messages
#.
#. *
#. * Logs messages to the browser's developer console.
#. * Available loglevels are 0 for 'debug', 1 for 'info', 2 for 'warn',
#. * 3 for 'error' and 4 for 'fatal'.
#. * When using the 'error' or 'warn' loglevels, a full stacktrace will be
#. * logged as well.
#. * @method log#log
#. * @param {string|Element|Error} message - The message to be logged
#. * @param {string} level - The loglevel which allows for filtering of log messages
#.
#. * @type {Element}
#. EXTERNAL MODULE: ./node_modules/sprintf-js/src/sprintf.js
#. CONCATENATED MODULE: ./src/headless/shared/i18n.js
#. *
#. * @namespace i18n
#.
#. eslint-disable-next-line @typescript-eslint/no-empty-function
#. #__PURE__
#. *
#. * Overridable string wrapper method which can be used to provide i18n
#. * support.
#. *
#. * The default implementation in @converse/headless simply calls sprintf
#. * with the passed in arguments.
#. *
#. * If you install the full version of Converse, then this method gets
#. * overwritten in src/i18n/index.js to return a translated string.
#. * @method __
#. * @private
#. * @memberOf i18n
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/pluggable.js/src/pluggable.js
#.
#. ____  __                        __    __         _
#. / __ \/ /_  __ ___   ___  ____ _/ /_  / /__      (_)____
#. / /_/ / / / / / __ \/ __ \/ __/ / __ \/ / _ \    / / ___/
#. / ____/ / /_/ / /_/ / /_/ / /_/ / /_/ / /  __/   / (__  )
#. /_/   /_/\__,_/\__, /\__, /\__/_/_.___/_/\___(_)_/ /____/
#. /____//____/                    /___/
#.
#. Pluggable.js lets you to make your Javascript code pluggable while still
#. keeping sensitive objects and data private through closures.
#. `wrappedOverride` creates a partially applied wrapper function
#. that makes sure to set the proper super method when the
#. overriding method is called. This is done to enable
#. chaining of plugin methods, all the way up to the
#. original method.
#. We're not on the context of the plugged object.
#. * This can happen when the overridden method is called via
#. * an event handler or when it's a constructor.
#. *
#. * In this case, we simply tack on the  __super__ obj.
#.
#. The `PluginSocket` class contains the plugin architecture, and gets
#. created whenever `pluggable.enable(obj);` is called on the object
#. that you want to make pluggable.
#. You can also see it as the thing into which the plugins are plugged.
#. It takes two parameters, first, the object being made pluggable, and
#. then the name by which the pluggable object may be referenced on the
#. __super__ object (inside overrides).
#. #__PURE__
#. `_overrideAttribute` overrides an attribute on the original object
#. (the thing being plugged into).
#.
#. If the attribute being overridden is a function, then the original
#. function will still be available via the `__super__` attribute.
#.
#. If the same function is being overridden multiple times, then
#. the original function will be available at the end of a chain of
#. functions, starting from the most recent override, all the way
#. back to the original function, each being referenced by the
#. previous' __super__ attribute.
#.
#. For example:
#.
#. `plugin2.MyFunc.__super__.myFunc => plugin1.MyFunc.__super__.myFunc => original.myFunc`
#. We create a partially applied wrapper function, that
#. makes sure to set the proper super method when the
#. overriding method is called. This is done to enable
#. chaining of plugin methods, all the way up to the
#. original method.
#. Plugins can specify dependencies (by means of the
#. `dependencies` list attribute) which refers to dependencies
#. which will be initialized first, before the plugin itself gets initialized.
#.
#. If `strict_plugin_dependencies` is set to `false` (on the object being
#. made pluggable), then no error will be thrown if any of these plugins aren't
#. available.
#. FIXME: circular dependency checking is only one level deep.
#. `applyOverrides` is called by initializePlugin. It applies any
#. and all overrides of methods or Backbone views and models that
#. are defined on any of the plugins.
#. `initializePlugin` applies the overrides (if any) defined on all
#. the registered plugins and then calls the initialize method of the plugin
#. Don't initialize disallowed plugins.
#. Don't initialize plugins twice, otherwise we get
#. * infinite recursion in overridden methods.
#.
#. isNil
#. `registerPlugin` registers (or inserts, if you'd like) a plugin,
#. by adding it to the `plugins` map on the PluginSocket instance.
#. `initializePlugins` should get called once all plugins have been
#. registered. It will then iterate through all the plugins, calling
#. `initializePlugin` for each.
#. The passed in  properties variable is an object with attributes and methods
#. which will be attached to the plugins.
#. Call the `enable` method to make an object pluggable
#.
#. It takes three parameters:
#. - `object`: The object that gets made pluggable.
#. - `name`: The string name by which the now pluggable object
#. may be referenced on the __super__ obj (in overrides).
#. The default value is "plugged".
#. - `attrname`: The string name of the attribute on the now
#. pluggable object, which refers to the PluginSocket instance
#. that gets created.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_freeGlobal.js
#. * Detect free variable `global` from Node.js.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_root.js
#. * Detect free variable `self`.
#. * Used as a reference to the global object.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_Symbol.js
#. * Built-in value references.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_arrayMap.js
#. *
#. * A specialized version of `_.map` for arrays without support for iteratee
#. * shorthands.
#. *
#. * @private
#. * @param {Array} [array] The array to iterate over.
#. * @param {Function} iteratee The function invoked per iteration.
#. * @returns {Array} Returns the new mapped array.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/isArray.js
#. *
#. * Checks if `value` is classified as an `Array` object.
#. *
#. * @static
#. * @memberOf _
#. * @since 0.1.0
#. * @category Lang
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is an array, else `false`.
#. * @example
#. *
#. * _.isArray([1, 2, 3]);
#. * // => true
#. *
#. * _.isArray(document.body.children);
#. * // => false
#. *
#. * _.isArray('abc');
#. * // => false
#. *
#. * _.isArray(_.noop);
#. * // => false
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_getRawTag.js
#. * Used for built-in method references.
#. * Used to check objects for own properties.
#. *
#. * Used to resolve the
#. * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
#. * of values.
#.
#. * Built-in value references.
#. *
#. * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
#. *
#. * @private
#. * @param {*} value The value to query.
#. * @returns {string} Returns the raw `toStringTag`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_objectToString.js
#. * Used for built-in method references.
#. *
#. * Used to resolve the
#. * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
#. * of values.
#.
#. *
#. * Converts `value` to a string using `Object.prototype.toString`.
#. *
#. * @private
#. * @param {*} value The value to convert.
#. * @returns {string} Returns the converted string.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseGetTag.js
#. * `Object#toString` result references.
#. * Built-in value references.
#. *
#. * The base implementation of `getTag` without fallbacks for buggy environments.
#. *
#. * @private
#. * @param {*} value The value to query.
#. * @returns {string} Returns the `toStringTag`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/isObjectLike.js
#. *
#. * Checks if `value` is object-like. A value is object-like if it's not `null`
#. * and has a `typeof` result of "object".
#. *
#. * @static
#. * @memberOf _
#. * @since 4.0.0
#. * @category Lang
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
#. * @example
#. *
#. * _.isObjectLike({});
#. * // => true
#. *
#. * _.isObjectLike([1, 2, 3]);
#. * // => true
#. *
#. * _.isObjectLike(_.noop);
#. * // => false
#. *
#. * _.isObjectLike(null);
#. * // => false
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/isSymbol.js
#. * `Object#toString` result references.
#. *
#. * Checks if `value` is classified as a `Symbol` primitive or object.
#. *
#. * @static
#. * @memberOf _
#. * @since 4.0.0
#. * @category Lang
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
#. * @example
#. *
#. * _.isSymbol(Symbol.iterator);
#. * // => true
#. *
#. * _.isSymbol('abc');
#. * // => false
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseToString.js
#. * Used as references for various `Number` constants.
#. * Used to convert symbols to primitives and strings.
#. *
#. * The base implementation of `_.toString` which doesn't convert nullish
#. * values to empty strings.
#. *
#. * @private
#. * @param {*} value The value to process.
#. * @returns {string} Returns the string.
#.
#. Exit early for strings to avoid a performance hit in some environments.
#. Recursively convert values (susceptible to call stack limits).
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/toString.js
#. *
#. * Converts `value` to a string. An empty string is returned for `null`
#. * and `undefined` values. The sign of `-0` is preserved.
#. *
#. * @static
#. * @memberOf _
#. * @since 4.0.0
#. * @category Lang
#. * @param {*} value The value to convert.
#. * @returns {string} Returns the converted string.
#. * @example
#. *
#. * _.toString(null);
#. * // => ''
#. *
#. * _.toString(-0);
#. * // => '-0'
#. *
#. * _.toString([1, 2, 3]);
#. * // => '1,2,3'
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/uniqueId.js
#. * Used to generate unique IDs.
#. *
#. * Generates a unique ID. If `prefix` is given, the ID is appended to it.
#. *
#. * @static
#. * @since 0.1.0
#. * @memberOf _
#. * @category Util
#. * @param {string} [prefix=''] The value to prefix the ID with.
#. * @returns {string} Returns the unique ID.
#. * @example
#. *
#. * _.uniqueId('contact_');
#. * // => 'contact_104'
#. *
#. * _.uniqueId();
#. * // => '105'
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lit-html/lit-html.js
#. *
#. * @license
#. * Copyright 2017 Google LLC
#. * SPDX-License-Identifier: BSD-3-Clause
#.
#. #__PURE__
#. #__PURE__
#. #__PURE__
#. #__PURE__
#. #__PURE__
#. #__PURE__
#. #__PURE__
#. #__PURE__
#. CONCATENATED MODULE: ./node_modules/lodash-es/_trimmedEndIndex.js
#. * Used to match a single whitespace character.
#. *
#. * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
#. * character of `string`.
#. *
#. * @private
#. * @param {string} string The string to inspect.
#. * @returns {number} Returns the index of the last non-whitespace character.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseTrim.js
#. * Used to match leading whitespace.
#. *
#. * The base implementation of `_.trim`.
#. *
#. * @private
#. * @param {string} string The string to trim.
#. * @returns {string} Returns the trimmed string.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/isObject.js
#. *
#. * Checks if `value` is the
#. * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
#. * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
#. *
#. * @static
#. * @memberOf _
#. * @since 0.1.0
#. * @category Lang
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is an object, else `false`.
#. * @example
#. *
#. * _.isObject({});
#. * // => true
#. *
#. * _.isObject([1, 2, 3]);
#. * // => true
#. *
#. * _.isObject(_.noop);
#. * // => true
#. *
#. * _.isObject(null);
#. * // => false
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/toNumber.js
#. * Used as references for various `Number` constants.
#. * Used to detect bad signed hexadecimal string values.
#. * Used to detect binary string values.
#. * Used to detect octal string values.
#. * Built-in method references without a dependency on `root`.
#. *
#. * Converts `value` to a number.
#. *
#. * @static
#. * @memberOf _
#. * @since 4.0.0
#. * @category Lang
#. * @param {*} value The value to process.
#. * @returns {number} Returns the number.
#. * @example
#. *
#. * _.toNumber(3.2);
#. * // => 3.2
#. *
#. * _.toNumber(Number.MIN_VALUE);
#. * // => 5e-324
#. *
#. * _.toNumber(Infinity);
#. * // => Infinity
#. *
#. * _.toNumber('3.2');
#. * // => 3.2
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/toFinite.js
#. * Used as references for various `Number` constants.
#. *
#. * Converts `value` to a finite number.
#. *
#. * @static
#. * @memberOf _
#. * @since 4.12.0
#. * @category Lang
#. * @param {*} value The value to convert.
#. * @returns {number} Returns the converted number.
#. * @example
#. *
#. * _.toFinite(3.2);
#. * // => 3.2
#. *
#. * _.toFinite(Number.MIN_VALUE);
#. * // => 5e-324
#. *
#. * _.toFinite(Infinity);
#. * // => 1.7976931348623157e+308
#. *
#. * _.toFinite('3.2');
#. * // => 3.2
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/toInteger.js
#. *
#. * Converts `value` to an integer.
#. *
#. * **Note:** This method is loosely based on
#. * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
#. *
#. * @static
#. * @memberOf _
#. * @since 4.0.0
#. * @category Lang
#. * @param {*} value The value to convert.
#. * @returns {number} Returns the converted integer.
#. * @example
#. *
#. * _.toInteger(3.2);
#. * // => 3
#. *
#. * _.toInteger(Number.MIN_VALUE);
#. * // => 0
#. *
#. * _.toInteger(Infinity);
#. * // => 1.7976931348623157e+308
#. *
#. * _.toInteger('3.2');
#. * // => 3
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/before.js
#. * Error message constants.
#. *
#. * Creates a function that invokes `func`, with the `this` binding and arguments
#. * of the created function, while it's called less than `n` times. Subsequent
#. * calls to the created function return the result of the last `func` invocation.
#. *
#. * @static
#. * @memberOf _
#. * @since 3.0.0
#. * @category Function
#. * @param {number} n The number of calls at which `func` is no longer invoked.
#. * @param {Function} func The function to restrict.
#. * @returns {Function} Returns the new restricted function.
#. * @example
#. *
#. * jQuery(element).on('click', _.before(5, addContactToList));
#. * // => Allows adding up to 4 contacts to the list.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/once.js
#. *
#. * Creates a function that is restricted to invoking `func` once. Repeat calls
#. * to the function return the value of the first invocation. The `func` is
#. * invoked with the `this` binding and arguments of the created function.
#. *
#. * @static
#. * @memberOf _
#. * @since 0.1.0
#. * @category Function
#. * @param {Function} func The function to restrict.
#. * @returns {Function} Returns the new restricted function.
#. * @example
#. *
#. * var initialize = _.once(createApplication);
#. * initialize();
#. * initialize();
#. * // => `createApplication` is invoked once
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseTimes.js
#. *
#. * The base implementation of `_.times` without support for iteratee shorthands
#. * or max array length checks.
#. *
#. * @private
#. * @param {number} n The number of times to invoke `iteratee`.
#. * @param {Function} iteratee The function invoked per iteration.
#. * @returns {Array} Returns the array of results.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsArguments.js
#. * `Object#toString` result references.
#. *
#. * The base implementation of `_.isArguments`.
#. *
#. * @private
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is an `arguments` object,
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/isArguments.js
#. * Used for built-in method references.
#. * Used to check objects for own properties.
#. * Built-in value references.
#. *
#. * Checks if `value` is likely an `arguments` object.
#. *
#. * @static
#. * @memberOf _
#. * @since 0.1.0
#. * @category Lang
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is an `arguments` object,
#. *  else `false`.
#. * @example
#. *
#. * _.isArguments(function() { return arguments; }());
#. * // => true
#. *
#. * _.isArguments([1, 2, 3]);
#. * // => false
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/stubFalse.js
#. *
#. * This method returns `false`.
#. *
#. * @static
#. * @memberOf _
#. * @since 4.13.0
#. * @category Util
#. * @returns {boolean} Returns `false`.
#. * @example
#. *
#. * _.times(2, _.stubFalse);
#. * // => [false, false]
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/isBuffer.js
#. * Detect free variable `exports`.
#. * Detect free variable `module`.
#. * Detect the popular CommonJS extension `module.exports`.
#. * Built-in value references.
#. Built-in method references for those with the same name as other `lodash` methods.
#. *
#. * Checks if `value` is a buffer.
#. *
#. * @static
#. * @memberOf _
#. * @since 4.3.0
#. * @category Lang
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
#. * @example
#. *
#. * _.isBuffer(new Buffer(2));
#. * // => true
#. *
#. * _.isBuffer(new Uint8Array(2));
#. * // => false
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_isIndex.js
#. * Used as references for various `Number` constants.
#. * Used to detect unsigned integer values.
#. *
#. * Checks if `value` is a valid array-like index.
#. *
#. * @private
#. * @param {*} value The value to check.
#. * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
#. * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/isLength.js
#. * Used as references for various `Number` constants.
#. *
#. * Checks if `value` is a valid array-like length.
#. *
#. * **Note:** This method is loosely based on
#. * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
#. *
#. * @static
#. * @memberOf _
#. * @since 4.0.0
#. * @category Lang
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
#. * @example
#. *
#. * _.isLength(3);
#. * // => true
#. *
#. * _.isLength(Number.MIN_VALUE);
#. * // => false
#. *
#. * _.isLength(Infinity);
#. * // => false
#. *
#. * _.isLength('3');
#. * // => false
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsTypedArray.js
#. * `Object#toString` result references.
#. * Used to identify `toStringTag` values of typed arrays.
#. *
#. * The base implementation of `_.isTypedArray` without Node.js optimizations.
#. *
#. * @private
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseUnary.js
#. *
#. * The base implementation of `_.unary` without support for storing metadata.
#. *
#. * @private
#. * @param {Function} func The function to cap arguments for.
#. * @returns {Function} Returns the new capped function.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_nodeUtil.js
#. * Detect free variable `exports`.
#. * Detect free variable `module`.
#. * Detect the popular CommonJS extension `module.exports`.
#. * Detect free variable `process` from Node.js.
#. * Used to access faster Node.js helpers.
#. Use `util.types` for Node.js 10+.
#. Legacy `process.binding('util')` for Node.js < 10.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/isTypedArray.js
#. Node.js helper references.
#. *
#. * Checks if `value` is classified as a typed array.
#. *
#. * @static
#. * @memberOf _
#. * @since 3.0.0
#. * @category Lang
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
#. * @example
#. *
#. * _.isTypedArray(new Uint8Array);
#. * // => true
#. *
#. * _.isTypedArray([]);
#. * // => false
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_arrayLikeKeys.js
#. * Used for built-in method references.
#. * Used to check objects for own properties.
#. *
#. * Creates an array of the enumerable property names of the array-like `value`.
#. *
#. * @private
#. * @param {*} value The value to query.
#. * @param {boolean} inherited Specify returning inherited property names.
#. * @returns {Array} Returns the array of property names.
#.
#. Safari 9 has enumerable `arguments.length` in strict mode.
#. Node.js 0.10 has enumerable non-index properties on buffers.
#. PhantomJS 2 has enumerable non-index properties on typed arrays.
#. Skip index properties.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_isPrototype.js
#. * Used for built-in method references.
#. *
#. * Checks if `value` is likely a prototype object.
#. *
#. * @private
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_overArg.js
#. *
#. * Creates a unary function that invokes `func` with its argument transformed.
#. *
#. * @private
#. * @param {Function} func The function to wrap.
#. * @param {Function} transform The argument transform.
#. * @returns {Function} Returns the new function.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_nativeKeys.js
#. Built-in method references for those with the same name as other `lodash` methods.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseKeys.js
#. * Used for built-in method references.
#. * Used to check objects for own properties.
#. *
#. * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
#. *
#. * @private
#. * @param {Object} object The object to query.
#. * @returns {Array} Returns the array of property names.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/isFunction.js
#. * `Object#toString` result references.
#. *
#. * Checks if `value` is classified as a `Function` object.
#. *
#. * @static
#. * @memberOf _
#. * @since 0.1.0
#. * @category Lang
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is a function, else `false`.
#. * @example
#. *
#. * _.isFunction(_);
#. * // => true
#. *
#. * _.isFunction(/abc/);
#. * // => false
#.
#. The use of `Object#toString` avoids issues with the `typeof` operator
#. in Safari 9 which returns 'object' for typed arrays and other constructors.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/isArrayLike.js
#. *
#. * Checks if `value` is array-like. A value is considered array-like if it's
#. * not a function and has a `value.length` that's an integer greater than or
#. * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
#. *
#. * @static
#. * @memberOf _
#. * @since 4.0.0
#. * @category Lang
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
#. * @example
#. *
#. * _.isArrayLike([1, 2, 3]);
#. * // => true
#. *
#. * _.isArrayLike(document.body.children);
#. * // => true
#. *
#. * _.isArrayLike('abc');
#. * // => true
#. *
#. * _.isArrayLike(_.noop);
#. * // => false
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/keys.js
#. *
#. * Creates an array of the own enumerable property names of `object`.
#. *
#. * **Note:** Non-object values are coerced to objects. See the
#. * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
#. * for more details.
#. *
#. * @static
#. * @since 0.1.0
#. * @memberOf _
#. * @category Object
#. * @param {Object} object The object to query.
#. * @returns {Array} Returns the array of property names.
#. * @example
#. *
#. * function Foo() {
#. *   this.a = 1;
#. *   this.b = 2;
#. * }
#. *
#. * Foo.prototype.c = 3;
#. *
#. * _.keys(new Foo);
#. * // => ['a', 'b'] (iteration order is not guaranteed)
#. *
#. * _.keys('hi');
#. * // => ['0', '1']
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/@converse/skeletor/src/utils/events.js
#. Regular expression used to split event strings.
#. *
#. * Iterates over the standard `event, callback` (as well as the fancy multiple
#. * space-separated events `"change blur", callback` and jQuery-style event
#. * maps `{event: callback}`).
#.
#. Handle event maps.
#. Handle space-separated event names by delegating them individually.
#. Finally, standard events.
#. The reducing API that adds a callback to the `events` object.
#. *
#. * An try-catch guarded #on function, to prevent poisoning the global
#. * `_listening` variable.
#. * @param {any} obj
#. * @param {string} name
#. * @param {Function} callback
#. * @param {any} context
#.
#. *
#. * The reducing API that removes a callback from the `events` object.
#.
#. Delete all event listeners and "drop" events.
#. Bail out if there are no events stored.
#. Find any remaining events.
#. Replace events if there are any remaining.  Otherwise, clean up.
#. *
#. * Reduces the event callbacks into a map of `{event: onceWrapper}`.
#. * `offer` unbinds the `onceWrapper` after it has been called.
#.
#. * Handles triggering the appropriate event callbacks.
#. *
#. * A difficult-to-believe, but optimized internal dispatch function for
#. * triggering events. Tries to keep the usual cases speedy (most internal
#. * Backbone events have 3 arguments).
#.
#. CONCATENATED MODULE: ./node_modules/@converse/skeletor/src/listening.js
#. *
#. * A listening class that tracks and cleans up memory bindings
#. * when all callbacks have been offed.
#.
#. #__PURE__
#. * @typedef {import('./eventemitter.js').default} EventEmitter
#. *
#. * @param {any} listener
#. * @param {any} obj
#.
#. *
#. * @param {string} name
#. * @param {Function} callback
#. * @param {any} context
#. * @param {Listening} _listening
#.
#. Allow the listening to use a counter, instead of tracking
#. callbacks for library interop
#. *
#. * Stop's listening to a callback (or several).
#. * Uses an optimized counter if the listenee uses Backbone.Events.
#. * Otherwise, falls back to manual tracking to support events
#. * library interop.
#. * @param {string} name
#. * @param {Function} callback
#.
#. *
#. * Cleans up memory bindings between the listener and the listenee.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_coreJsData.js
#. * Used to detect overreaching core-js shims.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_isMasked.js
#. * Used to detect methods masquerading as native.
#. *
#. * Checks if `func` has its source masked.
#. *
#. * @private
#. * @param {Function} func The function to check.
#. * @returns {boolean} Returns `true` if `func` is masked, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_toSource.js
#. * Used for built-in method references.
#. * Used to resolve the decompiled source of functions.
#. *
#. * Converts `func` to its source code.
#. *
#. * @private
#. * @param {Function} func The function to convert.
#. * @returns {string} Returns the source code.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsNative.js
#. *
#. * Used to match `RegExp`
#. * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
#.
#. * Used to detect host constructors (Safari).
#. * Used for built-in method references.
#. * Used to resolve the decompiled source of functions.
#. * Used to check objects for own properties.
#. * Used to detect if a method is native.
#. *
#. * The base implementation of `_.isNative` without bad shim checks.
#. *
#. * @private
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is a native function,
#. *  else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_getValue.js
#. *
#. * Gets the value at `key` of `object`.
#. *
#. * @private
#. * @param {Object} [object] The object to query.
#. * @param {string} key The key of the property to get.
#. * @returns {*} Returns the property value.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_getNative.js
#. *
#. * Gets the native function at `key` of `object`.
#. *
#. * @private
#. * @param {Object} object The object to query.
#. * @param {string} key The key of the method to get.
#. * @returns {*} Returns the function if it's native, else `undefined`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_DataView.js
#. Built-in method references that are verified to be native.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_Map.js
#. Built-in method references that are verified to be native.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_Promise.js
#. Built-in method references that are verified to be native.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_Set.js
#. Built-in method references that are verified to be native.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_WeakMap.js
#. Built-in method references that are verified to be native.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_getTag.js
#. * `Object#toString` result references.
#. * Used to detect maps, sets, and weakmaps.
#. *
#. * Gets the `toStringTag` of `value`.
#. *
#. * @private
#. * @param {*} value The value to query.
#. * @returns {string} Returns the `toStringTag`.
#.
#. Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/isEmpty.js
#. * `Object#toString` result references.
#. * Used for built-in method references.
#. * Used to check objects for own properties.
#. *
#. * Checks if `value` is an empty object, collection, map, or set.
#. *
#. * Objects are considered empty if they have no own enumerable string keyed
#. * properties.
#. *
#. * Array-like values such as `arguments` objects, arrays, buffers, strings, or
#. * jQuery-like collections are considered empty if they have a `length` of `0`.
#. * Similarly, maps and sets are considered empty if they have a `size` of `0`.
#. *
#. * @static
#. * @memberOf _
#. * @since 0.1.0
#. * @category Lang
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is empty, else `false`.
#. * @example
#. *
#. * _.isEmpty(null);
#. * // => true
#. *
#. * _.isEmpty(true);
#. * // => true
#. *
#. * _.isEmpty(1);
#. * // => true
#. *
#. * _.isEmpty([1, 2, 3]);
#. * // => false
#. *
#. * _.isEmpty({ 'a': 1 });
#. * // => false
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/@converse/skeletor/src/eventemitter.js
#. *
#. * @copyright 2010-2019 Jeremy Ashkenas and DocumentCloud
#. * @copyright 2023 JC Brand
#.
#. A private global variable to share between listeners and listenees.
#. *
#. * @function
#. * @template {new(...args: any[]) => {}} ClassConstructor
#. * @param {ClassConstructor} Base
#.
#. #__PURE__
#. *
#. * @typedef {import('./model.js').Model} Model
#. * @typedef {import('./collection.js').Collection} Collection
#. * @typedef {Record.<string, any>} Options
#. *
#. * @callback EventCallback
#. * @param {any} event
#. * @param {Model} model
#. * @param {Collection} collection
#. * @param {Options} [options]
#.
#. *
#. * Bind an event to a `callback` function. Passing `"all"` will bind
#. * the callback to all events fired.
#. * @param {string} name
#. * @param {EventCallback} callback
#. * @param {any} context
#. * @return {EventEmitter}
#.
#. Allow the listening to use a counter, instead of tracking
#. callbacks for library interop
#. *
#. * Inversion-of-control versions of `on`. Tell *this* object to listen to
#. * an event in another object... keeping track of what it's listening to
#. * for easier unbinding later.
#. * @param {any} obj
#. * @param {string} name
#. * @param {EventCallback} [callback]
#. * @return {EventEmitter}
#.
#. This object is not listening to any other events on `obj` yet.
#. Setup the necessary references to track the listening callbacks.
#. Bind callbacks on obj.
#. If the target obj is not Backbone.Events, track events manually.
#. *
#. * Remove one or many callbacks. If `context` is null, removes all
#. * callbacks with that function. If `callback` is null, removes all
#. * callbacks for the event. If `name` is null, removes all bound
#. * callbacks for all events.
#. * @param {string} name
#. * @param {EventCallback} callback
#. * @param {any} [context]
#. * @return {EventEmitter}
#.
#. *
#. * Tell this object to stop listening to either specific events ... or
#. * to every object it's currently listening to.
#. * @param {any} [obj]
#. * @param {string} [name]
#. * @param {EventCallback} [callback]
#. * @return {EventEmitter}
#.
#. If listening doesn't exist, this object is not currently
#. listening to obj. Break out early.
#. *
#. * Bind an event to only be triggered a single time. After the first time
#. * the callback is invoked, its listener will be removed. If multiple events
#. * are passed in using the space-separated syntax, the handler will fire
#. * once for each event, not once for a combination of all events.
#. * @param {string} name
#. * @param {EventCallback} callback
#. * @param {any} context
#. * @return {EventEmitter}
#.
#. Map the event into a `{event: once}` object.
#. *
#. * Inversion-of-control versions of `once`.
#. * @param {any} obj
#. * @param {string} name
#. * @param {EventCallback} [callback]
#. * @return {EventEmitter}
#.
#. Map the event into a `{event: once}` object.
#. *
#. * Trigger one or many events, firing all bound callbacks. Callbacks are
#. * passed the same arguments as `trigger` is, apart from the event name
#. * (unless you're listening on `"all"`, which will cause your callback to
#. * receive the true name of the event as the first argument).
#. * @param {string} name
#. * @return {EventEmitter}
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/@converse/skeletor/src/element.js
#. *
#. * @typedef {import('lit-html').TemplateResult} TemplateResult
#.
#. Cached regex to split keys for `delegate`.
#. #__PURE__
#. *
#. * @param {Options} options
#.
#. Will be assigned to from Events
#. Creating a View creates its initial element outside of the DOM,
#. if an existing element is not provided...
#. *
#. * @typedef {import('./model.js').Model} Model
#. * @typedef {import('./collection.js').Collection} Collection
#. * @typedef {Record.<string, any>} Options
#. *
#. * @callback EventCallback
#. * @param {any} event
#. * @param {Model} model
#. * @param {Collection} collection
#. * @param {Options} [options]
#.
#. Render without the shadow DOM
#. *
#. * preinitialize is an empty function by default. You can override it with a function
#. * or object.  preinitialize will run before any instantiation logic is run in the View
#. * eslint-disable-next-line class-methods-use-this
#.
#. *
#. * Initialize is an empty function by default. Override it with your own
#. * initialization logic.
#.
#. *
#. * **render** is the core function that your view should override, in order
#. * to populate its element (`this.el`), with the appropriate HTML. The
#. * convention is for **render** to always return `this`.
#.
#. *
#. * @returns {string|TemplateResult}
#.
#. *
#. * Set callbacks, where `this.events` is a hash of
#. *
#. * *{"event selector": "callback"}*
#. *
#. *     {
#. *       'mousedown .title':  'edit',
#. *       'click .button':     'save',
#. *       'click .open':       function(e) { ... }
#. *     }
#. *
#. * pairs. Callbacks will be bound to the view, with `this` set properly.
#. * Uses event delegation for efficiency.
#. * Omitting the selector binds the event to `this.el`.
#.
#. *
#. * Make a event delegation handler for the given `eventName` and `selector`
#. * and attach it to `this.el`.
#. * If selector is empty, the listener will be bound to `this.el`. If not, a
#. * new handler that will recursively traverse up the event target's DOM
#. * hierarchy looking for a node that matches the selector. If one is found,
#. * the event's `delegateTarget` property is set to it and the return the
#. * result of calling bound `listener` with the parameters given to the
#. * handler.
#. * @param {string} eventName
#. * @param {string} selector
#. * @param {(ev: Event) => any} listener
#.
#. eslint-disable-next-line @typescript-eslint/no-this-alias
#. Given that `focus` and `blur` events do not bubble, do not delegate these events
#. *
#. * Clears all callbacks previously bound to the view by `delegateEvents`.
#. * You usually don't need to use this, but may wish to if you have multiple
#. * Backbone views attached to the same DOM element.
#.
#. *
#. * A finer-grained `undelegateEvents` for removing a single delegated event.
#. * `selector` and `listener` are both optional.
#. * @param {string} eventName
#. * @param {string} selector
#. * @param {(ev: Event) => any} listener
#.
#. harmony default export
#. EXTERNAL MODULE: ./node_modules/localforage-driver-memory/_bundle/umd.js
#. CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheClear.js
#. *
#. * Removes all key-value entries from the list cache.
#. *
#. * @private
#. * @name clear
#. * @memberOf ListCache
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/eq.js
#. *
#. * Performs a
#. * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
#. * comparison between two values to determine if they are equivalent.
#. *
#. * @static
#. * @memberOf _
#. * @since 4.0.0
#. * @category Lang
#. * @param {*} value The value to compare.
#. * @param {*} other The other value to compare.
#. * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
#. * @example
#. *
#. * var object = { 'a': 1 };
#. * var other = { 'a': 1 };
#. *
#. * _.eq(object, object);
#. * // => true
#. *
#. * _.eq(object, other);
#. * // => false
#. *
#. * _.eq('a', 'a');
#. * // => true
#. *
#. * _.eq('a', Object('a'));
#. * // => false
#. *
#. * _.eq(NaN, NaN);
#. * // => true
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_assocIndexOf.js
#. *
#. * Gets the index at which the `key` is found in `array` of key-value pairs.
#. *
#. * @private
#. * @param {Array} array The array to inspect.
#. * @param {*} key The key to search for.
#. * @returns {number} Returns the index of the matched value, else `-1`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheDelete.js
#. * Used for built-in method references.
#. * Built-in value references.
#. *
#. * Removes `key` and its value from the list cache.
#. *
#. * @private
#. * @name delete
#. * @memberOf ListCache
#. * @param {string} key The key of the value to remove.
#. * @returns {boolean} Returns `true` if the entry was removed, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheGet.js
#. *
#. * Gets the list cache value for `key`.
#. *
#. * @private
#. * @name get
#. * @memberOf ListCache
#. * @param {string} key The key of the value to get.
#. * @returns {*} Returns the entry value.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheHas.js
#. *
#. * Checks if a list cache value for `key` exists.
#. *
#. * @private
#. * @name has
#. * @memberOf ListCache
#. * @param {string} key The key of the entry to check.
#. * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheSet.js
#. *
#. * Sets the list cache `key` to `value`.
#. *
#. * @private
#. * @name set
#. * @memberOf ListCache
#. * @param {string} key The key of the value to set.
#. * @param {*} value The value to set.
#. * @returns {Object} Returns the list cache instance.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_ListCache.js
#. *
#. * Creates an list cache object.
#. *
#. * @private
#. * @constructor
#. * @param {Array} [entries] The key-value pairs to cache.
#.
#. Add methods to `ListCache`.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_stackClear.js
#. *
#. * Removes all key-value entries from the stack.
#. *
#. * @private
#. * @name clear
#. * @memberOf Stack
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_stackDelete.js
#. *
#. * Removes `key` and its value from the stack.
#. *
#. * @private
#. * @name delete
#. * @memberOf Stack
#. * @param {string} key The key of the value to remove.
#. * @returns {boolean} Returns `true` if the entry was removed, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_stackGet.js
#. *
#. * Gets the stack value for `key`.
#. *
#. * @private
#. * @name get
#. * @memberOf Stack
#. * @param {string} key The key of the value to get.
#. * @returns {*} Returns the entry value.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_stackHas.js
#. *
#. * Checks if a stack value for `key` exists.
#. *
#. * @private
#. * @name has
#. * @memberOf Stack
#. * @param {string} key The key of the entry to check.
#. * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_nativeCreate.js
#. Built-in method references that are verified to be native.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_hashClear.js
#. *
#. * Removes all key-value entries from the hash.
#. *
#. * @private
#. * @name clear
#. * @memberOf Hash
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_hashDelete.js
#. *
#. * Removes `key` and its value from the hash.
#. *
#. * @private
#. * @name delete
#. * @memberOf Hash
#. * @param {Object} hash The hash to modify.
#. * @param {string} key The key of the value to remove.
#. * @returns {boolean} Returns `true` if the entry was removed, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_hashGet.js
#. * Used to stand-in for `undefined` hash values.
#. * Used for built-in method references.
#. * Used to check objects for own properties.
#. *
#. * Gets the hash value for `key`.
#. *
#. * @private
#. * @name get
#. * @memberOf Hash
#. * @param {string} key The key of the value to get.
#. * @returns {*} Returns the entry value.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_hashHas.js
#. * Used for built-in method references.
#. * Used to check objects for own properties.
#. *
#. * Checks if a hash value for `key` exists.
#. *
#. * @private
#. * @name has
#. * @memberOf Hash
#. * @param {string} key The key of the entry to check.
#. * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_hashSet.js
#. * Used to stand-in for `undefined` hash values.
#. *
#. * Sets the hash `key` to `value`.
#. *
#. * @private
#. * @name set
#. * @memberOf Hash
#. * @param {string} key The key of the value to set.
#. * @param {*} value The value to set.
#. * @returns {Object} Returns the hash instance.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_Hash.js
#. *
#. * Creates a hash object.
#. *
#. * @private
#. * @constructor
#. * @param {Array} [entries] The key-value pairs to cache.
#.
#. Add methods to `Hash`.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheClear.js
#. *
#. * Removes all key-value entries from the map.
#. *
#. * @private
#. * @name clear
#. * @memberOf MapCache
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_isKeyable.js
#. *
#. * Checks if `value` is suitable for use as unique object key.
#. *
#. * @private
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_getMapData.js
#. *
#. * Gets the data for `map`.
#. *
#. * @private
#. * @param {Object} map The map to query.
#. * @param {string} key The reference key.
#. * @returns {*} Returns the map data.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheDelete.js
#. *
#. * Removes `key` and its value from the map.
#. *
#. * @private
#. * @name delete
#. * @memberOf MapCache
#. * @param {string} key The key of the value to remove.
#. * @returns {boolean} Returns `true` if the entry was removed, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheGet.js
#. *
#. * Gets the map value for `key`.
#. *
#. * @private
#. * @name get
#. * @memberOf MapCache
#. * @param {string} key The key of the value to get.
#. * @returns {*} Returns the entry value.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheHas.js
#. *
#. * Checks if a map value for `key` exists.
#. *
#. * @private
#. * @name has
#. * @memberOf MapCache
#. * @param {string} key The key of the entry to check.
#. * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheSet.js
#. *
#. * Sets the map `key` to `value`.
#. *
#. * @private
#. * @name set
#. * @memberOf MapCache
#. * @param {string} key The key of the value to set.
#. * @param {*} value The value to set.
#. * @returns {Object} Returns the map cache instance.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_MapCache.js
#. *
#. * Creates a map cache object to store key-value pairs.
#. *
#. * @private
#. * @constructor
#. * @param {Array} [entries] The key-value pairs to cache.
#.
#. Add methods to `MapCache`.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_stackSet.js
#. * Used as the size to enable large array optimizations.
#. *
#. * Sets the stack `key` to `value`.
#. *
#. * @private
#. * @name set
#. * @memberOf Stack
#. * @param {string} key The key of the value to set.
#. * @param {*} value The value to set.
#. * @returns {Object} Returns the stack cache instance.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_Stack.js
#. *
#. * Creates a stack cache object to store key-value pairs.
#. *
#. * @private
#. * @constructor
#. * @param {Array} [entries] The key-value pairs to cache.
#.
#. Add methods to `Stack`.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_arrayEach.js
#. *
#. * A specialized version of `_.forEach` for arrays without support for
#. * iteratee shorthands.
#. *
#. * @private
#. * @param {Array} [array] The array to iterate over.
#. * @param {Function} iteratee The function invoked per iteration.
#. * @returns {Array} Returns `array`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_defineProperty.js
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseAssignValue.js
#. *
#. * The base implementation of `assignValue` and `assignMergeValue` without
#. * value checks.
#. *
#. * @private
#. * @param {Object} object The object to modify.
#. * @param {string} key The key of the property to assign.
#. * @param {*} value The value to assign.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_assignValue.js
#. * Used for built-in method references.
#. * Used to check objects for own properties.
#. *
#. * Assigns `value` to `key` of `object` if the existing value is not equivalent
#. * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
#. * for equality comparisons.
#. *
#. * @private
#. * @param {Object} object The object to modify.
#. * @param {string} key The key of the property to assign.
#. * @param {*} value The value to assign.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_copyObject.js
#. *
#. * Copies properties of `source` to `object`.
#. *
#. * @private
#. * @param {Object} source The object to copy properties from.
#. * @param {Array} props The property identifiers to copy.
#. * @param {Object} [object={}] The object to copy properties to.
#. * @param {Function} [customizer] The function to customize copied values.
#. * @returns {Object} Returns `object`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseAssign.js
#. *
#. * The base implementation of `_.assign` without support for multiple sources
#. * or `customizer` functions.
#. *
#. * @private
#. * @param {Object} object The destination object.
#. * @param {Object} source The source object.
#. * @returns {Object} Returns `object`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_nativeKeysIn.js
#. *
#. * This function is like
#. * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
#. * except that it includes inherited enumerable properties.
#. *
#. * @private
#. * @param {Object} object The object to query.
#. * @returns {Array} Returns the array of property names.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseKeysIn.js
#. * Used for built-in method references.
#. * Used to check objects for own properties.
#. *
#. * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
#. *
#. * @private
#. * @param {Object} object The object to query.
#. * @returns {Array} Returns the array of property names.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/keysIn.js
#. *
#. * Creates an array of the own and inherited enumerable property names of `object`.
#. *
#. * **Note:** Non-object values are coerced to objects.
#. *
#. * @static
#. * @memberOf _
#. * @since 3.0.0
#. * @category Object
#. * @param {Object} object The object to query.
#. * @returns {Array} Returns the array of property names.
#. * @example
#. *
#. * function Foo() {
#. *   this.a = 1;
#. *   this.b = 2;
#. * }
#. *
#. * Foo.prototype.c = 3;
#. *
#. * _.keysIn(new Foo);
#. * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseAssignIn.js
#. *
#. * The base implementation of `_.assignIn` without support for multiple sources
#. * or `customizer` functions.
#. *
#. * @private
#. * @param {Object} object The destination object.
#. * @param {Object} source The source object.
#. * @returns {Object} Returns `object`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_cloneBuffer.js
#. * Detect free variable `exports`.
#. * Detect free variable `module`.
#. * Detect the popular CommonJS extension `module.exports`.
#. * Built-in value references.
#. *
#. * Creates a clone of  `buffer`.
#. *
#. * @private
#. * @param {Buffer} buffer The buffer to clone.
#. * @param {boolean} [isDeep] Specify a deep clone.
#. * @returns {Buffer} Returns the cloned buffer.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_copyArray.js
#. *
#. * Copies the values of `source` to `array`.
#. *
#. * @private
#. * @param {Array} source The array to copy values from.
#. * @param {Array} [array=[]] The array to copy values to.
#. * @returns {Array} Returns `array`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_arrayFilter.js
#. *
#. * A specialized version of `_.filter` for arrays without support for
#. * iteratee shorthands.
#. *
#. * @private
#. * @param {Array} [array] The array to iterate over.
#. * @param {Function} predicate The function invoked per iteration.
#. * @returns {Array} Returns the new filtered array.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/stubArray.js
#. *
#. * This method returns a new empty array.
#. *
#. * @static
#. * @memberOf _
#. * @since 4.13.0
#. * @category Util
#. * @returns {Array} Returns the new empty array.
#. * @example
#. *
#. * var arrays = _.times(2, _.stubArray);
#. *
#. * console.log(arrays);
#. * // => [[], []]
#. *
#. * console.log(arrays[0] === arrays[1]);
#. * // => false
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_getSymbols.js
#. * Used for built-in method references.
#. * Built-in value references.
#. Built-in method references for those with the same name as other `lodash` methods.
#. *
#. * Creates an array of the own enumerable symbols of `object`.
#. *
#. * @private
#. * @param {Object} object The object to query.
#. * @returns {Array} Returns the array of symbols.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_copySymbols.js
#. *
#. * Copies own symbols of `source` to `object`.
#. *
#. * @private
#. * @param {Object} source The object to copy symbols from.
#. * @param {Object} [object={}] The object to copy symbols to.
#. * @returns {Object} Returns `object`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_arrayPush.js
#. *
#. * Appends the elements of `values` to `array`.
#. *
#. * @private
#. * @param {Array} array The array to modify.
#. * @param {Array} values The values to append.
#. * @returns {Array} Returns `array`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_getPrototype.js
#. * Built-in value references.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_getSymbolsIn.js
#. Built-in method references for those with the same name as other `lodash` methods.
#. *
#. * Creates an array of the own and inherited enumerable symbols of `object`.
#. *
#. * @private
#. * @param {Object} object The object to query.
#. * @returns {Array} Returns the array of symbols.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_copySymbolsIn.js
#. *
#. * Copies own and inherited symbols of `source` to `object`.
#. *
#. * @private
#. * @param {Object} source The object to copy symbols from.
#. * @param {Object} [object={}] The object to copy symbols to.
#. * @returns {Object} Returns `object`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseGetAllKeys.js
#. *
#. * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
#. * `keysFunc` and `symbolsFunc` to get the enumerable property names and
#. * symbols of `object`.
#. *
#. * @private
#. * @param {Object} object The object to query.
#. * @param {Function} keysFunc The function to get the keys of `object`.
#. * @param {Function} symbolsFunc The function to get the symbols of `object`.
#. * @returns {Array} Returns the array of property names and symbols.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_getAllKeys.js
#. *
#. * Creates an array of own enumerable property names and symbols of `object`.
#. *
#. * @private
#. * @param {Object} object The object to query.
#. * @returns {Array} Returns the array of property names and symbols.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_getAllKeysIn.js
#. *
#. * Creates an array of own and inherited enumerable property names and
#. * symbols of `object`.
#. *
#. * @private
#. * @param {Object} object The object to query.
#. * @returns {Array} Returns the array of property names and symbols.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_initCloneArray.js
#. * Used for built-in method references.
#. * Used to check objects for own properties.
#. *
#. * Initializes an array clone.
#. *
#. * @private
#. * @param {Array} array The array to clone.
#. * @returns {Array} Returns the initialized clone.
#.
#. Add properties assigned by `RegExp#exec`.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_Uint8Array.js
#. * Built-in value references.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_cloneArrayBuffer.js
#. *
#. * Creates a clone of `arrayBuffer`.
#. *
#. * @private
#. * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
#. * @returns {ArrayBuffer} Returns the cloned array buffer.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_cloneDataView.js
#. *
#. * Creates a clone of `dataView`.
#. *
#. * @private
#. * @param {Object} dataView The data view to clone.
#. * @param {boolean} [isDeep] Specify a deep clone.
#. * @returns {Object} Returns the cloned data view.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_cloneRegExp.js
#. * Used to match `RegExp` flags from their coerced string values.
#. *
#. * Creates a clone of `regexp`.
#. *
#. * @private
#. * @param {Object} regexp The regexp to clone.
#. * @returns {Object} Returns the cloned regexp.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_cloneSymbol.js
#. * Used to convert symbols to primitives and strings.
#. *
#. * Creates a clone of the `symbol` object.
#. *
#. * @private
#. * @param {Object} symbol The symbol object to clone.
#. * @returns {Object} Returns the cloned symbol object.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_cloneTypedArray.js
#. *
#. * Creates a clone of `typedArray`.
#. *
#. * @private
#. * @param {Object} typedArray The typed array to clone.
#. * @param {boolean} [isDeep] Specify a deep clone.
#. * @returns {Object} Returns the cloned typed array.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_initCloneByTag.js
#. * `Object#toString` result references.
#. *
#. * Initializes an object clone based on its `toStringTag`.
#. *
#. * **Note:** This function only supports cloning values with tags of
#. * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
#. *
#. * @private
#. * @param {Object} object The object to clone.
#. * @param {string} tag The `toStringTag` of the object to clone.
#. * @param {boolean} [isDeep] Specify a deep clone.
#. * @returns {Object} Returns the initialized clone.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseCreate.js
#. * Built-in value references.
#. *
#. * The base implementation of `_.create` without support for assigning
#. * properties to the created object.
#. *
#. * @private
#. * @param {Object} proto The object to inherit from.
#. * @returns {Object} Returns the new object.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_initCloneObject.js
#. *
#. * Initializes an object clone.
#. *
#. * @private
#. * @param {Object} object The object to clone.
#. * @returns {Object} Returns the initialized clone.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsMap.js
#. * `Object#toString` result references.
#. *
#. * The base implementation of `_.isMap` without Node.js optimizations.
#. *
#. * @private
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is a map, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/isMap.js
#. Node.js helper references.
#. *
#. * Checks if `value` is classified as a `Map` object.
#. *
#. * @static
#. * @memberOf _
#. * @since 4.3.0
#. * @category Lang
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is a map, else `false`.
#. * @example
#. *
#. * _.isMap(new Map);
#. * // => true
#. *
#. * _.isMap(new WeakMap);
#. * // => false
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsSet.js
#. * `Object#toString` result references.
#. *
#. * The base implementation of `_.isSet` without Node.js optimizations.
#. *
#. * @private
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is a set, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/isSet.js
#. Node.js helper references.
#. *
#. * Checks if `value` is classified as a `Set` object.
#. *
#. * @static
#. * @memberOf _
#. * @since 4.3.0
#. * @category Lang
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is a set, else `false`.
#. * @example
#. *
#. * _.isSet(new Set);
#. * // => true
#. *
#. * _.isSet(new WeakSet);
#. * // => false
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseClone.js
#. * Used to compose bitmasks for cloning.
#. * `Object#toString` result references.
#. * Used to identify `toStringTag` values supported by `_.clone`.
#. *
#. * The base implementation of `_.clone` and `_.cloneDeep` which tracks
#. * traversed objects.
#. *
#. * @private
#. * @param {*} value The value to clone.
#. * @param {boolean} bitmask The bitmask flags.
#. *  1 - Deep clone
#. *  2 - Flatten inherited properties
#. *  4 - Clone symbols
#. * @param {Function} [customizer] The function to customize cloning.
#. * @param {string} [key] The key of `value`.
#. * @param {Object} [object] The parent object of `value`.
#. * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
#. * @returns {*} Returns the cloned value.
#.
#. Check for circular references and return its corresponding clone.
#. Recursively populate clone (susceptible to call stack limits).
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/cloneDeep.js
#. * Used to compose bitmasks for cloning.
#. *
#. * This method is like `_.clone` except that it recursively clones `value`.
#. *
#. * @static
#. * @memberOf _
#. * @since 1.0.0
#. * @category Lang
#. * @param {*} value The value to recursively clone.
#. * @returns {*} Returns the deep cloned value.
#. * @see _.clone
#. * @example
#. *
#. * var objects = [{ 'a': 1 }, { 'b': 2 }];
#. *
#. * var deep = _.cloneDeep(objects);
#. * console.log(deep[0] === objects[0]);
#. * // => false
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/isString.js
#. * `Object#toString` result references.
#. *
#. * Checks if `value` is classified as a `String` primitive or object.
#. *
#. * @static
#. * @since 0.1.0
#. * @memberOf _
#. * @category Lang
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is a string, else `false`.
#. * @example
#. *
#. * _.isString('abc');
#. * // => true
#. *
#. * _.isString(1);
#. * // => false
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/localforage/src/utils/idb.js
#. global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/localforage/src/utils/isIndexedDBValid.js
#. Initialize IndexedDB; fall back to vendor-prefixed versions
#. if needed.
#. We mimic PouchDB here;
#.
#. We test for openDatabase because IE Mobile identifies itself
#. as Safari. Oh the lulz...
#. Safari <10.1 does not meet our requirements for IDB support
#. (see: https://github.com/pouchdb/pouchdb/issues/5572).
#. Safari 10.1 shipped with fetch, we can use that to detect it.
#. Note: this creates issues with `window.fetch` polyfills and
#. overrides; see:
#. https://github.com/localForage/localForage/issues/856
#. some outdated implementations of IDB that appear on Samsung
#. and HTC Android devices <4.4 are missing IDBKeyRange
#. See: https://github.com/mozilla/localForage/issues/128
#. See: https://github.com/mozilla/localForage/issues/272
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/localforage/src/utils/createBlob.js
#. Abstracts constructing a Blob object, so it also works in older
#. browsers that don't support the native Blob constructor. (i.e.
#. old QtWebKit versions, at least).
#. Abstracts constructing a Blob object, so it also works in older
#. browsers that don't support the native Blob constructor. (i.e.
#. old QtWebKit versions, at least).
#. global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/localforage/src/utils/promise.js
#. This is CommonJS because lie is an external dependency, so Rollup
#. can just ignore it.
#. In the "nopromises" build this will just throw if you don't have
#. a global promise object, but it would throw anyway later.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/localforage/src/utils/executeCallback.js
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/localforage/src/utils/executeTwoCallbacks.js
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/localforage/src/utils/normalizeKey.js
#. Cast the key to a string, as that's all we can set as a key.
#. CONCATENATED MODULE: ./node_modules/localforage/src/utils/getCallback.js
#. CONCATENATED MODULE: ./node_modules/localforage/src/drivers/indexeddb.js
#. Some code originally from async_storage.js in
#. [Gaia](https://github.com/mozilla-b2g/gaia).
#. Transaction Modes
#. Transform a binary string to an array buffer, because otherwise
#. weird stuff happens when you try to work with the binary string directly.
#. It is known.
#. From http://stackoverflow.com/questions/14967647/ (continues on next line)
#. encode-decode-image-with-base64-breaks-image (2013-04-21)
#.
#. Blobs are not supported in all versions of IndexedDB, notably
#. Chrome <37 and Android <5. In those versions, storing a blob will throw.
#.
#. Various other blob bugs exist in Chrome v37-42 (inclusive).
#. Detecting them is expensive and confusing to users, and Chrome 37-42
#. is at very low usage worldwide, so we do a hacky userAgent check instead.
#.
#. content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120
#. 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
#. FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
#.
#. Code borrowed from PouchDB. See:
#. https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js
#.
#. If the transaction aborts now its due to not being able to
#. write to the database, likely due to the disk being full
#. MS Edge pretends to be Chrome 42:
#. https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx
#. error, so assume unsupported
#. Create a deferred object representing the current database operation.
#. Enqueue the deferred operation.
#. Chain its promise to the database readiness.
#. Dequeue a deferred operation.
#. Resolve its promise (which is part of the database readiness
#. chain of promises).
#. Dequeue a deferred operation.
#. Reject its promise (which is part of the database readiness
#. chain of promises).
#. Added when support for blob shims was added
#. Triggered when the database is modified (e.g. adding an objectStore) or
#. deleted (even when initiated by other sessions in different tabs).
#. Closing the connection here prevents those operations from being blocked.
#. If the database is accessed again later by this instance, the connection
#. will be reopened or the database recreated as needed.
#. If the version is not the default one
#. then warn for impossible downgrade.
#. Align the versions to prevent errors.
#. If the store is new then increment the version (if needed).
#. This will trigger an "upgradeneeded" event which is required
#. for creating a store.
#. encode a blob for indexeddb engines that don't support blobs
#. decode an encoded blob
#. is this one of our fancy encoded blobs?
#. Specialize the default `ready()` function by making it dependent
#. on the current database operations. Thus, the driver will be actually
#. ready when it's been initialized (default) *and* there are no pending
#. operations on the database (initiated by some other instances).
#. Try to establish a new db connection to replace the
#. current one which is broken (i.e. experiencing
#. InvalidStateError while creating a transaction).
#. Reopen the database for upgrading.
#. store the latest db reference
#. in case the db was upgraded
#. FF doesn't like Promises (micro-tasks) and IDDB store operations,
#. so we have to do it with callbacks
#. increase the db version, to create the new ObjectStore
#. Reopen the database for upgrading.
#. Running localForages sharing a database.
#. Shared database.
#. Database readiness (promise).
#. Deferred operations on the database.
#. Open the IndexedDB database (automatically creates one if one didn't
#. previously exist), using any options set in the config.
#. Get the current context of the database;
#. ...or create a new context.
#. Register the new context in the global container.
#. Register itself as a running localForage in the current context.
#. Replace the default `ready()` function with the specialized one.
#. Create an array of initialization states of the related localForages.
#. Don't handle errors here,
#. just makes sure related localForages aren't pending.
#. Don't wait for itself...
#. Take a snapshot of the related localForages.
#. Initialize the connection process only when
#. all the related localForages aren't pending.
#. Get the connection or open a new one without upgrade.
#. Reopen the database for upgrading.
#. Share the final connection amongst related localForages.
#. Self is already up-to-date.
#. Iterate over all items stored in database.
#. when the iterator callback returns any
#. (non-`undefined`) value, then we stop
#. the iteration immediately
#. The reason we don't _save_ null is because IE 10 does
#. not support saving the `null` type in IndexedDB. How
#. ironic, given the bug below!
#. See: https://github.com/mozilla/localForage/issues/161
#. Cast to undefined so the value passed to
#. callback/promise is the same as what one would get out
#. of `getItem()` later. This leads to some weirdness
#. (setItem('foo', undefined) will return `null`), but
#. it's not my fault localStorage is our baseline and that
#. it's weird.
#. We use a Grunt task to make this safe for IE and some
#. versions of Android (including those used by Cordova).
#. Normally IE won't like `.delete()` and will insist on
#. using `['delete']()`, but we have a build step that
#. fixes this for us now.
#. The request will be also be aborted if we've exceeded our storage
#. space.
#. this means there weren't enough keys
#. We have the first key, return it if that's what they
#. wanted.
#. Otherwise, ask the cursor to skip ahead n
#. records.
#. When we get here, we've got the nth key.
#. Closing all open connections in onversionchange handler should prevent this situation, but if
#. we do get here, it just means the request remains pending - eventually it will succeed or error
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/localforage/src/utils/isWebSQLValid.js
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/localforage/src/utils/serializer.js
#. eslint-disable no-bitwise
#. Sadly, the best way to save binary data in WebSQL/localStorage is serializing
#. it to Base64, so this is how we store it to prevent very strange errors with less
#. verbose ways of binary <-> string data storage.
#. OMG the serializations!
#. Fill the string into a ArrayBuffer.
#. jslint bitwise: true
#. Converts a buffer to a string to store, serialized, in the backend
#. storage library.
#. base64-arraybuffer
#. jslint bitwise: true
#. Serialize a value, afterwards executing a callback (which usually
#. instructs the `setItem()` callback/promise to be executed). This is how
#. we store binary data with localStorage.
#. Cannot use `value instanceof ArrayBuffer` or such here, as these
#. checks fail when running the tests using casper.js...
#.
#. TODO: See why those tests fail and use a better solution.
#. Convert binary arrays to a string and prefix the string with
#. a special marker.
#. Conver the blob to a binaryArray and then to a string.
#. Backwards-compatible prefix for the blob type.
#. Deserialize data we've inserted into a value column/field. We place
#. special markers into our strings to mark them as encoded; this isn't
#. as nice as a meta field, but it's the only sane thing we can do whilst
#. keeping localStorage support intact.
#.
#. Oftentimes this will just deserialize JSON content, but if we have a
#. special marker (SERIALIZED_MARKER, defined above), we will extract
#. some kind of arraybuffer/binary data/typed array out of the string.
#. If we haven't marked this string as being specially serialized (i.e.
#. something other than serialized JSON), we can just return it and be
#. done with it.
#. The following code deals with deserializing some kind of Blob or
#. TypedArray. First we separate out the type of data we're dealing
#. with from the data itself.
#. Backwards-compatible blob type serialization strategy.
#. DBs created with older versions of localForage will simply not have the blob type.
#. Return the right type based on the code/type set during
#. serialization.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/localforage/src/drivers/websql.js
#.
#. * Includes code from:
#. *
#. * base64-arraybuffer
#. * https://github.com/niklasvh/base64-arraybuffer
#. *
#. * Copyright (c) 2012 Niklas von Hertzen
#. * Licensed under the MIT license.
#.
#. Open the WebSQL database (automatically creates one if one didn't
#. previously exist), using any options set in the config.
#. Open the database; the openDatabase API will automatically
#. create it for us if it doesn't exist.
#. Create our key/value table if it doesn't exist.
#. if the table is missing (was deleted)
#. re-create it table and retry
#. Check to see if this is serialized content we need to
#. unpack.
#. Check to see if this is serialized content
#. we need to unpack.
#. void(0) prevents problems with redefinition
#. of `undefined`.
#. The localStorage API doesn't return undefined values in an
#. "expected" way, so undefined is always cast to null in all
#. drivers. See: https://github.com/mozilla/localForage/pull/42
#. Save the original value to pass to the callback.
#. The transaction failed; check
#. to see if it's a quota error.
#. We reject the callback outright for now, but
#. it's worth trying to re-run the transaction.
#. Even if the user accepts the prompt to use
#. more storage on Safari, this error will
#. be called.
#.
#. Try to re-run the transaction.
#. Deletes every item in the table.
#. TODO: Find out if this resets the AUTO_INCREMENT number.
#. Does a simple `COUNT(key)` to get the number of items stored in
#. localForage.
#. Ahhh, SQL makes this one soooooo easy.
#. Return the key located at key index X; essentially gets the key from a
#. `WHERE id = ?`. This is the most efficient way I can think to implement
#. this rarely-used (in my experience) part of the API, but it can seem
#. inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so
#. the ID of each key will change every time it's updated. Perhaps a stored
#. procedure for the `setItem()` SQL would solve this problem?
#. TODO: Don't change ID on `setItem()`.
#. https://www.w3.org/TR/webdatabase/#databases
#. > There is no way to enumerate or delete the databases available for an origin from this API.
#. use the db reference of the current instance
#. drop all database tables
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/localforage/src/utils/isLocalStorageValid.js
#. in IE8 typeof localStorage.setItem === 'object'
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/localforage/src/drivers/localstorage.js
#. If IndexedDB isn't available, we'll fall back to localStorage.
#. Note that this will have considerable performance and storage
#. side-effects (all data will be serialized on save and only data that
#. can be converted to a string via `JSON.stringify()` will be saved).
#. Check if localStorage throws when saving an item
#. Check if localStorage is usable and allows to save an item
#. This method checks if localStorage is usable in Safari Private Browsing
#. mode, or in any other case where the available quota for localStorage
#. is 0 and there wasn't any saved items yet.
#. Config the localStorage backend, using options set in the config.
#. Remove all keys from the datastore, effectively destroying all data in
#. the app's key/value store!
#. Retrieve an item from the store. Unlike the original async_storage
#. library in Gaia, we don't modify return values at all. If a key's value
#. is `undefined`, we pass that value to the callback function.
#. If a result was found, parse it from the serialized
#. string into a JS object. If result isn't truthy, the key
#. is likely undefined and we'll pass it straight to the
#. callback.
#. Iterate over all items in the store.
#. We use a dedicated iterator instead of the `i` variable below
#. so other keys we fetch in localStorage aren't counted in
#. the `iterationNumber` argument passed to the `iterate()`
#. callback.
#.
#. See: github.com/mozilla/localForage/pull/435#discussion_r38061530
#. If a result was found, parse it from the serialized
#. string into a JS object. If result isn't truthy, the
#. key is likely undefined and we'll pass it straight
#. to the iterator.
#. Same as localStorage's key() method, except takes a callback.
#. Remove the prefix from the key, if a key is found.
#. Supply the number of keys in the datastore to the callback function.
#. Remove an item from the store, nice and simple.
#. Set a key's value and run an optional callback once the value is set.
#. Unlike Gaia's implementation, the callback function is passed the value,
#. in case you want to operate on that value only after you're sure it
#. saved, or something like that.
#. Convert undefined values to null.
#. https://github.com/mozilla/localForage/pull/42
#. Save the original value to pass to the callback.
#. localStorage capacity exceeded.
#. TODO: Make this a specific error/event.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/localforage/src/utils/includes.js
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/localforage/src/utils/isArray.js
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/localforage/src/localforage.js
#. Drivers are stored here when `defineDriver()` is called.
#. They are shared across all instances of localForage.
#. Default DB size is _JUST UNDER_ 5MB, as it's the highest size
#. we can use without a prompt.
#. #__PURE__
#. we don't need to wait for the promise,
#. since the default drivers can be defined
#. in a blocking manner
#. Set any config values for localForage; can be called anytime before
#. the first API call (e.g. `getItem`, `setItem`).
#. We loop through options so we don't overwrite existing config
#. values.
#. If the options argument is an object, we use it to set values.
#. Otherwise, we return either a specified config value or all
#. config values.
#. If localforage is ready and fully initialized, we can't set
#. any new configuration values. Instead, we return an error.
#. after all config options are set and
#. the driver option is used, try setting it
#. Used to define a custom driver, shared across all instances of
#. localForage.
#. A driver name should be defined and not overlap with the
#. library-defined, default drivers.
#. when the property is there,
#. it should be a method even when optional
#. don't use a then, so that we can define
#. drivers that have simple _support methods
#. in a blocking manner
#. There might be a driver initialization in progress
#. so wait for it to finish in order to avoid a possible
#. race condition to set _dbInfo
#. Add a stub for each driver API method that delays the call to the
#. corresponding driver method until localForage is ready. These stubs
#. will be replaced by the driver methods as soon as the driver is
#. loaded, so there is no performance impact.
#. The actual localForage object that we expose as a module or via a
#. global. It's extended by pulling in one of our other libraries.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_assignMergeValue.js
#. *
#. * This function is like `assignValue` except that it doesn't assign
#. * `undefined` values.
#. *
#. * @private
#. * @param {Object} object The object to modify.
#. * @param {string} key The key of the property to assign.
#. * @param {*} value The value to assign.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_createBaseFor.js
#. *
#. * Creates a base function for methods like `_.forIn` and `_.forOwn`.
#. *
#. * @private
#. * @param {boolean} [fromRight] Specify iterating from right to left.
#. * @returns {Function} Returns the new base function.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseFor.js
#. *
#. * The base implementation of `baseForOwn` which iterates over `object`
#. * properties returned by `keysFunc` and invokes `iteratee` for each property.
#. * Iteratee functions may exit iteration early by explicitly returning `false`.
#. *
#. * @private
#. * @param {Object} object The object to iterate over.
#. * @param {Function} iteratee The function invoked per iteration.
#. * @param {Function} keysFunc The function to get the keys of `object`.
#. * @returns {Object} Returns `object`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/isArrayLikeObject.js
#. *
#. * This method is like `_.isArrayLike` except that it also checks if `value`
#. * is an object.
#. *
#. * @static
#. * @memberOf _
#. * @since 4.0.0
#. * @category Lang
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is an array-like object,
#. *  else `false`.
#. * @example
#. *
#. * _.isArrayLikeObject([1, 2, 3]);
#. * // => true
#. *
#. * _.isArrayLikeObject(document.body.children);
#. * // => true
#. *
#. * _.isArrayLikeObject('abc');
#. * // => false
#. *
#. * _.isArrayLikeObject(_.noop);
#. * // => false
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/isPlainObject.js
#. * `Object#toString` result references.
#. * Used for built-in method references.
#. * Used to resolve the decompiled source of functions.
#. * Used to check objects for own properties.
#. * Used to infer the `Object` constructor.
#. *
#. * Checks if `value` is a plain object, that is, an object created by the
#. * `Object` constructor or one with a `[[Prototype]]` of `null`.
#. *
#. * @static
#. * @memberOf _
#. * @since 0.8.0
#. * @category Lang
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
#. * @example
#. *
#. * function Foo() {
#. *   this.a = 1;
#. * }
#. *
#. * _.isPlainObject(new Foo);
#. * // => false
#. *
#. * _.isPlainObject([1, 2, 3]);
#. * // => false
#. *
#. * _.isPlainObject({ 'x': 0, 'y': 0 });
#. * // => true
#. *
#. * _.isPlainObject(Object.create(null));
#. * // => true
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_safeGet.js
#. *
#. * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
#. *
#. * @private
#. * @param {Object} object The object to query.
#. * @param {string} key The key of the property to get.
#. * @returns {*} Returns the property value.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/toPlainObject.js
#. *
#. * Converts `value` to a plain object flattening inherited enumerable string
#. * keyed properties of `value` to own properties of the plain object.
#. *
#. * @static
#. * @memberOf _
#. * @since 3.0.0
#. * @category Lang
#. * @param {*} value The value to convert.
#. * @returns {Object} Returns the converted plain object.
#. * @example
#. *
#. * function Foo() {
#. *   this.b = 2;
#. * }
#. *
#. * Foo.prototype.c = 3;
#. *
#. * _.assign({ 'a': 1 }, new Foo);
#. * // => { 'a': 1, 'b': 2 }
#. *
#. * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
#. * // => { 'a': 1, 'b': 2, 'c': 3 }
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseMergeDeep.js
#. *
#. * A specialized version of `baseMerge` for arrays and objects which performs
#. * deep merges and tracks traversed objects enabling objects with circular
#. * references to be merged.
#. *
#. * @private
#. * @param {Object} object The destination object.
#. * @param {Object} source The source object.
#. * @param {string} key The key of the value to merge.
#. * @param {number} srcIndex The index of `source`.
#. * @param {Function} mergeFunc The function to merge values.
#. * @param {Function} [customizer] The function to customize assigned values.
#. * @param {Object} [stack] Tracks traversed source values and their merged
#. *  counterparts.
#.
#. Recursively merge objects and arrays (susceptible to call stack limits).
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseMerge.js
#. *
#. * The base implementation of `_.merge` without support for multiple sources.
#. *
#. * @private
#. * @param {Object} object The destination object.
#. * @param {Object} source The source object.
#. * @param {number} srcIndex The index of `source`.
#. * @param {Function} [customizer] The function to customize merged values.
#. * @param {Object} [stack] Tracks traversed source values and their merged
#. *  counterparts.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/identity.js
#. *
#. * This method returns the first argument it receives.
#. *
#. * @static
#. * @since 0.1.0
#. * @memberOf _
#. * @category Util
#. * @param {*} value Any value.
#. * @returns {*} Returns `value`.
#. * @example
#. *
#. * var object = { 'a': 1 };
#. *
#. * console.log(_.identity(object) === object);
#. * // => true
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_apply.js
#. *
#. * A faster alternative to `Function#apply`, this function invokes `func`
#. * with the `this` binding of `thisArg` and the arguments of `args`.
#. *
#. * @private
#. * @param {Function} func The function to invoke.
#. * @param {*} thisArg The `this` binding of `func`.
#. * @param {Array} args The arguments to invoke `func` with.
#. * @returns {*} Returns the result of `func`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_overRest.js
#. Built-in method references for those with the same name as other `lodash` methods.
#. *
#. * A specialized version of `baseRest` which transforms the rest array.
#. *
#. * @private
#. * @param {Function} func The function to apply a rest parameter to.
#. * @param {number} [start=func.length-1] The start position of the rest parameter.
#. * @param {Function} transform The rest array transform.
#. * @returns {Function} Returns the new function.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/constant.js
#. *
#. * Creates a function that returns `value`.
#. *
#. * @static
#. * @memberOf _
#. * @since 2.4.0
#. * @category Util
#. * @param {*} value The value to return from the new function.
#. * @returns {Function} Returns the new constant function.
#. * @example
#. *
#. * var objects = _.times(2, _.constant({ 'a': 1 }));
#. *
#. * console.log(objects);
#. * // => [{ 'a': 1 }, { 'a': 1 }]
#. *
#. * console.log(objects[0] === objects[1]);
#. * // => true
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseSetToString.js
#. *
#. * The base implementation of `setToString` without support for hot loop shorting.
#. *
#. * @private
#. * @param {Function} func The function to modify.
#. * @param {Function} string The `toString` result.
#. * @returns {Function} Returns `func`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_shortOut.js
#. * Used to detect hot functions by number of calls within a span of milliseconds.
#. Built-in method references for those with the same name as other `lodash` methods.
#. *
#. * Creates a function that'll short out and invoke `identity` instead
#. * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
#. * milliseconds.
#. *
#. * @private
#. * @param {Function} func The function to restrict.
#. * @returns {Function} Returns the new shortable function.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_setToString.js
#. *
#. * Sets the `toString` method of `func` to return `string`.
#. *
#. * @private
#. * @param {Function} func The function to modify.
#. * @param {Function} string The `toString` result.
#. * @returns {Function} Returns `func`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseRest.js
#. *
#. * The base implementation of `_.rest` which doesn't validate or coerce arguments.
#. *
#. * @private
#. * @param {Function} func The function to apply a rest parameter to.
#. * @param {number} [start=func.length-1] The start position of the rest parameter.
#. * @returns {Function} Returns the new function.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_isIterateeCall.js
#. *
#. * Checks if the given arguments are from an iteratee call.
#. *
#. * @private
#. * @param {*} value The potential iteratee value argument.
#. * @param {*} index The potential iteratee index or key argument.
#. * @param {*} object The potential iteratee object argument.
#. * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
#. *  else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_createAssigner.js
#. *
#. * Creates a function like `_.assign`.
#. *
#. * @private
#. * @param {Function} assigner The function to assign values.
#. * @returns {Function} Returns the new assigner function.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/merge.js
#. *
#. * This method is like `_.assign` except that it recursively merges own and
#. * inherited enumerable string keyed properties of source objects into the
#. * destination object. Source properties that resolve to `undefined` are
#. * skipped if a destination value exists. Array and plain object properties
#. * are merged recursively. Other objects and value types are overridden by
#. * assignment. Source objects are applied from left to right. Subsequent
#. * sources overwrite property assignments of previous sources.
#. *
#. * **Note:** This method mutates `object`.
#. *
#. * @static
#. * @memberOf _
#. * @since 0.5.0
#. * @category Object
#. * @param {Object} object The destination object.
#. * @param {...Object} [sources] The source objects.
#. * @returns {Object} Returns `object`.
#. * @example
#. *
#. * var object = {
#. *   'a': [{ 'b': 2 }, { 'd': 4 }]
#. * };
#. *
#. * var other = {
#. *   'a': [{ 'c': 3 }, { 'e': 5 }]
#. * };
#. *
#. * _.merge(object, other);
#. * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/mergeWith.js
#. *
#. * This method is like `_.merge` except that it accepts `customizer` which
#. * is invoked to produce the merged values of the destination and source
#. * properties. If `customizer` returns `undefined`, merging is handled by the
#. * method instead. The `customizer` is invoked with six arguments:
#. * (objValue, srcValue, key, object, source, stack).
#. *
#. * **Note:** This method mutates `object`.
#. *
#. * @static
#. * @memberOf _
#. * @since 4.0.0
#. * @category Object
#. * @param {Object} object The destination object.
#. * @param {...Object} sources The source objects.
#. * @param {Function} customizer The function to customize assigned values.
#. * @returns {Object} Returns `object`.
#. * @example
#. *
#. * function customizer(objValue, srcValue) {
#. *   if (_.isArray(objValue)) {
#. *     return objValue.concat(srcValue);
#. *   }
#. * }
#. *
#. * var object = { 'a': [1], 'b': [2] };
#. * var other = { 'a': [3], 'b': [4] };
#. *
#. * _.mergeWith(object, other, customizer);
#. * // => { 'a': [1, 3], 'b': [2, 4] }
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/now.js
#. *
#. * Gets the timestamp of the number of milliseconds that have elapsed since
#. * the Unix epoch (1 January 1970 00:00:00 UTC).
#. *
#. * @static
#. * @memberOf _
#. * @since 2.4.0
#. * @category Date
#. * @returns {number} Returns the timestamp.
#. * @example
#. *
#. * _.defer(function(stamp) {
#. *   console.log(_.now() - stamp);
#. * }, _.now());
#. * // => Logs the number of milliseconds it took for the deferred invocation.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/@converse/openpromise/openpromise.js
#. CONCATENATED MODULE: ./node_modules/mergebounce/mergebounce.js
#. * Error message constants.
#. Built-in method references for those with the same name as other `lodash` methods.
#. *
#. * Creates a debounced function that delays invoking `func` until after `wait`
#. * milliseconds have elapsed since the last time the debounced function was
#. * invoked. The debounced function comes with a `cancel` method to cancel
#. * delayed `func` invocations and a `flush` method to immediately invoke them.
#. *
#. * This function differs from lodash's debounce by merging all passed objects
#. * before passing them to the final invoked function.
#. *
#. * Because of this, invoking can only happen on the trailing edge, since
#. * passed-in data would be discarded if invoking happened on the leading edge.
#. *
#. * If `wait` is `0`, `func` invocation is deferred until to the next tick,
#. * similar to `setTimeout` with a timeout of `0`.
#. *
#. * @static
#. * @category Function
#. * @param {Function} func The function to mergebounce.
#. * @param {number} [wait=0] The number of milliseconds to delay.
#. * @param {Object} [options={}] The options object.
#. * @param {number} [options.maxWait]
#. *  The maximum time `func` is allowed to be delayed before it's invoked.
#. * @param {boolean} [options.concatArrays=false]
#. *  By default arrays will be treated as objects when being merged. When
#. *  merging two arrays, the values in the 2nd arrray will replace the
#. *  corresponding values (i.e. those with the same indexes) in the first array.
#. *  When `concatArrays` is set to `true`, arrays will be concatenated instead.
#. * @param {boolean} [options.dedupeArrays=false]
#. *  This option is similar to `concatArrays`, except that the concatenated
#. *  array will also be deduplicated. Thus any entries that are concatenated to the
#. *  existing array, which are already contained in the existing array, will
#. *  first be removed.
#. * @param {boolean} [options.promise=false]
#. *  By default, when calling a merge-debounced function that doesn't execute
#. *  immediately, you'll receive the result from its previous execution, or
#. *  `undefined` if it has never executed before. By setting the `promise`
#. *  option to `true`, a promise will be returned instead of the previous
#. *  execution result when the function is debounced. The promise will resolve
#. *  with the result of the next execution, as soon as it happens.
#. * @returns {Function} Returns the new debounced function.
#. * @example
#. *
#. * // Avoid costly calculations while the window size is in flux.
#. * window.addEventListener('resize', mergebounce(calculateLayout, 150));
#. *
#. * // Invoke `sendMail` when clicked, debouncing subsequent calls.
#. * element.addEventListner('click', mergebounce(sendMail, 300));
#. *
#. * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
#. * const mergebounced = mergebounce(batchLog, 250, { 'maxWait': 1000 });
#. * const source = new EventSource('/stream');
#. * jQuery(source).on('message', mergebounced);
#. *
#. * // Cancel the trailing debounced invocation.
#. * window.addEventListener('popstate', mergebounced.cancel);
#.
#. Reset any `maxWait` timer.
#. Start the timer for the trailing edge.
#. Either this is the first call, activity has stopped and we're at the
#. trailing edge, the system time has gone backwards and we're treating
#. it as the trailing edge, or we've hit the `maxWait` limit.
#. Restart the timer.
#. Only invoke if we have `lastArgs` which means `func` has been
#. debounced at least once.
#. Handle invocations in a tight loop.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/@converse/skeletor/src/drivers/sessionStorage.js
#. Copyright 2014 Mozilla
#. Copyright 2015 Thodoris Greasidis
#. Copyright 2018 JC Brand
#.
#. Licensed under the Apache License, Version 2.0 (the "License");
#. you may not use this file except in compliance with the License.
#. You may obtain a copy of the License at
#.
#. http://www.apache.org/licenses/LICENSE-2.0
#.
#. Unless required by applicable law or agreed to in writing, software
#. distributed under the License is distributed on an "AS IS" BASIS,
#. WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#. See the License for the specific language governing permissions and
#. limitations under the License.
#. If the app is running inside a Google Chrome packaged webapp, or some
#. other context where sessionStorage isn't available, we don't use
#. sessionStorage. This feature detection is preferred over the old
#. `if (window.chrome && window.chrome.runtime)` code.
#. See: https://github.com/mozilla/localForage/issues/68
#. If sessionStorage isn't available, we get outta here!
#. This should be inside a try catch
#. eslint-disable-line guard-for-in
#. Remove all keys from the datastore, effectively destroying all data in
#. the app's key/value store!
#. Retrieve an item from the store. Unlike the original async_storage
#. library in Gaia, we don't modify return values at all. If a key's value
#. is `undefined`, we pass that value to the callback function.
#. If a result was found, parse it from the serialized
#. string into a JS object. If result isn't truthy, the key
#. is likely undefined and we'll pass it straight to the
#. callback.
#. Iterate over all items in the store.
#. We use a dedicated iterator instead of the `i` variable below
#. so other keys we fetch in sessionStorage aren't counted in
#. the `iterationNumber` argument passed to the `iterate()`
#. callback.
#.
#. See: github.com/mozilla/localForage/pull/435#discussion_r38061530
#. If a result was found, parse it from the serialized
#. string into a JS object. If result isn't truthy, the
#. key is likely undefined and we'll pass it straight
#. to the iterator.
#. eslint-disable-line no-void
#. Same as sessionStorage's key() method, except takes a callback.
#. Remove the prefix from the key, if a key is found.
#. Supply the number of keys in the datastore to the callback function.
#. Remove an item from the store, nice and simple.
#. Set a key's value and run an optional callback once the value is set.
#. Unlike Gaia's implementation, the callback function is passed the value,
#. in case you want to operate on that value only after you're sure it
#. saved, or something like that.
#. #__PURE__
#. Convert undefined values to null.
#. https://github.com/mozilla/localForage/pull/42
#. Save the original value to pass to the callback.
#. harmony default export
#. EXTERNAL MODULE: ./node_modules/localforage-setitems/dist/localforage-setitems.js
#. EXTERNAL MODULE: ./node_modules/localforage/dist/localforage.js
#. #__PURE__
#. CONCATENATED MODULE: ./node_modules/@converse/localforage-getitems/dist/localforage-getitems.es6.js
#. , callback
#. , iterationNumber
#. global IDBKeyRange, webkitIDBKeyRange, mozIDBKeyRange
#. , callback
#. Thanks https://hacks.mozilla.org/2014/06/breaking-the-borders-of-indexeddb/
#. event
#. event.target.result;
#. The cursor has passed beyond this key. Check next.
#. There is no next. Stop searching.
#. The current cursor value should be included and we should continue
#. a single step in case next item has the same key or possibly our
#. next key in set.
#. onfound(cursor.value);
#. cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.
#. event
#. , callback
#. Check to see if this is serialized content we need to
#. unpack.
#. CONCATENATED MODULE: ./node_modules/lodash-es/_isKey.js
#. * Used to match property names within property paths.
#. *
#. * Checks if `value` is a property name and not a property path.
#. *
#. * @private
#. * @param {*} value The value to check.
#. * @param {Object} [object] The object to query keys on.
#. * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/memoize.js
#. * Error message constants.
#. *
#. * Creates a function that memoizes the result of `func`. If `resolver` is
#. * provided, it determines the cache key for storing the result based on the
#. * arguments provided to the memoized function. By default, the first argument
#. * provided to the memoized function is used as the map cache key. The `func`
#. * is invoked with the `this` binding of the memoized function.
#. *
#. * **Note:** The cache is exposed as the `cache` property on the memoized
#. * function. Its creation may be customized by replacing the `_.memoize.Cache`
#. * constructor with one whose instances implement the
#. * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
#. * method interface of `clear`, `delete`, `get`, `has`, and `set`.
#. *
#. * @static
#. * @memberOf _
#. * @since 0.1.0
#. * @category Function
#. * @param {Function} func The function to have its output memoized.
#. * @param {Function} [resolver] The function to resolve the cache key.
#. * @returns {Function} Returns the new memoized function.
#. * @example
#. *
#. * var object = { 'a': 1, 'b': 2 };
#. * var other = { 'c': 3, 'd': 4 };
#. *
#. * var values = _.memoize(_.values);
#. * values(object);
#. * // => [1, 2]
#. *
#. * values(other);
#. * // => [3, 4]
#. *
#. * object.a = 2;
#. * values(object);
#. * // => [1, 2]
#. *
#. * // Modify the result cache.
#. * values.cache.set(object, ['a', 'b']);
#. * values(object);
#. * // => ['a', 'b']
#. *
#. * // Replace `_.memoize.Cache`.
#. * _.memoize.Cache = WeakMap;
#.
#. Expose `MapCache`.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_memoizeCapped.js
#. * Used as the maximum memoize cache size.
#. *
#. * A specialized version of `_.memoize` which clears the memoized function's
#. * cache when it exceeds `MAX_MEMOIZE_SIZE`.
#. *
#. * @private
#. * @param {Function} func The function to have its output memoized.
#. * @returns {Function} Returns the new memoized function.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_stringToPath.js
#. * Used to match property names within property paths.
#. * Used to match backslashes in property paths.
#. *
#. * Converts `string` to a property path array.
#. *
#. * @private
#. * @param {string} string The string to convert.
#. * @returns {Array} Returns the property path array.
#.
#. .
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_castPath.js
#. *
#. * Casts `value` to a path array if it's not one.
#. *
#. * @private
#. * @param {*} value The value to inspect.
#. * @param {Object} [object] The object to query keys on.
#. * @returns {Array} Returns the cast property path array.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_toKey.js
#. * Used as references for various `Number` constants.
#. *
#. * Converts `value` to a string key if it's not a string or symbol.
#. *
#. * @private
#. * @param {*} value The value to inspect.
#. * @returns {string|symbol} Returns the key.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/result.js
#. *
#. * This method is like `_.get` except that if the resolved value is a
#. * function it's invoked with the `this` binding of its parent object and
#. * its result is returned.
#. *
#. * @static
#. * @since 0.1.0
#. * @memberOf _
#. * @category Object
#. * @param {Object} object The object to query.
#. * @param {Array|string} path The path of the property to resolve.
#. * @param {*} [defaultValue] The value returned for `undefined` resolved values.
#. * @returns {*} Returns the resolved value.
#. * @example
#. *
#. * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
#. *
#. * _.result(object, 'a[0].b.c1');
#. * // => 3
#. *
#. * _.result(object, 'a[0].b.c2');
#. * // => 4
#. *
#. * _.result(object, 'a[0].b.c3', 'default');
#. * // => 'default'
#. *
#. * _.result(object, 'a[0].b.c3', _.constant('default'));
#. * // => 'default'
#.
#. Ensure the loop is entered when path is empty.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/@converse/skeletor/src/helpers.js
#. (c) 2010-2019 Jeremy Ashkenas and DocumentCloud
#. *
#. * Custom error for indicating timeouts
#. * @namespace _converse
#.
#. #__PURE__
#. unused pure expression or super
#. Generate four random hex digits.
#. Generate a pseudo-GUID by concatenating random hexadecimal.
#. Helpers
#. -------
#. Helper function to correctly set up the prototype chain for subclasses.
#. Similar to `goog.inherits`, but uses a hash of prototype properties and
#. class properties to be extended.
#.
#. eslint-disable-next-line @typescript-eslint/no-this-alias
#. The constructor function for the new subclass is either defined by you
#. (the "constructor" property in your `extend` definition), or defaulted
#. by us to simply call the parent constructor.
#. Add static properties to the constructor function, if supplied.
#. Set the prototype chain to inherit from `parent`, without calling
#. `parent`'s constructor function and add the prototype properties.
#. Set a convenience property in case the parent's prototype is needed
#. later.
#. *
#. * @typedef {Object} PromiseWrapper
#. * @property {boolean} isResolved
#. * @property {boolean} isPending
#. * @property {boolean} isRejected
#. * @property {Function} resolve
#. * @property {Function} reject
#.
#. * @type {PromiseWrapper}
#. *
#. * @typedef {Promise & PromiseWrapper} ResolveablePromise
#.
#. * @type {ResolveablePromise}
#. Throw an error when a URL is needed, and none is supplied.
#. Wrap an optional error callback with a fallback error event.
#. Map from CRUD to HTTP for our default `sync` implementation.
#. *
#. * @typedef {import('./model.js').Model} Model
#. * @typedef {import('./collection.js').Collection} Collection
#.
#. *
#. * @param {Model | Collection} model
#.
#. * @type {Model}
#. *
#. * @typedef {Object} SyncOptions
#. * @property {string} [url]
#. * @property {any} [data]
#. * @property {any} [attrs]
#. * @property {Function} [success]
#. * @property {Function} [error]
#. * @property {any} [xhr]
#.
#. *
#. * Override this function to change the manner in which Backbone persists
#. * models to the server. You will be passed the type of request, and the
#. * model in question. By default makes a `fetch()` API call
#. * to the model's `url()`.
#. *
#. * Some possible customizations could be:
#. *
#. * - Use `setTimeout` to batch rapid-fire updates into a single request.
#. * - Persist models via WebSockets instead of Ajax.
#. * - Persist models to browser storage
#. *
#. * @param {'create'|'update'|'patch'} method
#. * @param {import('./model.js').Model} model
#. * @param {SyncOptions} [options]
#.
#. Ensure that we have the appropriate request data.
#. CONCATENATED MODULE: ./node_modules/@converse/skeletor/src/storage.js
#. *
#. * IndexedDB, localStorage and sessionStorage adapter
#.
#. #__PURE__
#. *
#. * @param {'local'|'session'|'indexed'|'in_memory'} type
#. * @param {boolean} batchedWrites
#.
#. #__PURE__
#. #__PURE__
#. eslint-disable-next-line @typescript-eslint/no-this-alias
#. #__PURE__
#. We get the collection (and if necessary the model attribute.
#. Waiting for storeInitialized will cause another iteration of
#. the event loop, after which the collection reference will
#. be removed from the model.
#. When `wait` is set to true, Skeletor waits until
#. confirmation of storage before setting the values on
#. the model.
#. However, the new attributes needs to be sent, so it
#. sets them manually on the model and then removes
#. them after calling `sync`.
#. Because our `sync` method is asynchronous and we
#. wait for `storeInitialized`, the attributes are
#. already restored once we get here, so we need to do
#. the attributes dance again.
#. When storing, we don't pass back the response (which is
#. the set attributes returned from localforage because
#. Skeletor sets them again on the model and due to the async
#. nature of localforage it can cause stale attributes to be
#. set on a model after it's been updated in the meantime.
#. #__PURE__
#. Add a model, giving it a (hopefully)-unique GUID, if it doesn't already
#. * have an id of it's own.
#.
#. #__PURE__
#. #__PURE__
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/clone.js
#. * Used to compose bitmasks for cloning.
#. *
#. * Creates a shallow clone of `value`.
#. *
#. * **Note:** This method is loosely based on the
#. * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
#. * and supports cloning arrays, array buffers, booleans, date objects, maps,
#. * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
#. * arrays. The own enumerable properties of `arguments` objects are cloned
#. * as plain objects. An empty object is returned for uncloneable values such
#. * as error objects, functions, DOM nodes, and WeakMaps.
#. *
#. * @static
#. * @memberOf _
#. * @since 0.1.0
#. * @category Lang
#. * @param {*} value The value to clone.
#. * @returns {*} Returns the cloned value.
#. * @see _.cloneDeep
#. * @example
#. *
#. * var objects = [{ 'a': 1 }, { 'b': 2 }];
#. *
#. * var shallow = _.clone(objects);
#. * console.log(shallow[0] === objects[0]);
#. * // => true
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/defaults.js
#. * Used for built-in method references.
#. * Used to check objects for own properties.
#. *
#. * Assigns own and inherited enumerable string keyed properties of source
#. * objects to the destination object for all destination properties that
#. * resolve to `undefined`. Source objects are applied from left to right.
#. * Once a property is set, additional values of the same property are ignored.
#. *
#. * **Note:** This method mutates `object`.
#. *
#. * @static
#. * @since 0.1.0
#. * @memberOf _
#. * @category Object
#. * @param {Object} object The destination object.
#. * @param {...Object} [sources] The source objects.
#. * @returns {Object} Returns `object`.
#. * @see _.defaultsDeep
#. * @example
#. *
#. * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
#. * // => { 'a': 1, 'b': 2 }
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseDelay.js
#. * Error message constants.
#. *
#. * The base implementation of `_.delay` and `_.defer` which accepts `args`
#. * to provide to `func`.
#. *
#. * @private
#. * @param {Function} func The function to delay.
#. * @param {number} wait The number of milliseconds to delay invocation.
#. * @param {Array} args The arguments to provide to `func`.
#. * @returns {number|Object} Returns the timer id or timeout object.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/defer.js
#. *
#. * Defers invoking the `func` until the current call stack has cleared. Any
#. * additional arguments are provided to `func` when it's invoked.
#. *
#. * @static
#. * @memberOf _
#. * @since 0.1.0
#. * @category Function
#. * @param {Function} func The function to defer.
#. * @param {...*} [args] The arguments to invoke `func` with.
#. * @returns {number} Returns the timer id.
#. * @example
#. *
#. * _.defer(function(text) {
#. *   console.log(text);
#. * }, 'deferred');
#. * // => Logs 'deferred' after one millisecond.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseHas.js
#. * Used for built-in method references.
#. * Used to check objects for own properties.
#. *
#. * The base implementation of `_.has` without support for deep paths.
#. *
#. * @private
#. * @param {Object} [object] The object to query.
#. * @param {Array|string} key The key to check.
#. * @returns {boolean} Returns `true` if `key` exists, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_hasPath.js
#. *
#. * Checks if `path` exists on `object`.
#. *
#. * @private
#. * @param {Object} object The object to query.
#. * @param {Array|string} path The path to check.
#. * @param {Function} hasFunc The function to check properties.
#. * @returns {boolean} Returns `true` if `path` exists, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/has.js
#. *
#. * Checks if `path` is a direct property of `object`.
#. *
#. * @static
#. * @since 0.1.0
#. * @memberOf _
#. * @category Object
#. * @param {Object} object The object to query.
#. * @param {Array|string} path The path to check.
#. * @returns {boolean} Returns `true` if `path` exists, else `false`.
#. * @example
#. *
#. * var object = { 'a': { 'b': 2 } };
#. * var other = _.create({ 'a': _.create({ 'b': 2 }) });
#. *
#. * _.has(object, 'a');
#. * // => true
#. *
#. * _.has(object, 'a.b');
#. * // => true
#. *
#. * _.has(object, ['a', 'b']);
#. * // => true
#. *
#. * _.has(other, 'a');
#. * // => false
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseForOwn.js
#. *
#. * The base implementation of `_.forOwn` without support for iteratee shorthands.
#. *
#. * @private
#. * @param {Object} object The object to iterate over.
#. * @param {Function} iteratee The function invoked per iteration.
#. * @returns {Object} Returns `object`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseInverter.js
#. *
#. * The base implementation of `_.invert` and `_.invertBy` which inverts
#. * `object` with values transformed by `iteratee` and set by `setter`.
#. *
#. * @private
#. * @param {Object} object The object to iterate over.
#. * @param {Function} setter The function to set `accumulator` values.
#. * @param {Function} iteratee The iteratee to transform values.
#. * @param {Object} accumulator The initial inverted object.
#. * @returns {Function} Returns `accumulator`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_createInverter.js
#. *
#. * Creates a function like `_.invertBy`.
#. *
#. * @private
#. * @param {Function} setter The function to set accumulator values.
#. * @param {Function} toIteratee The function to resolve iteratees.
#. * @returns {Function} Returns the new inverter function.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/invert.js
#. * Used for built-in method references.
#. *
#. * Used to resolve the
#. * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
#. * of values.
#.
#. *
#. * Creates an object composed of the inverted keys and values of `object`.
#. * If `object` contains duplicate values, subsequent values overwrite
#. * property assignments of previous values.
#. *
#. * @static
#. * @memberOf _
#. * @since 0.7.0
#. * @category Object
#. * @param {Object} object The object to invert.
#. * @returns {Object} Returns the new inverted object.
#. * @example
#. *
#. * var object = { 'a': 1, 'b': 2, 'c': 1 };
#. *
#. * _.invert(object);
#. * // => { '1': 'c', '2': 'b' }
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_setCacheAdd.js
#. * Used to stand-in for `undefined` hash values.
#. *
#. * Adds `value` to the array cache.
#. *
#. * @private
#. * @name add
#. * @memberOf SetCache
#. * @alias push
#. * @param {*} value The value to cache.
#. * @returns {Object} Returns the cache instance.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_setCacheHas.js
#. *
#. * Checks if `value` is in the array cache.
#. *
#. * @private
#. * @name has
#. * @memberOf SetCache
#. * @param {*} value The value to search for.
#. * @returns {number} Returns `true` if `value` is found, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_SetCache.js
#. *
#. *
#. * Creates an array cache object to store unique values.
#. *
#. * @private
#. * @constructor
#. * @param {Array} [values] The values to cache.
#.
#. Add methods to `SetCache`.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_arraySome.js
#. *
#. * A specialized version of `_.some` for arrays without support for iteratee
#. * shorthands.
#. *
#. * @private
#. * @param {Array} [array] The array to iterate over.
#. * @param {Function} predicate The function invoked per iteration.
#. * @returns {boolean} Returns `true` if any element passes the predicate check,
#. *  else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_cacheHas.js
#. *
#. * Checks if a `cache` value for `key` exists.
#. *
#. * @private
#. * @param {Object} cache The cache to query.
#. * @param {string} key The key of the entry to check.
#. * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_equalArrays.js
#. * Used to compose bitmasks for value comparisons.
#. *
#. * A specialized version of `baseIsEqualDeep` for arrays with support for
#. * partial deep comparisons.
#. *
#. * @private
#. * @param {Array} array The array to compare.
#. * @param {Array} other The other array to compare.
#. * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
#. * @param {Function} customizer The function to customize comparisons.
#. * @param {Function} equalFunc The function to determine equivalents of values.
#. * @param {Object} stack Tracks traversed `array` and `other` objects.
#. * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
#.
#. Check that cyclic values are equal.
#. Ignore non-index properties.
#. Recursively compare arrays (susceptible to call stack limits).
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_mapToArray.js
#. *
#. * Converts `map` to its key-value pairs.
#. *
#. * @private
#. * @param {Object} map The map to convert.
#. * @returns {Array} Returns the key-value pairs.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_setToArray.js
#. *
#. * Converts `set` to an array of its values.
#. *
#. * @private
#. * @param {Object} set The set to convert.
#. * @returns {Array} Returns the values.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_equalByTag.js
#. * Used to compose bitmasks for value comparisons.
#. * `Object#toString` result references.
#. * Used to convert symbols to primitives and strings.
#. *
#. * A specialized version of `baseIsEqualDeep` for comparing objects of
#. * the same `toStringTag`.
#. *
#. * **Note:** This function only supports comparing values with tags of
#. * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
#. *
#. * @private
#. * @param {Object} object The object to compare.
#. * @param {Object} other The other object to compare.
#. * @param {string} tag The `toStringTag` of the objects to compare.
#. * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
#. * @param {Function} customizer The function to customize comparisons.
#. * @param {Function} equalFunc The function to determine equivalents of values.
#. * @param {Object} stack Tracks traversed `object` and `other` objects.
#. * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
#.
#. Coerce booleans to `1` or `0` and dates to milliseconds.
#. Invalid dates are coerced to `NaN`.
#. Coerce regexes to strings and treat strings, primitives and objects,
#. as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
#. for more details.
#. Assume cyclic values are equal.
#. Recursively compare objects (susceptible to call stack limits).
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_equalObjects.js
#. * Used to compose bitmasks for value comparisons.
#. * Used for built-in method references.
#. * Used to check objects for own properties.
#. *
#. * A specialized version of `baseIsEqualDeep` for objects with support for
#. * partial deep comparisons.
#. *
#. * @private
#. * @param {Object} object The object to compare.
#. * @param {Object} other The other object to compare.
#. * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
#. * @param {Function} customizer The function to customize comparisons.
#. * @param {Function} equalFunc The function to determine equivalents of values.
#. * @param {Object} stack Tracks traversed `object` and `other` objects.
#. * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
#.
#. Check that cyclic values are equal.
#. Recursively compare objects (susceptible to call stack limits).
#. Non `Object` object instances with different constructors are not equal.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsEqualDeep.js
#. * Used to compose bitmasks for value comparisons.
#. * `Object#toString` result references.
#. * Used for built-in method references.
#. * Used to check objects for own properties.
#. *
#. * A specialized version of `baseIsEqual` for arrays and objects which performs
#. * deep comparisons and tracks traversed objects enabling objects with circular
#. * references to be compared.
#. *
#. * @private
#. * @param {Object} object The object to compare.
#. * @param {Object} other The other object to compare.
#. * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
#. * @param {Function} customizer The function to customize comparisons.
#. * @param {Function} equalFunc The function to determine equivalents of values.
#. * @param {Object} [stack] Tracks traversed `object` and `other` objects.
#. * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsEqual.js
#. *
#. * The base implementation of `_.isEqual` which supports partial comparisons
#. * and tracks traversed objects.
#. *
#. * @private
#. * @param {*} value The value to compare.
#. * @param {*} other The other value to compare.
#. * @param {boolean} bitmask The bitmask flags.
#. *  1 - Unordered comparison
#. *  2 - Partial comparison
#. * @param {Function} [customizer] The function to customize comparisons.
#. * @param {Object} [stack] Tracks traversed `value` and `other` objects.
#. * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/isEqual.js
#. *
#. * Performs a deep comparison between two values to determine if they are
#. * equivalent.
#. *
#. * **Note:** This method supports comparing arrays, array buffers, booleans,
#. * date objects, error objects, maps, numbers, `Object` objects, regexes,
#. * sets, strings, symbols, and typed arrays. `Object` objects are compared
#. * by their own, not inherited, enumerable properties. Functions and DOM
#. * nodes are compared by strict equality, i.e. `===`.
#. *
#. * @static
#. * @memberOf _
#. * @since 0.1.0
#. * @category Lang
#. * @param {*} value The value to compare.
#. * @param {*} other The other value to compare.
#. * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
#. * @example
#. *
#. * var object = { 'a': 1 };
#. * var other = { 'a': 1 };
#. *
#. * _.isEqual(object, other);
#. * // => true
#. *
#. * object === other;
#. * // => false
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsMatch.js
#. * Used to compose bitmasks for value comparisons.
#. *
#. * The base implementation of `_.isMatch` without support for iteratee shorthands.
#. *
#. * @private
#. * @param {Object} object The object to inspect.
#. * @param {Object} source The object of property values to match.
#. * @param {Array} matchData The property names, values, and compare flags to match.
#. * @param {Function} [customizer] The function to customize comparisons.
#. * @returns {boolean} Returns `true` if `object` is a match, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_isStrictComparable.js
#. *
#. * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
#. *
#. * @private
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` if suitable for strict
#. *  equality comparisons, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_getMatchData.js
#. *
#. * Gets the property names, values, and compare flags of `object`.
#. *
#. * @private
#. * @param {Object} object The object to query.
#. * @returns {Array} Returns the match data of `object`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_matchesStrictComparable.js
#. *
#. * A specialized version of `matchesProperty` for source values suitable
#. * for strict equality comparisons, i.e. `===`.
#. *
#. * @private
#. * @param {string} key The key of the property to get.
#. * @param {*} srcValue The value to match.
#. * @returns {Function} Returns the new spec function.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseMatches.js
#. *
#. * The base implementation of `_.matches` which doesn't clone `source`.
#. *
#. * @private
#. * @param {Object} source The object of property values to match.
#. * @returns {Function} Returns the new spec function.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseGet.js
#. *
#. * The base implementation of `_.get` without support for default values.
#. *
#. * @private
#. * @param {Object} object The object to query.
#. * @param {Array|string} path The path of the property to get.
#. * @returns {*} Returns the resolved value.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/get.js
#. *
#. * Gets the value at `path` of `object`. If the resolved value is
#. * `undefined`, the `defaultValue` is returned in its place.
#. *
#. * @static
#. * @memberOf _
#. * @since 3.7.0
#. * @category Object
#. * @param {Object} object The object to query.
#. * @param {Array|string} path The path of the property to get.
#. * @param {*} [defaultValue] The value returned for `undefined` resolved values.
#. * @returns {*} Returns the resolved value.
#. * @example
#. *
#. * var object = { 'a': [{ 'b': { 'c': 3 } }] };
#. *
#. * _.get(object, 'a[0].b.c');
#. * // => 3
#. *
#. * _.get(object, ['a', '0', 'b', 'c']);
#. * // => 3
#. *
#. * _.get(object, 'a.b.c', 'default');
#. * // => 'default'
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseHasIn.js
#. *
#. * The base implementation of `_.hasIn` without support for deep paths.
#. *
#. * @private
#. * @param {Object} [object] The object to query.
#. * @param {Array|string} key The key to check.
#. * @returns {boolean} Returns `true` if `key` exists, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/hasIn.js
#. *
#. * Checks if `path` is a direct or inherited property of `object`.
#. *
#. * @static
#. * @memberOf _
#. * @since 4.0.0
#. * @category Object
#. * @param {Object} object The object to query.
#. * @param {Array|string} path The path to check.
#. * @returns {boolean} Returns `true` if `path` exists, else `false`.
#. * @example
#. *
#. * var object = _.create({ 'a': _.create({ 'b': 2 }) });
#. *
#. * _.hasIn(object, 'a');
#. * // => true
#. *
#. * _.hasIn(object, 'a.b');
#. * // => true
#. *
#. * _.hasIn(object, ['a', 'b']);
#. * // => true
#. *
#. * _.hasIn(object, 'b');
#. * // => false
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseMatchesProperty.js
#. * Used to compose bitmasks for value comparisons.
#. *
#. * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
#. *
#. * @private
#. * @param {string} path The path of the property to get.
#. * @param {*} srcValue The value to match.
#. * @returns {Function} Returns the new spec function.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseProperty.js
#. *
#. * The base implementation of `_.property` without support for deep paths.
#. *
#. * @private
#. * @param {string} key The key of the property to get.
#. * @returns {Function} Returns the new accessor function.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_basePropertyDeep.js
#. *
#. * A specialized version of `baseProperty` which supports deep paths.
#. *
#. * @private
#. * @param {Array|string} path The path of the property to get.
#. * @returns {Function} Returns the new accessor function.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/property.js
#. *
#. * Creates a function that returns the value at `path` of a given object.
#. *
#. * @static
#. * @memberOf _
#. * @since 2.4.0
#. * @category Util
#. * @param {Array|string} path The path of the property to get.
#. * @returns {Function} Returns the new accessor function.
#. * @example
#. *
#. * var objects = [
#. *   { 'a': { 'b': 2 } },
#. *   { 'a': { 'b': 1 } }
#. * ];
#. *
#. * _.map(objects, _.property('a.b'));
#. * // => [2, 1]
#. *
#. * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
#. * // => [1, 2]
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseIteratee.js
#. *
#. * The base implementation of `_.iteratee`.
#. *
#. * @private
#. * @param {*} [value=_.identity] The value to convert to an iteratee.
#. * @returns {Function} Returns the iteratee.
#.
#. Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
#. See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/iteratee.js
#. * Used to compose bitmasks for cloning.
#. *
#. * Creates a function that invokes `func` with the arguments of the created
#. * function. If `func` is a property name, the created function returns the
#. * property value for a given element. If `func` is an array or object, the
#. * created function returns `true` for elements that contain the equivalent
#. * source properties, otherwise it returns `false`.
#. *
#. * @static
#. * @since 4.0.0
#. * @memberOf _
#. * @category Util
#. * @param {*} [func=_.identity] The value to convert to a callback.
#. * @returns {Function} Returns the callback.
#. * @example
#. *
#. * var users = [
#. *   { 'user': 'barney', 'age': 36, 'active': true },
#. *   { 'user': 'fred',   'age': 40, 'active': false }
#. * ];
#. *
#. * // The `_.matches` iteratee shorthand.
#. * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
#. * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
#. *
#. * // The `_.matchesProperty` iteratee shorthand.
#. * _.filter(users, _.iteratee(['user', 'fred']));
#. * // => [{ 'user': 'fred', 'age': 40 }]
#. *
#. * // The `_.property` iteratee shorthand.
#. * _.map(users, _.iteratee('user'));
#. * // => ['barney', 'fred']
#. *
#. * // Create custom iteratee shorthands.
#. * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
#. *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
#. *     return func.test(string);
#. *   };
#. * });
#. *
#. * _.filter(['abc', 'def'], /ef/);
#. * // => ['def']
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/last.js
#. *
#. * Gets the last element of `array`.
#. *
#. * @static
#. * @memberOf _
#. * @since 0.1.0
#. * @category Array
#. * @param {Array} array The array to query.
#. * @returns {*} Returns the last element of `array`.
#. * @example
#. *
#. * _.last([1, 2, 3]);
#. * // => 3
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseSlice.js
#. *
#. * The base implementation of `_.slice` without an iteratee call guard.
#. *
#. * @private
#. * @param {Array} array The array to slice.
#. * @param {number} [start=0] The start position.
#. * @param {number} [end=array.length] The end position.
#. * @returns {Array} Returns the slice of `array`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_parent.js
#. *
#. * Gets the parent value at `path` of `object`.
#. *
#. * @private
#. * @param {Object} object The object to query.
#. * @param {Array} path The path to get the parent value of.
#. * @returns {*} Returns the parent value.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseUnset.js
#. *
#. * The base implementation of `_.unset`.
#. *
#. * @private
#. * @param {Object} object The object to modify.
#. * @param {Array|string} path The property path to unset.
#. * @returns {boolean} Returns `true` if the property is deleted, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_customOmitClone.js
#. *
#. * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
#. * objects.
#. *
#. * @private
#. * @param {*} value The value to inspect.
#. * @param {string} key The key of the property to inspect.
#. * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_isFlattenable.js
#. * Built-in value references.
#. *
#. * Checks if `value` is a flattenable `arguments` object or array.
#. *
#. * @private
#. * @param {*} value The value to check.
#. * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseFlatten.js
#. *
#. * The base implementation of `_.flatten` with support for restricting flattening.
#. *
#. * @private
#. * @param {Array} array The array to flatten.
#. * @param {number} depth The maximum recursion depth.
#. * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
#. * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
#. * @param {Array} [result=[]] The initial result value.
#. * @returns {Array} Returns the new flattened array.
#.
#. Recursively flatten arrays (susceptible to call stack limits).
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/flatten.js
#. *
#. * Flattens `array` a single level deep.
#. *
#. * @static
#. * @memberOf _
#. * @since 0.1.0
#. * @category Array
#. * @param {Array} array The array to flatten.
#. * @returns {Array} Returns the new flattened array.
#. * @example
#. *
#. * _.flatten([1, [2, [3, [4]], 5]]);
#. * // => [1, 2, [3, [4]], 5]
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_flatRest.js
#. *
#. * A specialized version of `baseRest` which flattens the rest array.
#. *
#. * @private
#. * @param {Function} func The function to apply a rest parameter to.
#. * @returns {Function} Returns the new function.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/omit.js
#. * Used to compose bitmasks for cloning.
#. *
#. * The opposite of `_.pick`; this method creates an object composed of the
#. * own and inherited enumerable property paths of `object` that are not omitted.
#. *
#. * **Note:** This method is considerably slower than `_.pick`.
#. *
#. * @static
#. * @since 0.1.0
#. * @memberOf _
#. * @category Object
#. * @param {Object} object The source object.
#. * @param {...(string|string[])} [paths] The property paths to omit.
#. * @returns {Object} Returns the new object.
#. * @example
#. *
#. * var object = { 'a': 1, 'b': '2', 'c': 3 };
#. *
#. * _.omit(object, ['a', 'c']);
#. * // => { 'b': '2' }
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseSet.js
#. *
#. * The base implementation of `_.set`.
#. *
#. * @private
#. * @param {Object} object The object to modify.
#. * @param {Array|string} path The path of the property to set.
#. * @param {*} value The value to set.
#. * @param {Function} [customizer] The function to customize path creation.
#. * @returns {Object} Returns `object`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_basePickBy.js
#. *
#. * The base implementation of  `_.pickBy` without support for iteratee shorthands.
#. *
#. * @private
#. * @param {Object} object The source object.
#. * @param {string[]} paths The property paths to pick.
#. * @param {Function} predicate The function invoked per property.
#. * @returns {Object} Returns the new object.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_basePick.js
#. *
#. * The base implementation of `_.pick` without support for individual
#. * property identifiers.
#. *
#. * @private
#. * @param {Object} object The source object.
#. * @param {string[]} paths The property paths to pick.
#. * @returns {Object} Returns the new object.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/pick.js
#. *
#. * Creates an object composed of the picked `object` properties.
#. *
#. * @static
#. * @since 0.1.0
#. * @memberOf _
#. * @category Object
#. * @param {Object} object The source object.
#. * @param {...(string|string[])} [paths] The property paths to pick.
#. * @returns {Object} Returns the new object.
#. * @example
#. *
#. * var object = { 'a': 1, 'b': '2', 'c': 3 };
#. *
#. * _.pick(object, ['a', 'c']);
#. * // => { 'a': 1, 'c': 3 }
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/@converse/skeletor/src/model.js
#. *
#. * @typedef {import('./collection.js').Collection} Collection
#. * @typedef {Record.<string, any>} Attributes
#. *
#. * @typedef {Record.<string, any>} Options
#. * @property {boolean} [validate]
#. *
#. * @typedef {Record.<string, any>} ModelOptions
#. * @property {Collection} [collection]
#. * @property {boolean} [parse]
#. * @property {boolean} [unset]
#. * @property {boolean} [silent]
#.
#. *
#. * **Models** are the basic data object in the framework --
#. * frequently representing a row in a table in a database on your server.
#. * A discrete chunk of data and a bunch of useful, related methods for
#. * performing computations and transformations on that data.
#.
#. #__PURE__
#. *
#. * Create a new model with the specified attributes. A client id (`cid`)
#. * is automatically generated and assigned for you.
#. * @param {Attributes} [attributes]
#. * @param {ModelOptions} [options]
#.
#. The value returned during the last failed validation.
#. A hash of attributes whose current and previous value differ.
#. *
#. * @param {Storage} storage
#.
#. *
#. * @returns {Storage} storage
#.
#. *
#. * The default name for the JSON `id` attribute is `"id"`. MongoDB and
#. * CouchDB users may want to set this to `"_id"` (by overriding this getter
#. * in a subclass).
#.
#. eslint-disable-next-line class-methods-use-this
#. *
#. * The prefix is used to create the client id which is used to identify models locally.
#. * You may want to override this if you're experiencing name clashes with model ids.
#.
#. eslint-disable-next-line class-methods-use-this
#. *
#. * preinitialize is an empty function by default. You can override it with a function
#. * or object.  preinitialize will run before any instantiation logic is run in the Model.
#.
#. eslint-disable-next-line class-methods-use-this
#. *
#. * Initialize is an empty function by default. Override it with your own
#. * initialization logic.
#.
#. eslint-disable-next-line class-methods-use-this
#. *
#. * @param {object} attrs
#. * @param {object} [options]
#. * @returns {string} The validation error message
#.
#. *
#. * Return a copy of the model's `attributes` object.
#.
#. *
#. * Override this if you need custom syncing semantics for *this* particular model.
#. * @param {'create'|'update'|'patch'|'delete'|'read'} method
#. * @param {Model} model
#. * @param {Options} options
#.
#. eslint-disable-next-line class-methods-use-this
#. *
#. * Get the value of an attribute.
#. * @param {string} attr
#.
#. *
#. * Returns `true` if the attribute contains a value that is not null
#. * or undefined.
#. * @param {string} attr
#.
#. *
#. * Special-cased proxy to lodash's `matches` method.
#. * @param {Attributes} attrs
#.
#. *
#. * Set a hash of model attributes on the object, firing `"change"`. This is
#. * the core primitive operation of a model, updating the data and notifying
#. * anyone who needs to know about the change in state. The heart of the beast.
#. * @param {string|Object} key
#. * @param {string|Object} [val]
#. * @param {Options} [options]
#.
#. Handle both `"key", value` and `{key: value}` -style arguments.
#. Run validation.
#. Extract attributes and options.
#. For each `set` attribute, update or delete the current value.
#. Update the `id`.
#. Trigger all relevant attribute changes.
#. You might be wondering why there's a `while` loop here. Changes can
#. be recursively nested within `"change"` events.
#. * @type {Options}
#. *
#. * Remove an attribute from the model, firing `"change"`. `unset` is a noop
#. * if the attribute doesn't exist.
#. * @param {string} attr
#. * @param {Options} [options]
#.
#. *
#. * Clear all attributes on the model, firing `"change"`.
#. * @param {Options} options
#.
#. *
#. * Determine if the model has changed since the last `"change"` event.
#. * If you specify an attribute name, determine if that attribute has changed.
#. * @param {string} [attr]
#.
#. *
#. * Return an object containing all the attributes that have changed, or
#. * false if there are no changed attributes. Useful for determining what
#. * parts of a view need to be updated and/or what attributes need to be
#. * persisted to the server. Unset attributes will be set to undefined.
#. * You can also pass an attributes object to diff against the model,
#. * determining if there *would be* a change.
#. * @param {Object} diff
#.
#. *
#. * Get the previous value of an attribute, recorded at the time the last
#. * `"change"` event was fired.
#. * @param {string} [attr]
#.
#. *
#. * Get all of the attributes of the model at the time of the previous
#. * `"change"` event.
#.
#. *
#. * Fetch the model from the server, merging the response with the model's
#. * local attributes. Any changed attributes will trigger a "change" event.
#. * @param {Options} [options={}]
#.
#. *
#. * Set a hash of model attributes, and sync the model to the server.
#. * If the server returns an attributes hash that differs, the model's
#. * state will be `set` again.
#. * @param {string|Attributes} [key]
#. * @param {boolean|number|string|Options} [val]
#. * @param {Options} [options]
#.
#. Handle both `"key", value` and `{key: value}` -style arguments.
#. * @type {Options}
#. If we're not waiting and attributes exist, save acts as
#. `set(attr).save(null, opts)` with validation. Otherwise, check if
#. the model will be valid when the attributes, if any, are set.
#. * @type {Object}
#. After a successful server-side save, the client is (optionally)
#. updated with the server-side state.
#. Ensure attributes are restored during synchronous saves.
#. Set temporary attributes if `{wait: true}` to properly find new ids.
#. Restore attributes.
#. *
#. * Destroy this model on the server if it was already persisted.
#. * Optimistically removes the model from its collection, if it has one.
#. * If `wait: true` is passed, waits for the server to respond before removal.
#. * @param {Options} [options]
#.
#. *
#. * Default URL for the model's representation on the server -- if you're
#. * using Backbone's restful methods, override this to change the endpoint
#. * that will be called.
#.
#. *
#. * **parse** converts a response into the hash of attributes to be `set` on
#. * the model. The default implementation is just to pass the response along.
#. * @param {Options} resp
#. * @param {Options} [options]
#.
#. *
#. * A model is new if it has never been saved to the server, and lacks an id.
#.
#. *
#. * Check if the model is currently in a valid state.
#. * @param {Options} [options]
#.
#. *
#. * Run validation against the next complete set of model attributes,
#. * returning `true` if all is well. Otherwise, fire an `"invalid"` event.
#. * @param {Attributes} attrs
#. * @param {Options} [options]
#.
#. CONCATENATED MODULE: ./node_modules/lodash-es/_arrayAggregator.js
#. *
#. * A specialized version of `baseAggregator` for arrays.
#. *
#. * @private
#. * @param {Array} [array] The array to iterate over.
#. * @param {Function} setter The function to set `accumulator` values.
#. * @param {Function} iteratee The iteratee to transform keys.
#. * @param {Object} accumulator The initial aggregated object.
#. * @returns {Function} Returns `accumulator`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_createBaseEach.js
#. *
#. * Creates a `baseEach` or `baseEachRight` function.
#. *
#. * @private
#. * @param {Function} eachFunc The function to iterate over a collection.
#. * @param {boolean} [fromRight] Specify iterating from right to left.
#. * @returns {Function} Returns the new base function.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseEach.js
#. *
#. * The base implementation of `_.forEach` without support for iteratee shorthands.
#. *
#. * @private
#. * @param {Array|Object} collection The collection to iterate over.
#. * @param {Function} iteratee The function invoked per iteration.
#. * @returns {Array|Object} Returns `collection`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseAggregator.js
#. *
#. * Aggregates elements of `collection` on `accumulator` with keys transformed
#. * by `iteratee` and values set by `setter`.
#. *
#. * @private
#. * @param {Array|Object} collection The collection to iterate over.
#. * @param {Function} setter The function to set `accumulator` values.
#. * @param {Function} iteratee The iteratee to transform keys.
#. * @param {Object} accumulator The initial aggregated object.
#. * @returns {Function} Returns `accumulator`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_createAggregator.js
#. *
#. * Creates a function like `_.groupBy`.
#. *
#. * @private
#. * @param {Function} setter The function to set accumulator values.
#. * @param {Function} [initializer] The accumulator object initializer.
#. * @returns {Function} Returns the new aggregator function.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/countBy.js
#. * Used for built-in method references.
#. * Used to check objects for own properties.
#. *
#. * Creates an object composed of keys generated from the results of running
#. * each element of `collection` thru `iteratee`. The corresponding value of
#. * each key is the number of times the key was returned by `iteratee`. The
#. * iteratee is invoked with one argument: (value).
#. *
#. * @static
#. * @memberOf _
#. * @since 0.5.0
#. * @category Collection
#. * @param {Array|Object} collection The collection to iterate over.
#. * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
#. * @returns {Object} Returns the composed aggregate object.
#. * @example
#. *
#. * _.countBy([6.1, 4.2, 6.3], Math.floor);
#. * // => { '4': 1, '6': 2 }
#. *
#. * // The `_.property` iteratee shorthand.
#. * _.countBy(['one', 'two', 'three'], 'length');
#. * // => { '3': 2, '5': 1 }
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/groupBy.js
#. * Used for built-in method references.
#. * Used to check objects for own properties.
#. *
#. * Creates an object composed of keys generated from the results of running
#. * each element of `collection` thru `iteratee`. The order of grouped values
#. * is determined by the order they occur in `collection`. The corresponding
#. * value of each key is an array of elements responsible for generating the
#. * key. The iteratee is invoked with one argument: (value).
#. *
#. * @static
#. * @memberOf _
#. * @since 0.1.0
#. * @category Collection
#. * @param {Array|Object} collection The collection to iterate over.
#. * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
#. * @returns {Object} Returns the composed aggregate object.
#. * @example
#. *
#. * _.groupBy([6.1, 4.2, 6.3], Math.floor);
#. * // => { '4': [4.2], '6': [6.1, 6.3] }
#. *
#. * // The `_.property` iteratee shorthand.
#. * _.groupBy(['one', 'two', 'three'], 'length');
#. * // => { '3': ['one', 'two'], '5': ['three'] }
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/keyBy.js
#. *
#. * Creates an object composed of keys generated from the results of running
#. * each element of `collection` thru `iteratee`. The corresponding value of
#. * each key is the last element responsible for generating the key. The
#. * iteratee is invoked with one argument: (value).
#. *
#. * @static
#. * @memberOf _
#. * @since 4.0.0
#. * @category Collection
#. * @param {Array|Object} collection The collection to iterate over.
#. * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
#. * @returns {Object} Returns the composed aggregate object.
#. * @example
#. *
#. * var array = [
#. *   { 'dir': 'left', 'code': 97 },
#. *   { 'dir': 'right', 'code': 100 }
#. * ];
#. *
#. * _.keyBy(array, function(o) {
#. *   return String.fromCharCode(o.code);
#. * });
#. * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
#. *
#. * _.keyBy(array, 'dir');
#. * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseMap.js
#. *
#. * The base implementation of `_.map` without support for iteratee shorthands.
#. *
#. * @private
#. * @param {Array|Object} collection The collection to iterate over.
#. * @param {Function} iteratee The function invoked per iteration.
#. * @returns {Array} Returns the new mapped array.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseSortBy.js
#. *
#. * The base implementation of `_.sortBy` which uses `comparer` to define the
#. * sort order of `array` and replaces criteria objects with their corresponding
#. * values.
#. *
#. * @private
#. * @param {Array} array The array to sort.
#. * @param {Function} comparer The function to define sort order.
#. * @returns {Array} Returns `array`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_compareAscending.js
#. *
#. * Compares values to sort them in ascending order.
#. *
#. * @private
#. * @param {*} value The value to compare.
#. * @param {*} other The other value to compare.
#. * @returns {number} Returns the sort order indicator for `value`.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_compareMultiple.js
#. *
#. * Used by `_.orderBy` to compare multiple properties of a value to another
#. * and stable sort them.
#. *
#. * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
#. * specify an order of "desc" for descending or "asc" for ascending sort order
#. * of corresponding values.
#. *
#. * @private
#. * @param {Object} object The object to compare.
#. * @param {Object} other The other object to compare.
#. * @param {boolean[]|string[]} orders The order to sort by for each property.
#. * @returns {number} Returns the sort order indicator for `object`.
#.
#. Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
#. that causes it, under certain circumstances, to provide the same value for
#. `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
#. for more details.
#.
#. This also ensures a stable sort in V8 and other engines.
#. See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/_baseOrderBy.js
#. *
#. * The base implementation of `_.orderBy` without param guards.
#. *
#. * @private
#. * @param {Array|Object} collection The collection to iterate over.
#. * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
#. * @param {string[]} orders The sort orders of `iteratees`.
#. * @returns {Array} Returns the new sorted array.
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/sortBy.js
#. *
#. * Creates an array of elements, sorted in ascending order by the results of
#. * running each element in a collection thru each iteratee. This method
#. * performs a stable sort, that is, it preserves the original sort order of
#. * equal elements. The iteratees are invoked with one argument: (value).
#. *
#. * @static
#. * @memberOf _
#. * @since 0.1.0
#. * @category Collection
#. * @param {Array|Object} collection The collection to iterate over.
#. * @param {...(Function|Function[])} [iteratees=[_.identity]]
#. *  The iteratees to sort by.
#. * @returns {Array} Returns the new sorted array.
#. * @example
#. *
#. * var users = [
#. *   { 'user': 'fred',   'age': 48 },
#. *   { 'user': 'barney', 'age': 36 },
#. *   { 'user': 'fred',   'age': 30 },
#. *   { 'user': 'barney', 'age': 34 }
#. * ];
#. *
#. * _.sortBy(users, [function(o) { return o.user; }]);
#. * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
#. *
#. * _.sortBy(users, ['user', 'age']);
#. * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/@converse/skeletor/src/collection.js
#. Default options for `Collection#set`.
#. *
#. * @typedef {Record.<string, any>} Options
#. * @typedef {Record.<string, any>} Attributes
#. *
#. * @typedef {import('./storage.js').default} Storage
#. *
#. * @typedef {Record.<string, any>} CollectionOptions
#. * @property {Model} [model]
#. * @property {Function} [comparator]
#.
#. *
#. * If models tend to represent a single row of data, a Collection is
#. * more analogous to a table full of data ... or a small slice or page of that
#. * table, or a collection of rows that belong together for a particular reason
#. * -- all of the messages in this particular folder, all of the documents
#. * belonging to this particular author, and so on. Collections maintain
#. * indexes of their models, both in order, and for lookup by `id`.
#.
#. #__PURE__
#. *
#. * Create a new **Collection**, perhaps to contain a specific type of `model`.
#. * If a `comparator` is specified, the Collection will maintain
#. * its models in sort order, as they're added and removed.
#. * @param {Model[]} [models]
#. * @param {CollectionOptions} [options]
#.
#. *
#. * @param {Storage} storage
#.
#. *
#. * @returns {Storage} storage
#.
#. *
#. * The default model for a collection is just a **Model**.
#. * This should be overridden in most cases.
#. * @returns {typeof Model}
#.
#. *
#. * @param {Model} model
#.
#. *
#. * preinitialize is an empty function by default. You can override it with a function
#. * or object.  preinitialize will run before any instantiation logic is run in the Collection.
#.
#. *
#. * Initialize is an empty function by default. Override it with your own
#. * initialization logic.
#.
#. *
#. * The JSON representation of a Collection is an array of the
#. * models' attributes.
#. *@param {Options} options
#.
#. *
#. *@param {string} method
#. *@param {Model|Collection} model
#. *@param {Options} options
#.
#. *
#. * Add a model, or list of models to the set. `models` may be
#. * Models or raw JavaScript objects to be converted to Models, or any
#. * combination of the two.
#. *@param {Model[]|Model|Attributes|Attributes[]} models
#. *@param {Options} options
#.
#. *
#. * Remove a model, or a list of models from the set.
#. * @param {Model|Model[]} models
#. * @param {Options} options
#.
#. * @type {Model[]}
#. *
#. * Update a collection by `set`-ing a new list of models, adding new ones,
#. * removing models that are no longer present, and merging models that
#. * already exist in the collection, as necessary. Similar to **Model#set**,
#. * the core operation for updating the data contained by the collection.
#. *@param {Model[]|Model|Attributes|Attributes[]} models
#. * @param {Options} options
#.
#. * @type {Model}
#. * @type {Model[]}
#. Turn bare objects into model references, and prevent invalid models
#. from being added.
#. If a duplicate is found, prevent it from being added and
#. optionally merge it into the existing model.
#. If this is a new, valid model, push it to the `toAdd` list.
#. Remove stale models.
#. See if sorting is needed, update `length` and splice in new models.
#. Silently sort the collection if appropriate.
#. Unless silenced, it's time to fire all appropriate add/sort/update events.
#. Return the added (or merged) model (or models).
#. #__PURE__
#. *
#. * When you have more items than you want to add or remove individually,
#. * you can reset the entire set with a new list of models, without firing
#. * any granular `add` or `remove` events. Fires `reset` when finished.
#. * Useful for bulk operations and optimizations.
#. * @param {Model|Model[]} [models]
#. * @param {Options} [options]
#.
#. *
#. * Add a model to the end of the collection.
#. * @param {Model} model
#. * @param {Options} [options]
#.
#. *
#. * Remove a model from the end of the collection.
#. * @param {Options} [options]
#.
#. *
#. * Add a model to the beginning of the collection.
#. * @param {Model} model
#. * @param {Options} [options]
#.
#. *
#. * Remove a model from the beginning of the collection.
#. * @param {Options} [options]
#.
#. * Slice out a sub-array of models from the collection.
#. *
#. * @param {Function|Object} callback
#. * @param {any} thisArg
#.
#. *
#. * @param {Function} pred
#.
#. *
#. * @param {Model[]} values
#.
#. *
#. * @param {Function|Object} pred
#.
#. *
#. * @param {number} fromIndex
#.
#. *
#. * @param {Function|string|RegExp} pred
#. * @param {number} fromIndex
#.
#. *
#. * @param {number} fromIndex
#.
#. *
#. * @param {Function|string|RegExp} pred
#.
#. *
#. * Get a model from the set by id, cid, model object with id or cid
#. * properties, or an attributes object that is transformed through modelId.
#. * @param {string|number|Object|Model} obj
#.
#. *
#. * Returns `true` if the model is in the collection.
#. * @param {string|number|Object|Model} obj
#.
#. *
#. * Get the model at the given index.
#. * @param {number} index
#.
#. *
#. * Return models with matching attributes. Useful for simple cases of
#. * `filter`.
#. * @param {Attributes} attrs
#. * @param {boolean} [first]
#.
#. *
#. * Return the first model with matching attributes. Useful for simple cases
#. * of `find`.
#. * @param {Attributes} attrs
#.
#. *
#. * @param {Attributes} predicate
#. * @param {number} [fromIndex]
#.
#. *
#. * Force the collection to re-sort itself. You don't need to call this under
#. * normal circumstances, as the set will maintain sort order as each item
#. * is added.
#. * @param {Options} [options]
#.
#. Run sort based on type of `comparator`.
#. *
#. * Pluck an attribute from each model in the collection.
#. * @param {string} attr
#.
#. *
#. * Fetch the default set of models for this collection, resetting the
#. * collection when they arrive. If `reset: true` is passed, the response
#. * data will be passed through the `reset` method instead of `set`.
#. * @param {Options} options
#.
#. eslint-disable-next-line @typescript-eslint/no-this-alias
#. *
#. * Create a new instance of a model in this collection. Add the model to the
#. * collection immediately, unless `wait: true` is passed, in which case we
#. * wait for the server to agree.
#. * @param {Model|Attributes} model
#. * @param {Options} [options]
#.
#. eslint-disable-next-line @typescript-eslint/no-this-alias
#. *
#. * **parse** converts a response into a list of models to be added to the
#. * collection. The default implementation is just to pass it through.
#. * @param {Object} resp
#. * @param {Options} [options]
#.
#. *
#. * Define how to uniquely identify models in the collection.
#. * @param {Attributes} attrs
#.
#. * Get an iterator of all models in this collection.
#. * Get an iterator of all model IDs in this collection.
#. * Get an iterator of all [ID, model] tuples in this collection.
#. *
#. * Private method to reset all internal state. Called when the collection
#. * is first initialized or reset.
#.
#. *
#. * @param {Attributes} attrs
#. * @param {Options} [options]
#.
#. *
#. * Prepare a hash of attributes (or other model) to be added to this
#. * collection.
#. * @param {Attributes|Model} attrs
#. * @param {Options} [options]
#. * @return {Model}
#.
#. * @type {Model}
#. *
#. * Internal method called by both remove and set.
#. * @param {Model[]} models
#. * @param {Options} [options]
#.
#. Remove references before triggering 'remove' event to prevent an
#. infinite loop. #3693
#. *
#. * Method for checking whether an object should be considered a model for
#. * the purposes of adding to the collection.
#. * @param {any} model
#.
#. *
#. * Internal method to create a model's ties to a collection.
#. * @param {Model} model
#. * @param {Options} [options]
#.
#. *
#. * Internal method to sever a model's ties to a collection.
#. * @private
#. * @param {Model} model
#. * @param {Options} [options]
#.
#. *
#. * Internal method called every time a model in the set fires an event.
#. * Sets need to update their indexes when models change ids. All other
#. * events simply proxy through. "add" and "remove" events that originate
#. * in other collections are ignored.
#. * @private
#. * @param {any} event
#. * @param {Model} model
#. * @param {Collection} collection
#. * @param {Options} [options]
#.
#. This "enum" defines the three possible kinds of values which can be emitted
#. by a CollectionIterator that correspond to the values(), keys() and entries()
#. methods on Collection, respectively.
#. #__PURE__
#. *
#. * A CollectionIterator implements JavaScript's Iterator protocol, allowing the
#. * use of `for of` loops in modern browsers and interoperation between
#. * Collection and other JavaScript functions and third-party libraries
#. * which can operate on Iterables.
#. * @param {Collection} collection
#. * @param {Number} kind
#.
#. Only continue iterating if the iterated collection is long enough.
#. Construct a value depending on what kind of values should be iterated.
#. ITERATOR_KEYSVALUES
#. Once exhausted, remove the reference to the collection so future
#. calls to the next method always return done.
#. CONCATENATED MODULE: ./node_modules/@converse/skeletor/src/index.js
#. global global
#. Establish the root object, `window` (`self`) in the browser, or `global` on the server.
#. We use `self` instead of `window` for `WebWorker` support.
#. Current version of the library. Keep in sync with `package.json`.
#. Save the previous value of the `Skeletor` variable, so that it can be
#. restored later on, if `noConflict` is used.
#. Runs Skeletor.js in *noConflict* mode, returning the `Skeletor` variable
#. to its previous owner. Returns a reference to this Skeletor object.
#. harmony default export
#. unused pure expression or super
#. CONCATENATED MODULE: ./src/headless/shared/settings/constants.js
#. *
#. * @typedef { Object } ConfigurationSettings
#. * Converse's core configuration values
#. * @property { Boolean } [allow_non_roster_messaging=false]
#. * @property { Boolean } [allow_url_history_change=true]
#. * @property { String } [assets_path='/dist']
#. * @property { ('login'|'prebind'|'anonymous'|'external') } [authentication='login']
#. * @property { Boolean } [auto_login=false] - Currently only used in connection with anonymous login
#. * @property { Boolean } [reuse_scram_keys=true] - Save SCRAM keys after login to allow for future auto login
#. * @property { Boolean } [auto_reconnect=true]
#. * @property { Array<String>} [blacklisted_plugins]
#. * @property { Boolean } [clear_cache_on_logout=false]
#. * @property { Object } [connection_options]
#. * @property { String } [credentials_url] - URL from where login credentials can be fetched
#. * @property { Boolean } [discover_connection_methods=true]
#. * @property { RegExp } [geouri_regex]
#. * @property { RegExp } [geouri_replacement='https://www.openstreetmap.org/?mlat=$1&mlon=$2#map=18/$1/$2']
#. * @property { String } [i18n]
#. * @property { String } [jid]
#. * @property { Boolean } [keepalive=true]
#. * @property { ('debug'|'info'|'eror') } [loglevel='info']
#. * @property { Array<String> } [locales]
#. * @property { String } [nickname]
#. * @property { String } [password]
#. * @property { ('IndexedDB'|'localStorage') } [persistent_store='IndexedDB']
#. * @property { String } [rid]
#. * @property { Element } [root=window.document]
#. * @property { String } [sid]
#. * @property { Boolean } [singleton=false]
#. * @property { Boolean } [strict_plugin_dependencies=false]
#. * @property { ('overlayed'|'fullscreen'|'mobile') } [view_mode='overlayed']
#. * @property { String } [websocket_url]
#. * @property { Array<String>} [whitelisted_plugins]
#.
#. Available values are "login", "prebind", "anonymous" and "external".
#. Currently only used in connection with anonymous login
#. URL from where login credentials can be fetched
#. Disabled UI transition effects. Mainly used for tests.
#. Choices are 'overlayed', 'fullscreen', 'mobile'
#. CONCATENATED MODULE: ./src/headless/utils/object.js
#. *
#. * Merge the second object into the first one.
#. * @param {Object} dst
#. * @param {Object} src
#.
#. CONCATENATED MODULE: ./src/headless/shared/settings/utils.js
#. Container for settings passed in via converse.initialize
#. #__PURE__
#. Allow only whitelisted settings to be overwritten via converse.initialize
#. When updating the settings, we need to avoid overwriting the
#. initialization_settings (i.e. the settings passed in via converse.initialize).
#. *
#. * @param {string} name
#. * @param {Function} func
#. * @param {any} context
#.
#. *
#. * @param {string} name
#. * @param {Function} func
#.
#. *
#. * @param {Object|string} key An object containing config settings or alternatively a string key
#. * @param {string} [val] The value, if the previous parameter is a key
#.
#. eslint-disable-line no-eq-null
#. CONCATENATED MODULE: ./src/headless/shared/settings/api.js
#. *
#. * @typedef {import('@converse/skeletor').Model} Model
#.
#. *
#. * This grouping allows access to the
#. * [configuration settings](/docs/html/configuration.html#configuration-settings)
#. * of Converse.
#. *
#. * @namespace _converse.api.settings
#. * @memberOf _converse.api
#.
#. *
#. * Allows new configuration settings to be specified, or new default values for
#. * existing configuration settings to be specified.
#. *
#. * Note, calling this method *after* converse.initialize has been
#. * called will *not* change the initialization settings provided via
#. * `converse.initialize`.
#. *
#. * @method api.settings.extend
#. * @param { object } settings The configuration settings
#. * @example
#. * api.settings.extend({
#. *    'enable_foo': true
#. * });
#. *
#. * // The user can then override the default value of the configuration setting when
#. * // calling `converse.initialize`.
#. * converse.initialize({
#. *     'enable_foo': false
#. * });
#.
#. *
#. * @method _converse.api.settings.get
#. * @param {string} [key]
#. * @returns {*} Value of the particular configuration setting, or all
#. *  settings if no key was specified.
#. * @example api.settings.get("play_sounds");
#.
#. *
#. * Set one or many configuration settings.
#. *
#. * Note, this is not an alternative to calling {@link converse.initialize}, which still needs
#. * to be called. Generally, you'd use this method after Converse is already
#. * running and you want to change the configuration on-the-fly.
#. *
#. * @method _converse.api.settings.set
#. * @param { Object | string } [settings_or_key]
#. *  An object containing configuration settings.
#. *  Alternatively to passing in an object, you can pass in a key and a value.
#. * @param { string } [value]
#. * @example api.settings.set("play_sounds", true);
#. * @example
#. * api.settings.set({
#. *     "play_sounds": true,
#. *     "hide_offline_users": true
#. * });
#.
#. *
#. * The `listen` namespace exposes methods for creating event listeners
#. * (aka handlers) for events related to settings.
#. *
#. * @namespace _converse.api.settings.listen
#. * @memberOf _converse.api.settings
#.
#. *
#. * Register an event listener for the passed in event.
#. * @method _converse.api.settings.listen.on
#. * @param { ('change') } name - The name of the event to listen for.
#. *  Currently there is only the 'change' event.
#. * @param { Function } handler - The event handler function
#. * @param { Object } [context] - The context of the `this` attribute of the
#. *  handler function.
#. * @example api.settings.listen.on('change', callback);
#.
#. *
#. * To stop listening to an event, you can use the `not` method.
#. * @method _converse.api.settings.listen.not
#. * @param { String } name The event's name
#. * @param { Function } handler The callback method that is to no longer be called when the event fires
#. * @example api.settings.listen.not('change', callback);
#.
#. CONCATENATED MODULE: ./src/headless/utils/session.js
#. *
#. * @typedef {module:shared-api-public.ConversePrivateGlobal} ConversePrivateGlobal
#.
#. *
#. * We distinguish between UniView and MultiView instances.
#. *
#. * UniView means that only one chat is visible, even though there might be multiple ongoing chats.
#. * MultiView means that multiple chats may be visible simultaneously.
#.
#. Pagehide gets thrown in more cases than unload. Specifically it
#. gets thrown when the page is cached and not just
#. closed/destroyed. It's the only viable event on mobile Safari.
#. https://www.webkit.org/blog/516/webkit-page-cache-ii-the-unload-event/
#. *
#. * @param {ConversePrivateGlobal} _converse
#. * @param {string} name
#.
#. *
#. * @param {ConversePrivateGlobal} _converse
#. * @returns {boolean}
#.
#. *
#. * @param {ConversePrivateGlobal} _converse
#.
#. *
#. * @param {ConversePrivateGlobal} _converse
#.
#. #__PURE__
#. *
#. * Synchronouse event triggered once the user session has been cleared,
#. * for example when the user has logged out or when Converse has
#. * disconnected for some other reason.
#. * @event _converse#clearSession
#.
#. CONCATENATED MODULE: ./src/headless/shared/_converse.js
#. *
#. * @module:shared.converse
#. * @typedef {import('@converse/skeletor').Storage} Storage
#. * @typedef {import('@converse/skeletor').Collection} Collection
#. * @typedef {import('../plugins/disco/index').DiscoState} DiscoState
#. * @typedef {import('../plugins/status/status').default} XMPPStatus
#. * @typedef {import('../plugins/vcard/vcard').default} VCards
#.
#. *
#. * A private, closured namespace containing the private api (via {@link _converse.api})
#. * as well as private methods and internal data-structures.
#. * @global
#. * @namespace _converse
#.
#. #__PURE__
#. * @type {Record<string, Storage.LocalForage>}
#. DEPRECATED. Set here so that tests can override
#. Set as module attr so that we can override in tests.
#. TODO: replace with config settings
#. * @type {module:shared-api.APIEndpoint}
#. *
#. * Namespace for storing translated strings.
#. *
#. * @typedef {Record<string, string>} UserMessage
#. * @typedef {Record<string, string|UserMessage>} UserMessages
#.
#. * @type {UserMessages}
#. *
#. * Namespace for storing code that might be useful to 3rd party
#. * plugins. We want to make it possible for 3rd party plugins to have
#. * access to code (e.g. classes) from converse.js without having to add
#. * converse.js as a dependency.
#.
#. * @type {Record<string, Object>}
#. *
#. * Namespace for storing the state, as represented by instances of
#. * Models and Collections.
#. *
#. * @typedef {Object & Record<string, Collection|Model|VCards|XMPPStatus|DiscoState>} ConverseState
#. * @property {VCards} [vcards]
#. * @property {XMPPStatus} xmppstatus
#. * @property {DiscoState} disco
#.
#. * @type {ConverseState}
#. XXX DEPRECATED
#. *
#. * Translate the given string based on the current locale.
#. * @method __
#. * @memberOf _converse
#. * @param {...String} args
#.
#. *
#. * A no-op method which is used to signal to gettext that the passed in string
#. * should be included in the pot translation file.
#. *
#. * In contrast to the double-underscore method, the triple underscore method
#. * doesn't actually translate the strings.
#. *
#. * One reason for this method might be because we're using strings we cannot
#. * send to the translation function because they require variable interpolation
#. * and we don't yet have the variables at scan time.
#. *
#. * @method ___
#. * @memberOf _converse
#. * @param {String} str
#.
#. Make _converse pluggable
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/shared/api/events.js
#. harmony default export
#. *
#. * Lets you trigger events, which can be listened to via
#. * {@link _converse.api.listen.on} or {@link _converse.api.listen.once}
#. * (see [_converse.api.listen](http://localhost:8000/docs/html/api/-_converse.api.listen.html)).
#. *
#. * Some events also double as promises and can be waited on via {@link _converse.api.waitUntil}.
#. *
#. * @typedef {object} Options
#. * @property {boolean} [Options.synchronous] - Whether the event is synchronous or not.
#. *  When a synchronous event is fired, a promise will be returned
#. *  by {@link _converse.api.trigger} which resolves once all the
#. *  event handlers' promises have been resolved.
#. *
#. * @method _converse.api.trigger
#. * @param {string} name - The event name
#.
#. #__PURE__
#. * @type {Options}
#. *
#. * Triggers a hook which can be intercepted by registered listeners via
#. * {@link _converse.api.listen.on} or {@link _converse.api.listen.once}.
#. * (see [_converse.api.listen](http://localhost:8000/docs/html/api/-_converse.api.listen.html)).
#. * A hook is a special kind of event which allows you to intercept a data
#. * structure in order to modify it, before passing it back.
#. * @async
#. * @param {string} name - The hook name
#. * @param {...any} context - The context to which the hook applies
#. *  (could be for example, a {@link _converse.ChatBox}).
#. * @param {...any} data - The data structure to be intercepted and modified by the hook listeners.
#. * @returns {Promise<any>} - A promise that resolves with the modified data structure.
#.
#. Create a chain of promises, with each one feeding its output to
#. the next. The first input is a promise with the original data
#. sent to this hook.
#. *
#. * Converse emits events to which you can subscribe to.
#. *
#. * The `listen` namespace exposes methods for creating event listeners
#. * (aka handlers) for these events.
#. *
#. * @namespace _converse.api.listen
#. * @memberOf _converse
#.
#. *
#. * Lets you listen to an event exactly once.
#. * @method _converse.api.listen.once
#. * @param {string} name The event's name
#. * @param {function} callback The callback method to be called when the event is emitted.
#. * @param {object} [context] The value of the `this` parameter for the callback.
#. * @example _converse.api.listen.once('message', function (messageXML) { ... });
#.
#. *
#. * Lets you subscribe to an event.
#. * Every time the event fires, the callback method specified by `callback` will be called.
#. * @method _converse.api.listen.on
#. * @param {string} name The event's name
#. * @param {function} callback The callback method to be called when the event is emitted.
#. * @param {object} [context] The value of the `this` parameter for the callback.
#. * @example _converse.api.listen.on('message', function (messageXML) { ... });
#.
#. *
#. * To stop listening to an event, you can use the `not` method.
#. * @method _converse.api.listen.not
#. * @param {string} name The event's name
#. * @param {function} callback The callback method that is to no longer be called when the event fires
#. * @example _converse.api.listen.not('message', function (messageXML);
#.
#. *
#. * An options object which lets you set filter criteria for matching
#. * against stanzas.
#. * @typedef {object} MatchingOptions
#. * @property {string} [ns] - The namespace to match against
#. * @property {string} [type] - The stanza type to match against
#. * @property {string} [id] - The stanza id to match against
#. * @property {string} [from] - The stanza sender to match against
#.
#. *
#. * Subscribe to an incoming stanza
#. * Every a matched stanza is received, the callback method specified by
#. * `callback` will be called.
#. * @method _converse.api.listen.stanza
#. * @param {string} name The stanza's name
#. * @param {MatchingOptions|Function} options Matching options or callback
#. * @param {function} handler The callback method to be called when the stanza appears
#.
#. * @type {Function}
#. CONCATENATED MODULE: ./node_modules/lodash-es/debounce.js
#. * Error message constants.
#. Built-in method references for those with the same name as other `lodash` methods.
#. *
#. * Creates a debounced function that delays invoking `func` until after `wait`
#. * milliseconds have elapsed since the last time the debounced function was
#. * invoked. The debounced function comes with a `cancel` method to cancel
#. * delayed `func` invocations and a `flush` method to immediately invoke them.
#. * Provide `options` to indicate whether `func` should be invoked on the
#. * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
#. * with the last arguments provided to the debounced function. Subsequent
#. * calls to the debounced function return the result of the last `func`
#. * invocation.
#. *
#. * **Note:** If `leading` and `trailing` options are `true`, `func` is
#. * invoked on the trailing edge of the timeout only if the debounced function
#. * is invoked more than once during the `wait` timeout.
#. *
#. * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
#. * until to the next tick, similar to `setTimeout` with a timeout of `0`.
#. *
#. * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
#. * for details over the differences between `_.debounce` and `_.throttle`.
#. *
#. * @static
#. * @memberOf _
#. * @since 0.1.0
#. * @category Function
#. * @param {Function} func The function to debounce.
#. * @param {number} [wait=0] The number of milliseconds to delay.
#. * @param {Object} [options={}] The options object.
#. * @param {boolean} [options.leading=false]
#. *  Specify invoking on the leading edge of the timeout.
#. * @param {number} [options.maxWait]
#. *  The maximum time `func` is allowed to be delayed before it's invoked.
#. * @param {boolean} [options.trailing=true]
#. *  Specify invoking on the trailing edge of the timeout.
#. * @returns {Function} Returns the new debounced function.
#. * @example
#. *
#. * // Avoid costly calculations while the window size is in flux.
#. * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
#. *
#. * // Invoke `sendMail` when clicked, debouncing subsequent calls.
#. * jQuery(element).on('click', _.debounce(sendMail, 300, {
#. *   'leading': true,
#. *   'trailing': false
#. * }));
#. *
#. * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
#. * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
#. * var source = new EventSource('/stream');
#. * jQuery(source).on('message', debounced);
#. *
#. * // Cancel the trailing debounced invocation.
#. * jQuery(window).on('popstate', debounced.cancel);
#.
#. Reset any `maxWait` timer.
#. Start the timer for the trailing edge.
#. Invoke the leading edge.
#. Either this is the first call, activity has stopped and we're at the
#. trailing edge, the system time has gone backwards and we're treating
#. it as the trailing edge, or we've hit the `maxWait` limit.
#. Restart the timer.
#. Only invoke if we have `lastArgs` which means `func` has been
#. debounced at least once.
#. Handle invocations in a tight loop.
#. harmony default export
#. EXTERNAL MODULE: ./node_modules/sizzle/dist/sizzle.js
#. #__PURE__
#. EXTERNAL MODULE: ./node_modules/localforage-webextensionstorage-driver/local.js
#. EXTERNAL MODULE: ./node_modules/localforage-webextensionstorage-driver/sync.js
#. CONCATENATED MODULE: ./src/headless/utils/storage.js
#. CONCATENATED MODULE: ./src/headless/shared/connection/utils.js
#. CONCATENATED MODULE: ./src/headless/utils/jid.js
#. *
#. * @param {string} jid
#.
#. CONCATENATED MODULE: ./src/headless/utils/init.js
#. *
#. * @typedef {module:shared.converse.ConversePrivateGlobal} ConversePrivateGlobal
#.
#. *
#. * Initializes the plugins for the Converse instance.
#. * @param {ConversePrivateGlobal} _converse
#. * @fires _converse#pluginsInitialized - Triggered once all plugins have been initialized.
#. * @memberOf _converse
#.
#. If initialize gets called a second time (e.g. during tests), then we
#. need to re-apply all plugins (for a new converse instance), and we
#. therefore need to clear this array that prevents plugins from being
#. initialized twice.
#. If initialize is called for the first time, then this array is empty
#. in any case.
#. *
#. * Triggered once all plugins have been initialized. This is a useful event if you want to
#. * register event handlers but would like your own handlers to be overridable by
#. * plugins. In that case, you need to first wait until all plugins have been
#. * initialized, so that their overrides are active. One example where this is used
#. * is in [converse-notifications.js](https://github.com/jcbrand/converse.js/blob/master/src/converse-notification.js)`.
#. *
#. * Also available as an [ES2015 Promise](http://es6-features.org/#PromiseUsage)
#. * which can be listened to with `_converse.api.waitUntil`.
#. *
#. * @event _converse#pluginsInitialized
#. * @memberOf _converse
#. * @example _converse.api.listen.on('pluginsInitialized', () => { ... });
#.
#. *
#. * @param {ConversePrivateGlobal} _converse
#.
#. *
#. * @param {ConversePrivateGlobal} _converse
#.
#. #__PURE__
#. The client config refers to configuration of the client which is
#. * independent of any particular user.
#. * What this means is that config values need to persist across
#. * user sessions.
#.
#. XXX DEPRECATED
#. *
#. * Triggered once the XMPP-client configuration has been initialized.
#. * The client configuration is independent of any particular and its values
#. * persist across user sessions.
#. *
#. * @event _converse#clientConfigInitialized
#. * @example
#. * _converse.api.listen.on('clientConfigInitialized', () => { ... });
#.
#. *
#. * Initializes persistent storage
#. * @param {ConversePrivateGlobal} _converse
#. * @param {string} store_name - The name of the store.
#.
#. #__PURE__
#. default
#. default
#. *
#. * @param {ConversePrivateGlobal} _converse
#. * @param {string} jid
#.
#. TODO: Storing directly on _converse is deprecated
#. We use the `active` flag to determine whether we should use the values from sessionStorage.
#. When "cloning" a tab (e.g. via middle-click), the `active` flag will be set and we'll create
#. a new empty user session, otherwise it'll be false and we can re-use the user session.
#. When the tab is reloaded, the `active` flag is set to `false`.
#. Set JID on the connection object so that when we call `connection.bind`
#. the new resource is found by Strophe.js and sent to the XMPP server.
#. *
#. * Stores the passed in JID for the current user, potentially creating a
#. * resource if the JID is bare.
#. *
#. * Given that we can only create an XMPP connection if we know the domain of
#. * the server connect to and we only know this once we know the JID, we also
#. * call {@link api.connection.init} (if necessary) to make sure that the
#. * connection is set up.
#. *
#. * @emits _converse#setUserJID
#. * @param {string} jid
#.
#. *
#. * @param {ConversePrivateGlobal} _converse
#. * @param {string} jid
#.
#. #__PURE__
#. *
#. * Triggered whenever the user's JID has been updated
#. * @event _converse#setUserJID
#.
#. *
#. * @param {ConversePrivateGlobal} _converse
#.
#. #__PURE__
#. If the `active` flag is set, it means this tab was cloned from
#. another (e.g. via middle-click), and its session data was copied over.
#. Set `active` flag to false when the tab gets reloaded
#. *
#. * Triggered once the user's session has been initialized. The session is a
#. * cache which stores information about the user's current session.
#. * @event _converse#userSessionInitialized
#. * @memberOf _converse
#.
#. *
#. * Plugins can listen to this event as cue to register their
#. * global event handlers.
#. * @event _converse#registeredGlobalEventHandlers
#. * @example _converse.api.listen.on('registeredGlobalEventHandlers', () => { ... });
#.
#. *
#. * @param {ConversePrivateGlobal} _converse
#.
#. *
#. * Make sure everything is reset in case this is a subsequent call to
#. * converse.initialize (happens during tests).
#. * @param {ConversePrivateGlobal} _converse
#.
#. *
#. * Fetches login credentials from the server.
#. * @param {number} [wait=0]
#. *  The time to wait and debounce subsequent calls to this function before making the request.
#. * @returns {Promise<{jid: string, password: string}>}
#. *  A promise that resolves with the provided login credentials (JID and password).
#. * @throws {Error} If the request fails or returns an error status.
#.
#. #__PURE__
#. #__PURE__
#. #__PURE__
#. *
#. * *Hook* which allows modifying the server request
#. * @event _converse#beforeFetchLoginCredentials
#.
#. #__PURE__
#. If unsuccessful, we wait 2 seconds between subsequent attempts to
#. fetch the credentials.
#. #__PURE__
#. #__PURE__
#. *
#. * Fetch the stored SCRAM keys for the given JID, if available.
#. *
#. * The user's plaintext password is not stored, nor any material from which
#. * the user's plaintext password could be recovered.
#. *
#. * @param { String } jid - The XMPP address for which to fetch the SCRAM keys
#. * @returns { Promise } A promise which resolves once we've fetched the previously
#. *  used login keys.
#.
#. #__PURE__
#. XXX: If EITHER ``keepalive`` or ``auto_login`` is ``true`` and
#. ``authentication`` is set to ``login``, then Converse will try to log the user in,
#. since we don't have a way to distinguish between wether we're
#. restoring a previous session (``keepalive``) or whether we're
#. automatically setting up a new session (``auto_login``).
#. So we can't do the check (!automatic || _converse.api.settings.get("auto_login")) here.
#. *
#. * @param { Object } [credentials]
#. * @param { string } credentials.password
#. * @param { Object } credentials.password
#. * @param { string } credentials.password.ck
#. * @returns { Promise<void> }
#.
#. #__PURE__
#. #__PURE__
#. * @param {string} status
#. CONCATENATED MODULE: ./src/headless/shared/connection/index.js
#. *
#. * The Connection class manages the connection to the XMPP server. It's
#. * agnostic concerning the underlying protocol (i.e. websocket, long-polling
#. * via BOSH or websocket inside a shared worker).
#.
#. #__PURE__
#. For new sessions, we need to send out a presence stanza to notify
#. the server/network that we're online.
#. When re-attaching to an existing session we don't need to again send out a presence stanza,
#. because it's as if "we never left" (see onConnectStatusChanged).
#. #__PURE__
#. *
#. * Synchronous event triggered before we send an IQ to bind the user's
#. * JID resource for this session.
#. * @event _converse#beforeResourceBinding
#.
#. #__PURE__
#. TODO: support multiple endpoints
#. *
#. * Adds support for XEP-0156 by quering the XMPP server for alternate
#. * connection methods. This allows users to use the websocket or BOSH
#. * connection of their own XMPP server instead of a proxy provided by the
#. * host of Converse.js.
#. * @method Connnection.discoverConnectionMethods
#. * @param {string} domain
#.
#. #__PURE__
#. Use XEP-0156 to check whether this host advertises websocket or BOSH connection methods.
#. * @type {RequestMode}
#. *
#. * Establish a new XMPP session by logging in with the supplied JID and
#. * password.
#. * @method Connnection.connect
#. * @param {String} jid
#. * @param {String} password
#. * @param {Function} callback
#.
#. #__PURE__
#. *
#. * @param {string} reason
#.
#. *
#. * Switch to a different transport if a service URL is available for it.
#. *
#. * When reconnecting with a new transport, we call setUserJID
#. * so that a new resource is generated, to avoid multiple
#. * server-side sessions with the same resource.
#. *
#. * We also call `_proto._doDisconnect` so that connection event handlers
#. * for the old transport are removed.
#.
#. #__PURE__
#. #__PURE__
#. *
#. * Triggered when the connection has dropped, but Converse will attempt
#. * to reconnect again.
#. * @event _converse#will-reconnect
#.
#. *
#. * Called as soon as a new connection has been established, either
#. * by logging in or by attaching to an existing BOSH session.
#. * @method Connection.onConnected
#. * @param {Boolean} [reconnecting] - Whether Converse.js reconnected from an earlier dropped session.
#.
#. #__PURE__
#. Solves problem of returned PubSub BOSH response not received by browser
#. Save the current JID in persistent storage so that we can attempt to
#. recreate the session from SCRAM keys
#. *
#. * Synchronous event triggered after we've sent an IQ to bind the
#. * user's JID resource for this session.
#. * @event _converse#afterResourceBinding
#.
#. *
#. * After the connection has dropped and converse.js has reconnected.
#. * Any Strophe stanza handlers (as registered via `converse.listen.stanza`) will
#. * have to be registered anew.
#. * @event _converse#reconnected
#. * @example _converse.api.listen.on('reconnected', () => { ... });
#.
#. *
#. * Triggered after the connection has been established and Converse
#. * has got all its ducks in a row.
#. * @event _converse#initialized
#.
#. *
#. * Used to keep track of why we got disconnected, so that we can
#. * decide on what the next appropriate action is (in onDisconnected)
#. * @method Connection.setDisconnectionCause
#. * @param {Number|'logout'} [cause] - The status number as received from Strophe.
#. * @param {String} [reason] - An optional user-facing message as to why
#. *  there was a disconnection.
#. * @param {Boolean} [override] - An optional flag to replace any previous
#. *  disconnection cause and reason.
#.
#. *
#. * @param {Number} [status] - The status number as received from Strophe.
#. * @param {String} [message] - An optional user-facing message
#.
#. #__PURE__
#. Properly tear down the session so that it's possible to manually connect again.
#. *
#. * Triggered after converse.js has disconnected from the XMPP server.
#. * @event _converse#disconnected
#. * @memberOf _converse
#. * @example _converse.api.listen.on('disconnected', () => { ... });
#.
#. *
#. * Gets called once strophe's status reaches Strophe.Status.DISCONNECTED.
#. * Will either start a teardown process for converse.js or attempt
#. * to reconnect.
#. * @method onDisconnected
#.
#. If `credentials_url` is set, we reconnect, because we might
#. be receiving expirable tokens from the credentials_url.
#.
#. If `authentication` is anonymous, we reconnect because we
#. might have tried to attach with stale BOSH session tokens
#. or with a cached JID and password
#. Don't try to reconnect if we were never connected to begin
#. with, otherwise an infinite loop can occur (e.g. when the
#. BOSH service URL returns a 404).
#. *
#. * Callback method called by Strophe as the Connection goes
#. * through various states while establishing or tearing down a
#. * connection.
#. * @param {Number} status
#. * @param {String} message
#.
#. A different tab must have attached, so nothing to do for us here.
#. No need to send an initial presence stanza when
#. we're restoring an existing session.
#: dist/converse-no-dependencies.js:14561
#: dist/converse-no-dependencies.js:14570
#: dist/converse-no-dependencies.js:39400
#: dist/converse-no-dependencies.js:39454
msgid "An error occurred while connecting to the chat server."
msgstr ""

#: dist/converse-no-dependencies.js:14570
#: dist/converse-no-dependencies.js:39461
msgid "Your XMPP address and/or password is incorrect. Please try again."
msgstr ""

#: dist/converse-no-dependencies.js:14570
#: dist/converse-no-dependencies.js:39470
#, javascript-format
msgid "Sorry, we could not connect to the XMPP host with domain: %1$s"
msgstr ""

#: dist/converse-no-dependencies.js:14570
#: dist/converse-no-dependencies.js:39472
msgid "The XMPP server did not offer a supported authentication mechanism"
msgstr ""

#. *
#. * @param {string} type
#.
#. Not binding means that the session was resumed.
#. *
#. * The MockConnection class is used during testing, to mock an XMPP connection.
#. * @class
#.
#. #__PURE__
#. eslint-disable-next-line @typescript-eslint/no-empty-function
#. eslint-disable-next-line @typescript-eslint/no-empty-function
#. eslint-disable-line class-methods-use-this
#. Don't attempt to send out stanzas
#. #__PURE__
#. CONCATENATED MODULE: ./src/headless/shared/connection/api.js
#. *
#. * This grouping collects API functions related to the XMPP connection.
#. *
#. * @namespace api.connection
#. * @memberOf api
#.
#. harmony default export
#. *
#. * @method api.connection.init
#. * @memberOf api.connection
#. * @param {string} [jid]
#. * @return {Connection|MockConnection}
#.
#. *
#. * Triggered once the `Connection` constructor has been initialized, which
#. * will be responsible for managing the connection to the XMPP server.
#. *
#. * @event connectionInitialized
#.
#. *
#. * @method api.connection.authenticated
#. * @memberOf api.connection
#. * @returns {boolean} Whether we're authenticated to the XMPP server or not
#.
#. *
#. * @method api.connection.connected
#. * @memberOf api.connection
#. * @returns {boolean} Whether there is an established connection or not.
#.
#. *
#. * Terminates the connection.
#. *
#. * @method api.connection.disconnect
#. * @memberOf api.connection
#.
#. *
#. * Can be called once the XMPP connection has dropped and we want
#. * to attempt reconnection.
#. * Only needs to be called once, if reconnect fails Converse will
#. * attempt to reconnect every two seconds, alternating between BOSH and
#. * Websocket if URLs for both were provided.
#. * @method reconnect
#. * @memberOf api.connection
#.
#. *
#. * Utility method to determine the type of connection we have
#. * @method isType
#. * @memberOf api.connection
#. * @returns {boolean}
#.
#. CONCATENATED MODULE: ./src/headless/utils/promise.js
#. *
#. * Clears the specified timeout and interval.
#. * @method u#clearTimers
#. * @param {ReturnType<typeof setTimeout>} timeout - Id if the timeout to clear.
#. * @param {ReturnType<typeof setInterval>} interval - Id of the interval to clear.
#. * @copyright Simen Bekkhus 2016
#. * @license MIT
#.
#. *
#. * Creates a {@link Promise} that resolves if the passed in function returns a truthy value.
#. * Rejects if it throws or does not return truthy within the given max_wait.
#. * @param { Function } func - The function called every check_delay,
#. *  and the result of which is the resolved value of the promise.
#. * @param { number } [max_wait=300] - The time to wait before rejecting the promise.
#. * @param { number } [check_delay=3] - The time to wait before each invocation of {func}.
#. * @returns {Promise} A promise resolved with the value of func,
#. *  or rejected with the exception thrown by it or it times out.
#. * @copyright Simen Bekkhus 2016
#. * @license MIT
#.
#. Run the function once without setting up any listeners in case it's already true
#. CONCATENATED MODULE: ./src/headless/shared/api/promise.js
#. harmony default export
#. *
#. * Converse and its plugins trigger various events which you can listen to via the
#. * {@link _converse.api.listen} namespace.
#. *
#. * Some of these events are also available as [ES2015 Promises](http://es6-features.org/#PromiseUsage)
#. * although not all of them could logically act as promises, since some events
#. * might be fired multpile times whereas promises are to be resolved (or
#. * rejected) only once.
#. *
#. * Events which are also promises include:
#. *
#. * * [cachedRoster](/docs/html/events.html#cachedroster)
#. * * [chatBoxesFetched](/docs/html/events.html#chatBoxesFetched)
#. * * [pluginsInitialized](/docs/html/events.html#pluginsInitialized)
#. * * [roster](/docs/html/events.html#roster)
#. * * [rosterContactsFetched](/docs/html/events.html#rosterContactsFetched)
#. * * [rosterGroupsFetched](/docs/html/events.html#rosterGroupsFetched)
#. * * [rosterInitialized](/docs/html/events.html#rosterInitialized)
#. *
#. * The various plugins might also provide promises, and they do this by using the
#. * `promises.add` api method.
#. *
#. * @namespace _converse.api.promises
#. * @memberOf _converse.api
#.
#. *
#. * By calling `promises.add`, a new [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)
#. * is made available for other code or plugins to depend on via the
#. * {@link _converse.api.waitUntil} method.
#. *
#. * Generally, it's the responsibility of the plugin which adds the promise to
#. * also resolve it.
#. *
#. * This is done by calling {@link _converse.api.trigger}, which not only resolves the
#. * promise, but also emits an event with the same name (which can be listened to
#. * via {@link _converse.api.listen}).
#. *
#. * @method _converse.api.promises.add
#. * @param {string|array} [promises] The name or an array of names for the promise(s) to be added
#. * @param {boolean} [replace=true] Whether this promise should be replaced with a new one when the user logs out.
#. * @example _converse.api.promises.add('foo-completed');
#.
#. *
#. * Wait until a promise is resolved or until the passed in function returns
#. * a truthy value.
#. * @method _converse.api.waitUntil
#. * @param {string|function} condition - The name of the promise to wait for,
#. * or a function which should eventually return a truthy value.
#. * @returns {Promise}
#.
#. * @type {Function}
#. CONCATENATED MODULE: ./src/headless/shared/errors.js
#. *
#. * Custom error for indicating timeouts
#. * @namespace converse.env
#.
#. #__PURE__
#. *
#. * @param  {string} message
#.
#. #__PURE__
#. CONCATENATED MODULE: ./src/headless/shared/api/send.js
#. *
#. * @typedef {import('strophe.js/src/builder.js').Builder} Strophe.Builder
#.
#. harmony default export
#. *
#. * Allows you to send XML stanzas.
#. * @method _converse.api.send
#. * @param {Element|Strophe.Builder} stanza
#. * @return {void}
#. * @example
#. * const msg = converse.env.$msg({
#. *     'from': 'juliet@example.com/balcony',
#. *     'to': 'romeo@example.net',
#. *     'type':'chat'
#. * });
#. * _converse.api.send(msg);
#.
#. *
#. * Send an IQ stanza
#. * @method _converse.api.sendIQ
#. * @param {Element|Strophe.Builder} stanza
#. * @param {number} [timeout] - The default timeout value is taken from
#. *  the `stanza_timeout` configuration setting.
#. * @param {boolean} [reject=true] - Whether an error IQ should cause the promise
#. *  to be rejected. If `false`, the promise will resolve instead of being rejected.
#. * @returns {Promise} A promise which resolves (or potentially rejected) once we
#. *  receive a `result` or `error` stanza or once a timeout is reached.
#. *  If the IQ stanza being sent is of type `result` or `error`, there's
#. *  nothing to wait for, so an already resolved promise is returned.
#.
#. CONCATENATED MODULE: ./src/headless/plugins/chatboxes/utils.js
#. *
#. * @typedef {import('../chat/model.js').default} ChatBox
#.
#. *
#. * @param {string} jid
#. * @param {object} attrs
#. * @param {new (attrs: object, options: object) => ChatBox} Model
#.
#. #__PURE__
#. CONCATENATED MODULE: ./src/headless/plugins/chatboxes/api.js
#. *
#. * @typedef {import('@converse/skeletor').Model} Model
#. * @typedef {import('../chat/model.js').default} ChatBox
#.
#. *
#. * The "chatboxes" namespace.
#. *
#. * @namespace api.chatboxes
#. * @memberOf api
#.
#. harmony default export
#. *
#. * @method api.chatboxes.create
#. * @param {string|string[]} jids - A JID or array of JIDs
#. * @param {Object} attrs An object containing configuration attributes
#. * @param {new (attrs: object, options: object) => ChatBox} model - The type of chatbox that should be created
#.
#. #__PURE__
#. *
#. * @method api.chatboxes.get
#. * @param {string|string[]} [jids] - A JID or array of JIDs
#.
#. #__PURE__
#. *
#. * The "chatboxes" registry.
#. * Allows you to register more chatbox types that can be created via
#. * `api.chatboxes.create`.
#. * @namespace api.chatboxes.registry
#. * @memberOf api.chatboxes
#.
#. *
#. * @method api.chatboxes.registry.add
#. * Add another type of chatbox that can be added to this collection.
#. * This is used in the `createModel` function to determine what type of
#. * chatbox class to instantiate (e.g. ChatBox, MUC, Feed etc.) based on the
#. * passed in attributes.
#. * @param {string} type - The type name
#. * @param {Model} model - The model which will be instantiated for the given type name.
#.
#. *
#. * @method api.chatboxes.registry.get
#. * @param {string} type - The type name
#. * @return {Model} model - The model which will be instantiated for the given type name.
#.
#. CONCATENATED MODULE: ./src/headless/plugins/muc/api.js
#. *
#. * @typedef {import('./muc.js').default} MUC
#.
#. *
#. * The "rooms" namespace groups methods relevant to chatrooms
#. * (aka groupchats).
#. *
#. * @namespace api.rooms
#. * @memberOf api
#.
#. *
#. * Creates a new MUC chatroom (aka groupchat)
#. *
#. * Similar to {@link api.rooms.open}, but creates
#. * the chatroom in the background (i.e. doesn't cause a view to open).
#. *
#. * @method api.rooms.create
#. * @param {(string[]|string)} jids The JID or array of
#. *     JIDs of the chatroom(s) to create
#. * @param {object} [attrs] attrs The room attributes
#. * @returns {Promise<MUC[]|MUC>} Promise which resolves with the Model representing the chat.
#.
#. * @type {Promise<MUC>}
#. *
#. * Opens a MUC chatroom (aka groupchat)
#. *
#. * Similar to {@link api.chats.open}, but for groupchats.
#. *
#. * @method api.rooms.open
#. * @param {string|string[]} jids The room JID or JIDs (if not specified, all
#. *     currently open rooms will be returned).
#. * @param {object} attrs A map  containing any extra room attributes.
#. * @param {string} [attrs.nick] The current user's nickname for the MUC
#. * @param {boolean} [attrs.hidden]
#. * @param {boolean} [attrs.auto_configure] A boolean, indicating
#. *     whether the room should be configured automatically or not.
#. *     If set to `true`, then it makes sense to pass in configuration settings.
#. * @param {object} [attrs.roomconfig] A map of configuration settings to be used when the room gets
#. *     configured automatically. Currently it doesn't make sense to specify
#. *     `roomconfig` values if `auto_configure` is set to `false`.
#. *     For a list of configuration values that can be passed in, refer to these values
#. *     in the [XEP-0045 MUC specification](https://xmpp.org/extensions/xep-0045.html#registrar-formtype-owner).
#. *     The values should be named without the `muc#roomconfig_` prefix.
#. * @param {boolean} [attrs.minimized] A boolean, indicating whether the room should be opened minimized or not.
#. * @param {boolean} [attrs.bring_to_foreground] A boolean indicating whether the room should be
#. *     brought to the foreground and therefore replace the currently shown chat.
#. *     If there is no chat currently open, then this option is ineffective.
#. * @param {boolean} [force=false] - By default, a minimized
#. *   room won't be maximized (in `overlayed` view mode) and in
#. *   `fullscreen` view mode a newly opened room won't replace
#. *   another chat already in the foreground.
#. *   Set `force` to `true` if you want to force the room to be
#. *   maximized or shown.
#. * @returns {Promise<MUC[]|MUC>} Promise which resolves with the Model representing the chat.
#. *
#. * @example
#. * api.rooms.open('group@muc.example.com')
#. *
#. * @example
#. * // To return an array of rooms, provide an array of room JIDs:
#. * api.rooms.open(['group1@muc.example.com', 'group2@muc.example.com'])
#. *
#. * @example
#. * // To setup a custom nickname when joining the room, provide the optional nick argument:
#. * api.rooms.open('group@muc.example.com', {'nick': 'mycustomnick'})
#. *
#. * @example
#. * // For example, opening a room with a specific default configuration:
#. * api.rooms.open(
#. *     'myroom@conference.example.org',
#. *     { 'nick': 'coolguy69',
#. *       'auto_configure': true,
#. *       'roomconfig': {
#. *           'changesubject': false,
#. *           'membersonly': true,
#. *           'persistentroom': true,
#. *           'publicroom': true,
#. *           'roomdesc': 'Comfy room for hanging out',
#. *           'whois': 'anyone'
#. *       }
#. *     }
#. * );
#.
#. #__PURE__
#. *
#. * Fetches the object representing a MUC chatroom (aka groupchat)
#. *
#. * @method api.rooms.get
#. * @param {string|string[]} [jids] The room JID (if not specified, all rooms will be returned).
#. * @param {object} [attrs] A map containing any extra room attributes
#. *  to be set if `create` is set to `true`
#. * @param {string} [attrs.nick] Specify the nickname
#. * @param {string} [attrs.password ] Specify a password if needed to enter a new room
#. * @param {boolean} create A boolean indicating whether the room should be created
#. *     if not found (default: `false`)
#. * @returns {Promise<MUC[]|MUC>}
#. * @example
#. * api.waitUntil('roomsAutoJoined').then(() => {
#. *     const create_if_not_found = true;
#. *     api.rooms.get(
#. *         'group@muc.example.com',
#. *         {'nick': 'dread-pirate-roberts', 'password': 'secret'},
#. *         create_if_not_found
#. *     )
#. * });
#.
#. #__PURE__
#. #__PURE__
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/shared/api/presence.js
#. *
#. * @typedef {import('strophe.js').Builder} Builder
#. * @typedef {import('../../plugins/status/status').default} XMPPStatus
#. * @typedef {import('../../plugins/muc/muc.js').default} MUC
#.
#. harmony default export
#. *
#. * @namespace _converse.api.user.presence
#. * @memberOf _converse.api.user
#.
#. *
#. * Send out a presence stanza
#. * @method _converse.api.user.presence.send
#. * @param {String} [type]
#. * @param {String} [to]
#. * @param {String} [status] - An optional status message
#. * @param {Array<Element>|Array<Builder>|Element|Builder} [nodes]
#. *  Nodes(s) to be added as child nodes of the `presence` XML element.
#.
#. #__PURE__
#. * @type {XMPPStatus}
#. CONCATENATED MODULE: ./src/headless/shared/settings/user/utils.js
#. User settings, populated via api.users.settings
#. *
#. * @returns {Promise<void>|void} A promise when the user settings object
#. *  is created anew and it's contents fetched from storage.
#.
#. #__PURE__
#. #__PURE__
#. #__PURE__
#. CONCATENATED MODULE: ./src/headless/shared/settings/user/api.js
#. *
#. * @typedef {import('@converse/skeletor').Model} Model
#.
#. *
#. * API for accessing and setting user settings. User settings are
#. * different from the application settings from {@link _converse.api.settings}
#. * because they are per-user and set via user action.
#. * @namespace _converse.api.user.settings
#. * @memberOf _converse.api.user
#.
#. *
#. * Returns the user settings model. Useful when you want to listen for change events.
#. * @async
#. * @method _converse.api.user.settings.getModel
#. * @returns {Promise<Model>}
#. * @example const settings = await api.user.settings.getModel();
#.
#. *
#. * Get the value of a particular user setting.
#. * @method _converse.api.user.settings.get
#. * @param {string} key - The setting name
#. * @param {*} [fallback] - An optional fallback value if the user setting is undefined
#. * @returns {Promise} Promise which resolves with the value of the particular configuration setting.
#. * @example api.user.settings.get("foo");
#.
#. #__PURE__
#. *
#. * Set one or many user settings.
#. * @async
#. * @method _converse.api.user.settings.set
#. * @param {Object|string} key An object containing config settings or alternatively a string key
#. * @param {string} [val] The value, if the previous parameter is a key
#. * @example api.user.settings.set("foo", "bar");
#. * @example
#. * api.user.settings.set({
#. *     "foo": "bar",
#. *     "baz": "buz"
#. * });
#.
#. *
#. * Clears all the user settings
#. * @async
#. * @method api.user.settings.clear
#.
#. CONCATENATED MODULE: ./src/headless/shared/api/user.js
#. *
#. * @module:shared.api.user
#.
#. *
#. * This grouping collects API functions related to the current logged in user.
#. *
#. * @namespace _converse.api.user
#. * @memberOf _converse.api
#.
#. *
#. * @method _converse.api.user.jid
#. * @returns {string} The current user's full JID (Jabber ID)
#. * @example _converse.api.user.jid())
#.
#. *
#. * Logs the user in.
#. *
#. * If called without any parameters, Converse will try
#. * to log the user in by calling the `prebind_url` or `credentials_url` depending
#. * on whether prebinding is used or not.
#. *
#. * @method _converse.api.user.login
#. * @param { string } [jid]
#. * @param { string } [password]
#. * @param { boolean } [automatic=false] - An internally used flag that indicates whether
#. *  this method was called automatically once the connection has been
#. *  initialized. It's used together with the `auto_login` configuration flag
#. *  to determine whether Converse should try to log the user in if it
#. *  fails to restore a previous auth'd session.
#. *  @returns  { Promise<void> }
#.
#. #__PURE__
#. *
#. * Logs the user out of the current XMPP session.
#. * @method _converse.api.user.logout
#. * @example _converse.api.user.logout();
#.
#. #__PURE__
#. *
#. * Triggered before the user is logged out
#. * @event _converse#beforeLogout
#.
#. Recreate all the promises
#. Remove the session JID, otherwise the user would just be logged
#. in again upon reload. See #2759
#. *
#. * Triggered once the user has logged out.
#. * @event _converse#logout
#.
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/shared/api/index.js
#. *
#. * @typedef {import('../_converse.js').default} _converse
#. * @typedef {module:shared-api.APIEndpoint} APIEndpoint
#.
#. *
#. * ### The private API
#. *
#. * The private API methods are only accessible via the closured {@link _converse}
#. * object, which is only available to plugins.
#. *
#. * These methods are kept private (i.e. not global) because they may return
#. * sensitive data which should be kept off-limits to other 3rd-party scripts
#. * that might be running in the page.
#. *
#. * @memberOf _converse
#. * @namespace api
#. * @typedef {Record<string, Function>} module:shared-api.APIEndpoint
#. * @typedef {Record<string, APIEndpoint|Function>} APINamespace
#. * @typedef {Record<string, APINamespace|APIEndpoint|Function>} API
#. * @type {API}
#.
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/utils/stanza.js
#. CONCATENATED MODULE: ./src/headless/utils/form.js
#. *
#. * @copyright 2022, the Converse.js contributors
#. * @license Mozilla Public License (MPLv2)
#. * @description This is the form utilities module.
#.
#. *
#. * @param {string} name
#. * @param {string|string[]} value
#.
#. * @param {string} value
#. *
#. * @param {HTMLSelectElement} select
#. * @return {string[]}
#.
#. *
#. * Takes an HTML DOM and turns it into an XForm field.
#. * @param {HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement} field - the field to convert
#. * @return {Element}
#.
#. See #1924
#. * @type {HTMLInputElement}
#. * @type {HTMLSelectElement}
#. *
#. * Returns the current word being written in the input element
#. * @method u#getCurrentWord
#. * @param {HTMLInputElement} input - The HTMLElement in which text is being entered
#. * @param {number} [index] - An optional rightmost boundary index. If given, the text
#. *  value of the input element will only be considered up until this index.
#. * @param {string} [delineator] - An optional string delineator to
#. *  differentiate between words.
#.
#. *
#. * @param {string} s
#.
#. *
#. * @param {HTMLInputElement} input - The HTMLElement in which text is being entered
#. * @param {string} new_value
#.
#. *
#. * @param {HTMLTextAreaElement} textarea
#.
#. Double the length because Opera is inconsistent about whether a carriage return is one character or two.
#. Timeout seems to be required for Blink
#. Scroll to the bottom, in case we're in a tall textarea
#. (Necessary for Firefox and Chrome)
#. CONCATENATED MODULE: ./src/headless/utils/arraybuffer.js
#. https://stackoverflow.com/questions/40031688/javascript-arraybuffer-to-hex#40031979
#. EXTERNAL MODULE: ./node_modules/urijs/src/URI.js
#. #__PURE__
#. CONCATENATED MODULE: ./src/headless/utils/url.js
#. *
#. * Will return false if URL is malformed or contains disallowed characters
#. * @param {string} text
#. * @returns {boolean}
#.
#. *
#. * @param {string|URI} url
#.
#. *
#. * Given the an array of file extensions, check whether a URL points to a file
#. * ending in one of them.
#. * @param {string[]} types - An array of file extensions
#. * @param {string} url
#. * @returns {boolean}
#. * @example
#. *  checkFileTypes(['.gif'], 'https://conversejs.org/cat.gif?foo=bar');
#.
#. CONCATENATED MODULE: ./src/headless/utils/index.js
#. *
#. * @copyright The Converse.js contributors
#. * @license Mozilla Public License (MPLv2)
#. * @description This is the core utilities module.
#.
#. *
#. * The utils object
#. * @namespace u
#. * @type {Record<string, Function>}
#.
#. *
#. * @param {Event} [event]
#.
#. * @type {keyof LEVELS}
#. *
#. * Given a message object, return its text with @ chars
#. * inserted before the mentioned nicknames.
#.
#. Retraction received *before* the message
#. *
#. * Call the callback once all the events have been triggered
#. * @param { Array } events: An array of objects, with keys `object` and
#. *   `event`, representing the event name and the object it's triggered upon.
#. * @param { Function } callback: The function to call once all events have
#. *    been triggered.
#.
#. *
#. * @param {Element} el
#. * @param {string} name
#. * @param {string} [type]
#. * @param {boolean} [bubbles]
#. * @param {boolean} [cancelable]
#.
#. *
#. * @param {string} [suffix]
#. * @return {string}
#.
#. harmony default export
#. TODO: remove. Only the API should be used
#. CONCATENATED MODULE: ./src/headless/shared/connection/feedback.js
#. #__PURE__
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/filesize/dist/filesize.esm.js
#. *
#. * filesize
#. *
#. * @copyright 2024 Jason Mulligan <jason.mulligan@avoidwork.com>
#. * @license BSD-3-Clause
#. * @version 10.1.1
#.
#. Sync base & standard
#. Flipping a negative number to determine the size
#. Determining the exponent
#. Exceeding supported length, time to reduce & multiply
#. Zero is now a special case because bytes divide by 1
#. Decorating a 'diff'
#. Setting optional precision
#. Applying custom symbol
#. Returning Array, Object, or String (default)
#. Partial application for functional programming
#. CONCATENATED MODULE: ./node_modules/@lit/reactive-element/css-tag.js
#. *
#. * @license
#. * Copyright 2019 Google LLC
#. * SPDX-License-Identifier: BSD-3-Clause
#.
#. #__PURE__
#. CONCATENATED MODULE: ./node_modules/@lit/reactive-element/reactive-element.js
#. *
#. * @license
#. * Copyright 2017 Google LLC
#. * SPDX-License-Identifier: BSD-3-Clause
#.
#. #__PURE__
#. #__PURE__
#. #__PURE__
#. CONCATENATED MODULE: ./node_modules/lit-element/lit-element.js
#. *
#. * @license
#. * Copyright 2017 Google LLC
#. * SPDX-License-Identifier: BSD-3-Clause
#.
#. unused pure expression or super
#. #__PURE__
#. CONCATENATED MODULE: ./node_modules/lit/index.js
#. CONCATENATED MODULE: ./src/headless/shared/api/public.js
#. *
#. * @typedef {module:shared-api-public.ConversePrivateGlobal} ConversePrivateGlobal
#.
#. *
#. * @typedef {Window & {converse: ConversePrivateGlobal} } window
#. *
#. * ### The Public API
#. *
#. * This namespace contains public API methods which are are
#. * accessible on the global `converse` object.
#. * They are public, because any JavaScript in the
#. * page can call them. Public methods therefore don’t expose any sensitive
#. * or closured data. To do that, you’ll need to create a plugin, which has
#. * access to the private API method.
#. *
#. * @global
#. * @namespace converse
#.
#. * @type {ConversePrivateGlobal}
#. *
#. * Public API method which initializes Converse.
#. * This method must always be called when using Converse.
#. * @async
#. * @memberOf converse
#. * @method initialize
#. * @param { object } settings A map of [configuration-settings](https://conversejs.org/docs/html/configuration.html#configuration-settings).
#. * @example
#. * converse.initialize({
#. *     auto_list_rooms: false,
#. *     auto_subscribe: false,
#. *     bosh_service_url: 'https://bind.example.com',
#. *     hide_muc_server: false,
#. *     i18n: 'en',
#. *     play_sounds: true,
#. *     show_controlbox_by_default: true,
#. *     debug: false,
#. *     roster_groups: true
#. * });
#.
#. #__PURE__
#. Needed by pluggable.js
#. XXX: DEPRECATED
#. Register all custom elements
#. XXX: api.elements is defined in the UI part of Converse, outside of @converse/headless.
#. This line should probably be moved to the UI code as part of a larger refactoring.
#. *
#. * Triggered once converse.initialize has finished.
#. * @event _converse#initialized
#.
#. *
#. * Exposes methods for adding and removing plugins. You'll need to write a plugin
#. * if you want to have access to the private API methods defined further down below.
#. *
#. * For more information on plugins, read the documentation on [writing a plugin](/docs/html/plugin_development.html).
#. * @namespace plugins
#. * @memberOf converse
#.
#. *
#. * Registers a new plugin.
#. * @method converse.plugins.add
#. * @param { string } name The name of the plugin
#. * @param { object } plugin The plugin object
#. * @example
#. *  const plugin = {
#. *      initialize: function () {
#. *          // Gets called as soon as the plugin has been loaded.
#. *
#. *          // Inside this method, you have access to the private
#. *          // API via `_covnerse.api`.
#. *
#. *          // The private _converse object contains the core logic
#. *          // and data-structures of Converse.
#. *      }
#. *  }
#. *  converse.plugins.add('myplugin', plugin);
#.
#. *
#. * Utility methods and globals from bundled 3rd party libraries.
#. * @typedef ConverseEnv
#. * @property { Error } converse.env.TimeoutError
#. * @property { function } converse.env.$build    - Creates a Strophe.Builder, for creating stanza objects.
#. * @property { function } converse.env.$iq       - Creates a Strophe.Builder with an <iq/> element as the root.
#. * @property { function } converse.env.$msg      - Creates a Strophe.Builder with an <message/> element as the root.
#. * @property { function } converse.env.$pres     - Creates a Strophe.Builder with an <presence/> element as the root.
#. * @property { function } converse.env.Promise   - The Promise implementation used by Converse.
#. * @property { function } converse.env.Strophe   - The [Strophe](http://strophe.im/strophejs) XMPP library used by Converse.
#. * @property { function } converse.env.f         - And instance of Lodash with its methods wrapped to produce immutable auto-curried iteratee-first data-last methods.
#. * @property { function } converse.env.sizzle    - [Sizzle](https://sizzlejs.com) CSS selector engine.
#. * @property { function } converse.env.sprintf
#. * @property { object } converse.env._           - The instance of [lodash-es](http://lodash.com) used by Converse.
#. * @property { object } converse.env.dayjs       - [DayJS](https://github.com/iamkun/dayjs) date manipulation library.
#. * @property { object } converse.env.utils       - Module containing common utility methods used by Converse.
#. * @memberOf converse
#.
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/plugins/chat/model-with-contact.js
#. #__PURE__
#. *
#. * @typedef {import('../vcard/vcard').default} VCard
#. * @typedef {import('../roster/contact').default} RosterContact
#.
#. *
#. * @public
#. * @type {RosterContact}
#.
#. *
#. * @public
#. * @type {VCard}
#.
#. *
#. * @param {string} jid
#.
#. #__PURE__
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/plugins/chat/message.js
#. *
#. * @typedef {import('@converse/skeletor').Model} Model
#.
#. *
#. * Represents a (non-MUC) message.
#. * These can be either `chat`, `normal` or `headline` messages.
#. * @namespace _converse.Message
#. * @memberOf _converse
#. * @example const msg = new Message({'message': 'hello world!'});
#.
#. #__PURE__
#. *
#. * @param {Model[]} [models]
#. * @param {object} [options]
#.
#. #__PURE__
#. If `type` changes from `error` to `chat`, we want to set the contact. See #2733
#. *
#. * Triggered once a {@link Message} has been created and initialized.
#. * @event _converse#messageInitialized
#. * @type {Message}
#. * @example _converse.api.listen.on('messageInitialized', model => { ... });
#.
#. *
#. * Sets an auto-destruct timer for this message, if it's is_ephemeral.
#. * @method _converse.Message#setTimerForEphemeralMessage
#.
#. XXX: This is an empty message with only the 3 default values.
#. This seems to happen when saving a newly created message
#. fails for some reason.
#. TODO: This is likely fixable by setting `wait` when
#. creating messages. See the wait-for-messages branch.
#. *
#. * Determines whether this messsage may be retracted by the current user.
#. * @method _converse.Messages#mayBeRetracted
#. * @returns { Boolean }
#.
#. *
#. * Returns a boolean indicating whether this message is ephemeral,
#. * meaning it will get automatically removed after ten seconds.
#. * @returns { boolean }
#.
#. *
#. * Returns a boolean indicating whether this message is a XEP-0245 /me command.
#. * @returns { boolean }
#.
#. *
#. * Returns a boolean indicating whether this message is considered a followup
#. * message from the previous one. Followup messages are shown grouped together
#. * under one author heading.
#. * A message is considered a followup of it's predecessor when it's a chat
#. * message from the same author, within 10 minutes.
#. * @returns { boolean }
#.
#: dist/converse-no-dependencies.js:15246
#: dist/converse-no-dependencies.js:53963
msgid "Undecryptable OMEMO message"
msgstr ""

#. *
#. * Send out an IQ stanza to request a file upload slot.
#. * https://xmpp.org/extensions/xep-0363.html#request
#. * @private
#. * @method _converse.Message#sendSlotRequestStanza
#.
#. eslint-disable-line class-methods-use-this
#. https://xmpp.org/extensions/xep-0363.html#request
#. TODO: Can't set the Cookie header in JavaScipt, instead cookies need
#. to be manually set via document.cookie, so we're leaving it out here.
#. #__PURE__
#: dist/converse-no-dependencies.js:15255
#: dist/converse-no-dependencies.js:54034
msgid "Sorry, could not determine upload URL."
msgstr ""

#: dist/converse-no-dependencies.js:15255
#: dist/converse-no-dependencies.js:54053
msgid "Sorry, could not determine file upload URL."
msgstr ""

#. #__PURE__
#. #__PURE__
#. *
#. * *Hook* which allows plugins to change the attributes
#. * saved on the message once a file has been uploaded.
#. * @event _converse#afterFileUploaded
#.
#: dist/converse-no-dependencies.js:15259
#: dist/converse-no-dependencies.js:54128
#, javascript-format
msgid ""
"Sorry, could not succesfully upload your file. Your server’s response: "
"\"%1$s\""
msgstr ""

#: dist/converse-no-dependencies.js:15259
#: dist/converse-no-dependencies.js:54130
msgid "Sorry, could not succesfully upload your file."
msgstr ""

#. harmony default export
#. CONCATENATED MODULE: ./src/headless/plugins/muc/message.js
#. #__PURE__
#. #__PURE__
#. eslint-disable-line require-await
#. If `type` changes from `error` to `groupchat`, we want to set the occupant. See #2733
#. *
#. * Triggered once a { @link MUCMessage} has been created and initialized.
#. * @event _converse#chatRoomMessageInitialized
#. * @type {MUCMessage}
#. * @example _converse.api.listen.on('chatRoomMessageInitialized', model => { ... });
#.
#. *
#. * Determines whether this messsage may be moderated,
#. * based on configuration settings and server support.
#. * @async
#. * @method _converse.ChatRoomMessages#mayBeModerated
#. * @returns {boolean}
#.
#. If from_muc is not defined, then this message hasn't been
#. reflected yet, which means we won't have a XEP-0359 stanza id.
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/plugins/muc/messages.js
#. *
#. * Collection which stores MUC messages
#.
#. #__PURE__
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/lodash-es/isMatch.js
#. *
#. * Performs a partial deep comparison between `object` and `source` to
#. * determine if `object` contains equivalent property values.
#. *
#. * **Note:** This method is equivalent to `_.matches` when `source` is
#. * partially applied.
#. *
#. * Partial comparisons will match empty array and empty object `source`
#. * values against any array or object value, respectively. See `_.isEqual`
#. * for a list of supported value comparisons.
#. *
#. * @static
#. * @memberOf _
#. * @since 3.0.0
#. * @category Lang
#. * @param {Object} object The object to inspect.
#. * @param {Object} source The object of property values to match.
#. * @returns {boolean} Returns `true` if `object` is a match, else `false`.
#. * @example
#. *
#. * var object = { 'a': 1, 'b': 2 };
#. *
#. * _.isMatch(object, { 'b': 2 });
#. * // => true
#. *
#. * _.isMatch(object, { 'b': 1 });
#. * // => false
#.
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/shared/chat/utils.js
#. *
#. * @module:headless-shared-chat-utils
#. * @typedef {import('../../plugins/chat/message.js').default} Message
#. * @typedef {import('../../plugins/chat/model.js').default} ChatBox
#. * @typedef {import('../../plugins/muc/muc.js').default} MUC
#. * @typedef {module:headless-shared-chat-utils.MediaURLData} MediaURLData
#. * @typedef {module:headless-shared-parsers.MediaURLMetadata} MediaURLMetadata
#.
#. *
#. * @param {ChatBox|MUC} model
#.
#. *
#. * Triggered once the message history has been pruned, i.e.
#. * once older messages have been removed to keep the
#. * number of messages below the value set in `prune_messages_above`.
#. * @event _converse#historyPruned
#. * @type { ChatBox | MUC }
#. * @example _converse.api.listen.on('historyPruned', this => { ... });
#.
#. *
#. * Given an array of {@link MediaURLMetadata} objects and text, return an
#. * array of {@link MediaURL} objects.
#. * @param {Array<MediaURLMetadata>} arr
#. * @param {String} text
#. * @returns{Array<MediaURLData>}
#.
#. *
#. * @typedef {Object} MediaURLData
#. * An object representing a URL found in a chat message
#. * @property {Boolean} is_audio
#. * @property {Boolean} is_image
#. * @property {Boolean} is_video
#. * @property {String} end
#. * @property {String} start
#. * @property {String} url
#.
#. *
#. * Determines whether the given attributes of an incoming message
#. * represent a XEP-0308 correction and, if so, handles it appropriately.
#. * @private
#. * @method ChatBox#handleCorrection
#. * @param {ChatBox|MUC} model
#. * @param {object} attrs - Attributes representing a received
#. *  message, as returned by {@link parseMessage}
#. * @returns {Promise<Message|void>} Returns the corrected
#. *  message or `undefined` if not applicable.
#.
#. #__PURE__
#. eslint-disable-next-line no-eq-null
#. This is an older message which has been corrected afterwards
#. This is a correction of an earlier message we already received
#. We want to keep the msgid of the original message
#. Delete id, otherwise a new cache entry gets created
#. CONCATENATED MODULE: ./src/headless/shared/actions.js
#. Reject an incoming message by replying with an error message of type "cancel".
#. *
#. * Send out a XEP-0333 chat marker
#. * @param { String } to_jid
#. * @param { String } id - The id of the message being marked
#. * @param { String } type - The marker type
#. * @param { String } [msg_type]
#.
#. CONCATENATED MODULE: ./src/headless/shared/parsers.js
#. *
#. * @module:headless-shared-parsers
#. * @typedef {module:headless-shared-parsers.MediaURLMetadata} MediaURLMetadata
#. * @typedef {module:headless-shared-parsers.Reference} Reference
#.
#. #__PURE__
#. *
#. * @param {string} message
#. * @param {Element} stanza
#.
#. #__PURE__
#. *
#. * Extract the XEP-0359 stanza IDs from the passed in stanza
#. * and return a map containing them.
#. * @param {Element} stanza - The message stanza
#. * @param {Element} original_stanza - The encapsulating stanza which contains
#. *      the message stanza.
#. * @returns {Object}
#.
#. Store generic stanza ids
#. Store the archive id
#. Store the origin id
#. *
#. * @param {Element} stanza
#.
#. *
#. * @private
#. * @param { Element } stanza - The message stanza
#. * @param { Element } original_stanza - The original stanza, that contains the
#. *  message stanza, if it was contained, otherwise it's the message stanza itself.
#. * @returns { Object }
#.
#. *
#. * @param {string} text
#. * @param {number} offset
#.
#. *
#. * @typedef {Object} MediaURLMetadata
#. * An object representing the metadata of a URL found in a chat message
#. * The actual URL is not saved, it can be extracted via the `start` and `end` indexes.
#. * @property {Boolean} is_audio
#. * @property {Boolean} is_image
#. * @property {Boolean} is_video
#. * @property {String} end
#. * @property {String} start
#.
#. *
#. * Returns the human readable error message contained in a `groupchat` message stanza of type `error`.
#. * @private
#. * @param { Element } stanza - The message stanza
#.
#. *
#. * Given a message stanza, find and return any XEP-0372 references
#. * @param {Element} stanza - The message stanza
#. * @returns { Reference }
#.
#. *
#. * @typedef {Object} Reference
#. * An object representing XEP-0372 reference data
#. * @property {string} begin
#. * @property {string} end
#. * @property {string} type
#. * @property {String} value
#. * @property {String} uri
#.
#. *
#. * @param {Element} stanza
#.
#. *
#. * Determines whether the passed in stanza is a XEP-0280 Carbon
#. * @private
#. * @param { Element } stanza - The message stanza
#. * @returns { Boolean }
#.
#. *
#. * Returns the XEP-0085 chat state contained in a message stanza
#. * @private
#. * @param { Element } stanza - The message stanza
#.
#. *
#. * Check whether the passed-in stanza is a forwarded message that is "bare",
#. * i.e. it's not forwarded as part of a larger protocol, like MAM.
#. * @param { Element } stanza
#.
#. *
#. * Determines whether the passed in stanza is a XEP-0333 Chat Marker
#. * @method getChatMarker
#. * @param {Element} stanza - The message stanza
#. * @returns {Element}
#.
#. If we receive more than one marker (which shouldn't happen), we take
#. the highest level of acknowledgement.
#. *
#. * @param {Element} stanza
#.
#. *
#. * @param {Element} stanza
#.
#. Some servers (e.g. Prosody) don't set the stanza
#. type to "headline" when sending server messages.
#. For now we check if an @ signal is included, and if not,
#. we assume it's a headline stanza.
#. *
#. * Determines whether the passed in stanza is a XEP-0313 MAM stanza
#. * @method isArchived
#. * @param {Element} original_stanza - The message stanza
#. * @returns {boolean}
#.
#. *
#. * Returns an object containing all attribute names and values for a particular element.
#. * @method getAttributes
#. * @param {Element} stanza
#. * @returns {object}
#.
#. CONCATENATED MODULE: ./src/headless/plugins/chat/parsers.js
#. *
#. * @module:plugin-chat-parsers
#. * @typedef {module:plugin-chat-parsers.MessageAttributes} MessageAttributes
#.
#. *
#. * Parses a passed in message stanza and returns an object of attributes.
#. * @method st#parseMessage
#. * @param { Element } stanza - The message stanza
#. * @returns { Promise<MessageAttributes|Error> }
#.
#. #__PURE__
#. Prevent message forging via carbons: https://xmpp.org/extensions/xep-0280.html#security
#. *
#. * The object which {@link parseMessage} returns
#. * @typedef {Object} MessageAttributes
#. * @property { ('me'|'them') } sender - Whether the message was sent by the current user or someone else
#. * @property { Array<Object> } references - A list of objects representing XEP-0372 references
#. * @property { Boolean } editable - Is this message editable via XEP-0308?
#. * @property { Boolean } is_archived -  Is this message from a XEP-0313 MAM archive?
#. * @property { Boolean } is_carbon - Is this message a XEP-0280 Carbon?
#. * @property { Boolean } is_delayed - Was delivery of this message was delayed as per XEP-0203?
#. * @property { Boolean } is_encrypted -  Is this message XEP-0384  encrypted?
#. * @property { Boolean } is_error - Whether an error was received for this message
#. * @property { Boolean } is_headline - Is this a "headline" message?
#. * @property { Boolean } is_markable - Can this message be marked with a XEP-0333 chat marker?
#. * @property { Boolean } is_marker - Is this message a XEP-0333 Chat Marker?
#. * @property { Boolean } is_only_emojis - Does the message body contain only emojis?
#. * @property { Boolean } is_spoiler - Is this a XEP-0382 spoiler message?
#. * @property { Boolean } is_tombstone - Is this a XEP-0424 tombstone?
#. * @property { Boolean } is_unstyled - Whether XEP-0393 styling hints should be ignored
#. * @property { Boolean } is_valid_receipt_request - Does this message request a XEP-0184 receipt (and is not from us or a carbon or archived message)
#. * @property { Object } encrypted -  XEP-0384 encryption payload attributes
#. * @property { String } body - The contents of the <body> tag of the message stanza
#. * @property { String } chat_state - The XEP-0085 chat state notification contained in this message
#. * @property { String } contact_jid - The JID of the other person or entity
#. * @property { String } edited - An ISO8601 string recording the time that the message was edited per XEP-0308
#. * @property { String } error_condition - The defined error condition
#. * @property { String } error_text - The error text received from the server
#. * @property { String } error_type - The type of error received from the server
#. * @property { String } from - The sender JID
#. * @property { String } fullname - The full name of the sender
#. * @property { String } marker - The XEP-0333 Chat Marker value
#. * @property { String } marker_id - The `id` attribute of a XEP-0333 chat marker
#. * @property { String } msgid - The root `id` attribute of the stanza
#. * @property { String } nick - The roster nickname of the sender
#. * @property { String } oob_desc - The description of the XEP-0066 out of band data
#. * @property { String } oob_url - The URL of the XEP-0066 out of band data
#. * @property { String } origin_id - The XEP-0359 Origin ID
#. * @property { String } receipt_id - The `id` attribute of a XEP-0184 <receipt> element
#. * @property { String } received - An ISO8601 string recording the time that the message was received
#. * @property { String } replace_id - The `id` attribute of a XEP-0308 <replace> element
#. * @property { String } retracted - An ISO8601 string recording the time that the message was retracted
#. * @property { String } retracted_id - The `id` attribute of a XEP-424 <retracted> element
#. * @property { String } spoiler_hint  The XEP-0382 spoiler hint
#. * @property { String } stanza_id - The XEP-0359 Stanza ID. Note: the key is actualy `stanza_id ${by_jid}` and there can be multiple.
#. * @property { String } subject - The <subject> element value
#. * @property { String } thread - The <thread> element value
#. * @property { String } time - The time (in ISO8601 format), either given by the XEP-0203 <delay> element, or of receipt.
#. * @property { String } to - The recipient JID
#. * @property { String } type - The type of message
#.
#. TODO: Remove and use body and error attributes instead
#. We prefer to use one of the XEP-0359 unique and stable stanza IDs
#. as the Model id, to avoid duplicates.
#. *
#. * *Hook* which allows plugins to add additional parsing
#. * @event _converse#parseMessage
#.
#. CONCATENATED MODULE: ./src/headless/plugins/chat/utils.js
#. *
#. * @module:headless-plugins-chat-utils
#. * @typedef {import('./model.js').default} ChatBox
#. * @typedef {module:plugin-chat-parsers.MessageAttributes} MessageAttributes
#. * @typedef {import('strophe.js').Builder} Builder
#.
#. *
#. * Given a stanza, determine whether it's a new
#. * message, i.e. not a MAM archived one.
#. * @param {Element|Model|object} message
#.
#. #__PURE__
#. * @param {ChatBox} c
#. * @param {Model} o
#. *
#. * @param {Element} stanza
#.
#. #__PURE__
#. Automatically join private chats, based on the
#. "auto_join_private_chats" configuration setting.
#. * @param {string} jid
#. *
#. * Triggered once any private chats have been automatically joined as
#. * specified by the `auto_join_private_chats` setting.
#. * See: https://conversejs.org/docs/html/configuration.html#auto-join-private-chats
#. * @event _converse#privateChatsAutoJoined
#. * @example _converse.api.listen.on('privateChatsAutoJoined', () => { ... });
#. * @example _converse.api.waitUntil('privateChatsAutoJoined').then(() => { ... });
#.
#. * @param {Element} stanza
#. * @param {Element} stanza
#. *
#. * Handler method for all incoming single-user chat "message" stanzas.
#. * @param {Element|Builder} stanza
#.
#. *
#. * Ask the XMPP server to enable Message Carbons
#. * See [XEP-0280](https://xmpp.org/extensions/xep-0280.html#enabling)
#.
#. #__PURE__
#. Prosody sends headline messages with type `chat`, so we need to filter them out here.
#. XXX: Need to take XEP-428 <fallback> into consideration
#. *
#. * @typedef {Object} MessageData
#. * An object containing the original message stanza, as well as the
#. * parsed attributes.
#. * @property {Element} stanza
#. * @property {MessageAttributes} stanza
#. * @property {ChatBox} chatbox
#.
#. *
#. * Triggered when a message stanza is been received and processed.
#. * @event _converse#message
#. * @type {MessageData} data
#.
#. #__PURE__
#. CONCATENATED MODULE: ./src/headless/plugins/chat/model.js
#. *
#. * @typedef {import('./message.js').default} Message
#. * @typedef {import('../muc/muc.js').default} MUC
#. * @typedef {import('../muc/message.js').default} MUCMessage
#. * @typedef {module:plugin-chat-parsers.MessageAttributes} MessageAttributes
#. * @typedef {import('strophe.js/src/builder.js').Builder} Strophe.Builder
#.
#. *
#. * Represents an open/ongoing chat conversation.
#. * @namespace ChatBox
#. * @memberOf _converse
#.
#. #__PURE__
#. #__PURE__
#. *
#. * Set the subject for this {@link MUC}
#. * @private
#. * @method MUC#setSubject
#. * @param { String } value
#.
#. *
#. * Is this a chat state notification that can be ignored,
#. * because it's old or because it's from us.
#. * @private
#. * @method MUC#ignorableCSN
#. * @param { Object } attrs - The message attributes
#.
#. *
#. * Determines whether the message is from ourselves by checking
#. * the `from` attribute. Doesn't check the `type` attribute.
#. * @method MUC#isOwnMessage
#. * @param {Object|Element|MUCMessage} msg
#. * @returns {boolean}
#.
#. *
#. * Send a MUC-0410 MUC Self-Ping stanza to room to determine
#. * whether we're still joined.
#. * @async
#. * @private
#. * @method MUC#isJoined
#. * @returns {Promise<boolean>}
#.
#. #__PURE__
#. *
#. * Sends a status update presence (i.e. based on the `<show>` element)
#. * @method MUC#sendStatusPresence
#. * @param { String } type
#. * @param { String } [status] - An optional status message
#. * @param { Element[]|Strophe.Builder[]|Element|Strophe.Builder } [child_nodes]
#. *  Nodes(s) to be added as child nodes of the `presence` XML element.
#.
#. #__PURE__
#. *
#. * Check whether we're still joined and re-join if not
#. * @method MUC#rejoinIfNecessary
#.
#. #__PURE__
#. *
#. * @method MUC#shouldShowErrorMessage
#. * @param {object} attrs
#. * @returns {Promise<boolean>}
#.
#. #__PURE__
#. *
#. * Looks whether we already have a moderation message for this
#. * incoming message. If so, it's considered "dangling" because
#. * it probably hasn't been applied to anything yet, given that
#. * the relevant message is only coming in now.
#. * @private
#. * @method MUC#findDanglingModeration
#. * @param { object } attrs - Attributes representing a received
#. *  message, as returned by {@link parseMUCMessage}
#. * @returns {MUCMessage}
#.
#. Only look for dangling moderation if there are newer
#. messages than this one, since moderation come after.
#. Search from latest backwards
#. *
#. * Handles message moderation based on the passed in attributes.
#. * @private
#. * @method MUC#handleModeration
#. * @param {object} attrs - Attributes representing a received
#. *  message, as returned by {@link parseMUCMessage}
#. * @returns {Promise<boolean>} Returns `true` or `false` depending on
#. *  whether a message was moderated or not.
#.
#. #__PURE__
#. Check if we have dangling moderation message
#. Delete id, otherwise a new cache entry gets created
#: dist/converse-no-dependencies.js:15570
#: dist/converse-no-dependencies.js:16508
#: dist/converse-no-dependencies.js:57362
#: dist/converse-no-dependencies.js:62735
#, javascript-format
msgid "%1$s is typing"
msgstr ""

#: dist/converse-no-dependencies.js:15570
#: dist/converse-no-dependencies.js:16508
#: dist/converse-no-dependencies.js:57364
#: dist/converse-no-dependencies.js:62737
#, javascript-format
msgid "%1$s has stopped typing"
msgstr ""

#: dist/converse-no-dependencies.js:15570
#: dist/converse-no-dependencies.js:15600
#: dist/converse-no-dependencies.js:16508
#: dist/converse-no-dependencies.js:57366
#: dist/converse-no-dependencies.js:57753
#: dist/converse-no-dependencies.js:62739
#, javascript-format
msgid "%1$s has gone away"
msgstr ""

#. *
#. * Triggered whenever a { @link ChatBox } or ${ @link MUC }
#. * has fetched its messages from the local cache.
#. * @event _converse#afterMessagesFetched
#. * @type { ChatBox| MUC }
#. * @example _converse.api.listen.on('afterMessagesFetched', (chat) => { ... });
#.
#. #__PURE__
#. The error message refers to a retraction
#. *
#. * Send IQ stanzas to the server to modify affiliations for users in this groupchat.
#. * See: https://xmpp.org/extensions/xep-0045.html#modifymember
#. * @param {String|Array<String>} muc_jid - The JID(s) of the MUCs in which the
#. * @param {Array<User>} users
#. * @returns {Promise}
#.
#. *
#. * Send IQ stanzas to the server to set an affiliation for
#. * the provided JIDs.
#. * See: https://xmpp.org/extensions/xep-0045.html#modifymember
#. *
#. * Prosody doesn't accept multiple JIDs' affiliations
#. * being set in one IQ stanza, so as a workaround we send
#. * a separate stanza for each JID.
#. * Related ticket: https://issues.prosody.im/345
#. *
#. * @param {typeof AFFILIATIONS[number]} affiliation - The affiliation to be set
#. * @param {String|Array<String>} muc_jids - The JID(s) of the MUCs in which the
#. *  affiliations need to be set.
#. * @param {object} members - A map of jids, affiliations and
#. *  optionally reasons. Only those entries with the
#. *  same affiliation as being currently set will be considered.
#. * @returns {Promise} A promise which resolves and fails depending on the XMPP server response.
#.
#. *
#. * Send an IQ stanza specifying an affiliation change.
#. * @param {typeof AFFILIATIONS[number]} affiliation: affiliation (could also be stored on the member object).
#. * @param {string} muc_jid: The JID of the MUC in which the affiliation should be set.
#. * @param {object} member: Map containing the member's jid and optionally a reason and affiliation.
#.
#. *
#. * Given two lists of objects with 'jid', 'affiliation' and
#. * 'reason' properties, return a new list containing
#. * those objects that are new, changed or removed
#. * (depending on the 'remove_absentees' boolean).
#. *
#. * The affiliations for new and changed members stay the
#. * same, for removed members, the affiliation is set to 'none'.
#. *
#. * The 'reason' property is not taken into account when
#. * comparing whether affiliations have been changed.
#. * @param {boolean} exclude_existing - Indicates whether JIDs from
#. *      the new list which are also in the old list
#. *      (regardless of affiliation) should be excluded
#. *      from the delta. One reason to do this
#. *      would be when you want to add a JID only if it
#. *      doesn't have *any* existing affiliation at all.
#. * @param {boolean} remove_absentees - Indicates whether JIDs
#. *      from the old list which are not in the new list
#. *      should be considered removed and therefore be
#. *      included in the delta with affiliation set
#. *      to 'none'.
#. * @param {array} new_list - Array containing the new affiliations
#. * @param {array} old_list - Array containing the old affiliations
#. * @returns {array}
#.
#. Get the new affiliations
#. Get the changed affiliations
#. Get the removed affiliations
#. CONCATENATED MODULE: ./src/headless/plugins/muc/utils.js
#. *
#. * @typedef {import('@converse/skeletor').Model} Model
#.
#. *
#. * Given an occupant model, see which roles may be assigned to that user.
#. * @param {Model} occupant
#. * @returns {typeof ROLES} - An array of assignable roles
#.
#. When disconnecting, mark all groupchats as
#. * disconnected, so that they will be properly entered again
#. * when fetched from session storage.
#.
#. *
#. * @param {Event} [event]
#.
#. #__PURE__
#. Opens a groupchat, making sure that certain attributes
#. * are correct, for example that the "type" is set to
#. * "chatroom".
#.
#. #__PURE__
#. *
#. * A direct MUC invitation to join a groupchat has been received
#. * See XEP-0249: Direct MUC invitations.
#. * @private
#. * @method _converse.ChatRoom#onDirectMUCInvitation
#. * @param { Element } message - The message stanza containing the invitation.
#.
#. #__PURE__
#. #__PURE__
#. Invite request might come from someone not your roster list
#. *
#. * *Hook* which is used to gather confirmation whether a direct MUC
#. * invitation should be accepted or not.
#. *
#. * It's meant for consumers of `@converse/headless` to subscribe to
#. * this hook and then ask the user to confirm.
#. *
#. * @event _converse#confirmDirectMUCInvitation
#.
#. XXX: if anything changes here, update the docs for the
#. locked_muc_nickname setting.
#. *
#. * Determines info message visibility based on
#. * muc_show_info_messages configuration setting
#. * @param {*} code
#. * @memberOf _converse
#.
#. *
#. * Automatically join groupchats, based on the
#. * "auto_join_rooms" configuration setting, which is an array
#. * of strings (groupchat JIDs) or objects (with groupchat JID and other settings).
#.
#. #__PURE__
#. *
#. * Triggered once any rooms that have been configured to be automatically joined,
#. * specified via the _`auto_join_rooms` setting, have been entered.
#. * @event _converse#roomsAutoJoined
#. * @example _converse.api.listen.on('roomsAutoJoined', () => { ... });
#. * @example _converse.api.waitUntil('roomsAutoJoined').then(() => { ... });
#.
#. Invites
#. For non-SMACKS websocket connections, or non-resumeable
#. connections, we disconnect all chatrooms when the page unloads.
#. See issue #1111
#. #__PURE__
#. #__PURE__
#. CONCATENATED MODULE: ./src/headless/plugins/muc/muc.js
#. *
#. * @module:headless-plugins-muc-muc
#. * @typedef {import('./message.js').default} MUCMessage
#. * @typedef {import('./occupant.js').default} MUCOccupant
#. * @typedef {import('./affiliations/utils.js').NonOutcastAffiliation} NonOutcastAffiliation
#. * @typedef {module:plugin-muc-parsers.MemberListItem} MemberListItem
#. * @typedef {module:plugin-chat-parsers.MessageAttributes} MessageAttributes
#. * @typedef {module:plugin-muc-parsers.MUCMessageAttributes} MUCMessageAttributes
#. * @typedef {module:shared.converse.UserMessage} UserMessage
#. * @typedef {import('strophe.js/src/builder.js').Builder} Strophe.Builder
#.
#. #__PURE__
#. *
#. * Represents an open/ongoing groupchat conversation.
#. * @namespace MUC
#. * @memberOf _converse
#.
#. #__PURE__
#. XEP-437
#. For group chats, we distinguish between generally unread
#. messages and those ones that specifically mention the
#. user.
#.
#. To keep things simple, we reuse `num_unread` from
#. ChatBox to indicate unread messages which
#. mention the user and `num_unread_general` to indicate
#. generally unread messages (which *includes* mentions!).
#. #__PURE__
#. sendChatState depends on this.features
#. *
#. * Triggered once a {@link MUC} has been created and initialized.
#. * @event _converse#chatRoomInitialized
#. * @type { MUC }
#. * @example _converse.api.listen.on('chatRoomInitialized', model => { ... });
#.
#. *
#. * Checks whether this MUC qualifies for subscribing to XEP-0437 Room Activity Indicators (RAI)
#. * @method MUC#isRAICandidate
#. * @returns { Boolean }
#.
#. *
#. * Checks whether we're still joined and if so, restores the MUC state from cache.
#. * @private
#. * @method MUC#restoreFromCache
#. * @returns {Promise<boolean>} Returns `true` if we're still joined, otherwise returns `false`.
#.
#. #__PURE__
#. *
#. * Join the MUC
#. * @private
#. * @method MUC#join
#. * @param { String } [nick] - The user's nickname
#. * @param { String } [password] - Optional password, if required by the groupchat.
#. *  Will fall back to the `password` value stored in the room
#. *  model (if available).
#.
#. #__PURE__
#. Set this early, so we don't rejoin in onHiddenChange
#. *
#. * Clear stale cache and re-join a MUC we've been in before.
#. * @private
#. * @method MUC#rejoin
#.
#. *
#. * @param {string} password
#.
#. #__PURE__
#. Go one level up, out of the `x` element.
#. *
#. * *Hook* which allows plugins to update an outgoing MUC join presence stanza
#. * @event _converse#constructedMUCPresence
#. * @type {Element} The stanza which will be sent out
#.
#. Remove non-members when reconnecting
#. Looks like we haven't restored occupants from cache, so we clear it.
#. *
#. * Given the passed in MUC message, send a XEP-0333 chat marker.
#. * @param { MUCMessage } msg
#. * @param { ('received'|'displayed'|'acknowledged') } [type='displayed']
#. * @param { Boolean } force - Whether a marker should be sent for the
#. *  message, even if it didn't include a `markable` element.
#.
#. *
#. * Ensures that the user is subscribed to XEP-0437 Room Activity Indicators
#. * if `muc_subscribe_to_rai` is set to `true`.
#. * Only affiliated users can subscribe to RAI, but this method doesn't
#. * check whether the current user is affiliated because it's intended to be
#. * called after the MUC has been left and we don't have that information
#. * anymore.
#. * @private
#. * @method MUC#enableRAI
#.
#. *
#. * Handler that gets called when the 'hidden' flag is toggled.
#. * @private
#. * @method MUC#onHiddenChange
#.
#. #__PURE__
#. #__PURE__
#. *
#. * Triggered when the user has entered a new MUC
#. * @event _converse#enteredNewRoom
#. * @type {MUC}
#. * @example _converse.api.listen.on('enteredNewRoom', model => { ... });
#.
#. #__PURE__
#. #__PURE__
#. *
#. * @param {Element} stanza
#.
#. #__PURE__
#. The error message refers to a retraction
#: dist/converse-no-dependencies.js:15577
#: dist/converse-no-dependencies.js:16140
#: dist/converse-no-dependencies.js:57443
#: dist/converse-no-dependencies.js:60344
msgid "You're not allowed to retract your message."
msgstr ""

#: dist/converse-no-dependencies.js:15577
#: dist/converse-no-dependencies.js:16140
#: dist/converse-no-dependencies.js:57445
#: dist/converse-no-dependencies.js:60348
msgid "Sorry, an error occurred while trying to retract your message."
msgstr ""

#: dist/converse-no-dependencies.js:15577
#: dist/converse-no-dependencies.js:57450
msgid "You're not allowed to send a message."
msgstr ""

#: dist/converse-no-dependencies.js:15577
#: dist/converse-no-dependencies.js:16140
#: dist/converse-no-dependencies.js:57452
#: dist/converse-no-dependencies.js:60357
msgid "Sorry, an error occurred while trying to send your message."
msgstr ""

#. *
#. * Queue an incoming `chat` message stanza for processing.
#. * @async
#. * @method ChatBox#queueMessage
#. * @param {MessageAttributes} attrs - A promise which resolves to the message attributes
#.
#. *
#. * @async
#. * @method ChatBox#onMessage
#. * @param {Promise<MessageAttributes>} attrs_promise - A promise which resolves to the message attributes.
#.
#. #__PURE__
#. #__PURE__
#. #__PURE__
#. No point in fetching messages from the cache if it's been cleared.
#. Make sure to resolve the fetched promise to avoid freezes.
#. #__PURE__
#. Immediately sending the chat state, because the
#. model is going to be destroyed afterwards.
#. *
#. * Triggered once a chatbox has been closed.
#. * @event _converse#chatBoxClosed
#. * @type {ChatBox | MUC}
#. * @example _converse.api.listen.on('chatBoxClosed', chat => { ... });
#.
#. *
#. * Triggered whenever a `ChatBox` instance has reconnected after an outage
#. * @event _converse#onChatReconnected
#. * @type {ChatBox | MUC}
#. * @example _converse.api.listen.on('onChatReconnected', chat => { ... });
#.
#. #__PURE__
#: dist/converse-no-dependencies.js:15600
#: dist/converse-no-dependencies.js:57751
#, javascript-format
msgid "%1$s has gone offline"
msgstr ""

#: dist/converse-no-dependencies.js:15600
#: dist/converse-no-dependencies.js:57755
#, javascript-format
msgid "%1$s is busy"
msgstr ""

#: dist/converse-no-dependencies.js:15600
#: dist/converse-no-dependencies.js:57757
#, javascript-format
msgid "%1$s is online"
msgstr ""

#. #__PURE__
#. Looks like we have a failed decrypted message stored, and now
#. we have a properly decrypted version of the same message.
#. See issue: https://github.com/conversejs/converse.js/issues/2733#issuecomment-1035493594
#. *
#. * Mutator for setting the chat state of this chat session.
#. * Handles clearing of any chat state notification timeouts and
#. * setting new ones if necessary.
#. * Timeouts are set when the  state being set is COMPOSING or PAUSED.
#. * After the timeout, COMPOSING will become PAUSED and PAUSED will become INACTIVE.
#. * See XEP-0085 Chat State Notifications.
#. * @method ChatBox#setChatState
#. * @param { string } state - The chat state (consts ACTIVE, COMPOSING, PAUSED, INACTIVE, GONE)
#.
#. *
#. * Given an error `<message>` stanza's attributes, find the saved message model which is
#. * referenced by that error.
#. * @param {object} attrs
#.
#. *
#. * @method ChatBox#shouldShowErrorMessage
#. * @param {object} attrs
#. * @returns {Promise<boolean>}
#.
#. If the error refers to a message not included in our store,
#. and it has a chat state tag, we assume that this was a
#. CSI message (which we don't store).
#. See https://github.com/conversejs/converse.js/issues/1317
#. Gets overridden in MUC
#. Return promise because subclasses need to return promises
#. *
#. * @param {string} jid1
#. * @param {string} jid2
#.
#. *
#. * Looks whether we already have a retraction for this
#. * incoming message. If so, it's considered "dangling" because it
#. * probably hasn't been applied to anything yet, given that the
#. * relevant message is only coming in now.
#. * @private
#. * @method ChatBox#findDanglingRetraction
#. * @param { object } attrs - Attributes representing a received
#. *  message, as returned by {@link parseMessage}
#. * @returns { Message }
#.
#. Only look for dangling retractions if there are newer
#. messages than this one, since retractions come after.
#. Search from latest backwards
#. *
#. * Handles message retraction based on the passed in attributes.
#. * @method ChatBox#handleRetraction
#. * @param {object} attrs - Attributes representing a received
#. *  message, as returned by {@link parseMessage}
#. * @returns {Promise<Boolean>} Returns `true` or `false` depending on
#. *  whether a message was retracted or not.
#.
#. #__PURE__
#. Check if we have dangling retraction
#. Delete id, otherwise a new cache entry gets created
#. *
#. * Returns an already cached message (if it exists) based on the
#. * passed in attributes map.
#. * @method ChatBox#getDuplicateMessage
#. * @param {object} attrs - Attributes representing a received
#. *  message, as returned by {@link parseMessage}
#. * @returns {Message}
#.
#. XXX: Need to take XEP-428 <fallback> into consideration
#. We can't match the message if it's a reflected
#. encrypted message (e.g. via MAM or in a MUC)
#. *
#. * Retract one of your messages in this chat
#. * @method ChatBoxView#retractOwnMessage
#. * @param { Message } message - The message which we're retracting.
#.
#. *
#. * Sends a message stanza to retract a message in this chat
#. * @private
#. * @method ChatBox#sendRetractionMessage
#. * @param { Message } message - The message which we're retracting.
#.
#. *
#. * Finds the last eligible message and then sends a XEP-0333 chat marker for it.
#. * @param { ('received'|'displayed'|'acknowledged') } [type='displayed']
#. * @param { Boolean } force - Whether a marker should be sent for the
#. *  message, even if it didn't include a `markable` element.
#.
#. *
#. * Given the passed in message object, send a XEP-0333 chat marker.
#. * @param { Message } msg
#. * @param { ('received'|'displayed'|'acknowledged') } [type='displayed']
#. * @param { Boolean } force - Whether a marker should be sent for the
#. *  message, even if it didn't include a `markable` element.
#.
#. *
#. * Given a {@link Message} return the XML stanza that represents it.
#. * @private
#. * @method ChatBox#createMessageStanza
#. * @param { Message } message - The message object
#.
#. #__PURE__
#. *
#. * *Hook* which allows plugins to update an outgoing message stanza
#. * @event _converse#createMessageStanza
#. * @param { ChatBox | MUC } chat - The chat from
#. *      which this message stanza is being sent.
#. * @param { Object } data - Message data
#. * @param { Message | MUCMessage } data.message
#. *      The message object from which the stanza is created and which gets persisted to storage.
#. * @param { Strophe.Builder } data.stanza
#. *      The stanza that will be sent out, as a Strophe.Builder object.
#. *      You can use the Strophe.Builder functions to extend the stanza.
#. *      See http://strophe.im/strophejs/doc/1.4.3/files/strophe-umd-js.html#Strophe.Builder.Functions
#.
#. #__PURE__
#. *
#. * *Hook* which allows plugins to update the attributes of an outgoing message.
#. * These attributes get set on the {@link Message} or
#. * {@link MUCMessage} and persisted to storage.
#. * @event _converse#getOutgoingMessageAttributes
#. * @param {ChatBox|MUC} chat
#. *      The chat from which this message will be sent.
#. * @param {MessageAttributes} attrs
#. *      The message attributes, from which the stanza will be created.
#.
#. *
#. * Responsible for setting the editable attribute of messages.
#. * If api.settings.get('allow_message_corrections') is "last", then only the last
#. * message sent from me will be editable. If set to "all" all messages
#. * will be editable. Otherwise no messages will be editable.
#. * @method ChatBox#setEditable
#. * @memberOf ChatBox
#. * @param {Object} attrs An object containing message attributes.
#. * @param {String} send_time - time when the message was sent
#.
#. *
#. * Queue the creation of a message, to make sure that we don't run
#. * into a race condition whereby we're creating a new message
#. * before the collection has been fetched.
#. * @method ChatBox#createMessage
#. * @param {Object} attrs
#.
#. #__PURE__
#. *
#. * Responsible for sending off a text message inside an ongoing chat conversation.
#. * @method ChatBox#sendMessage
#. * @memberOf ChatBox
#. * @param {Object} [attrs] - A map of attributes to be saved on the message
#. * @returns {Promise<Message>}
#. * @example
#. * const chat = api.chats.get('buddy1@example.org');
#. * chat.sendMessage({'body': 'hello world'});
#.
#. #__PURE__
#. *
#. * Triggered when a message is being sent out
#. * @event _converse#sendMessage
#. * @type { Object }
#. * @param { Object } data
#. * @property { (ChatBox | MUC) } data.chatbox
#. * @property { (Message | MUCMessage) } data.message
#.
#. *
#. * Sends a message with the current XEP-0085 chat state of the user
#. * as taken from the `chat_state` attribute of the {@link ChatBox}.
#. * @method ChatBox#sendChatState
#.
#. *
#. * @param {File[]} files
#.
#. #__PURE__
#: dist/converse-no-dependencies.js:15744
#: dist/converse-no-dependencies.js:58672
#: dist/converse-no-dependencies.js:58691
msgid "Sorry, looks like file upload is not supported by your server."
msgstr ""

#. #__PURE__
#. #__PURE__
#: dist/converse-no-dependencies.js:15744
#: dist/converse-no-dependencies.js:58712
#, javascript-format
msgid ""
"The size of your file, %1$s, exceeds the maximum allowed by your server."
msgstr ""

#: dist/converse-no-dependencies.js:15744
#: dist/converse-no-dependencies.js:58712
#, javascript-format
msgid ""
"The size of your file, %1$s, exceeds the maximum allowed by your server, "
"which is %2$s."
msgstr ""

#. *
#. * @param {boolean} force
#.
#. We only have one chat visible at any one time.
#. So before opening a chat, we make sure all other chats are hidden.
#. *
#. * Indicates whether the chat is hidden and therefore
#. * whether a newly received message will be visible
#. * to the user or not.
#. * @returns {boolean}
#.
#. *
#. * Given a newly received {@link Message} instance,
#. * update the unread counter if necessary.
#. * @method ChatBox#handleUnreadMessage
#. * @param {Message} message
#.
#. We remove the "scrolled" flag so that the chat area
#. gets scrolled down. We always want to scroll down
#. when the user writes a message as opposed to when a
#. message is received.
#. *
#. * @param {Message} message
#.
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/utils/parse-helpers.js
#. *
#. * @copyright 2022, the Converse.js contributors
#. * @license Mozilla Public License (MPLv2)
#. * @description Pure functions to help functionally parse messages.
#. * @todo Other parsing helpers can be made more abstract and placed here.
#.
#. `for` is ~25% faster than using `Array.find()`
#. -1 to compensate for the removed @
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/plugins/muc/constants.js
#. No longer used in code, but useful as reference.
#.
#. const ROOM_FEATURES_MAP = {
#. 'passwordprotected': 'unsecured',
#. 'unsecured': 'passwordprotected',
#. 'hidden': 'publicroom',
#. 'publicroom': 'hidden',
#. 'membersonly': 'open',
#. 'open': 'membersonly',
#. 'persistent': 'temporary',
#. 'temporary': 'persistent',
#. 'nonanonymous': 'semianonymous',
#. 'semianonymous': 'nonanonymous',
#. 'moderated': 'unmoderated',
#. 'unmoderated': 'moderated'
#. };
#. CONCATENATED MODULE: ./src/headless/plugins/muc/parsers.js
#. *
#. * @module:plugin-muc-parsers
#. * @typedef {import('../muc/muc.js').default} MUC
#. * @typedef {module:plugin-muc-parsers.MUCMessageAttributes} MUCMessageAttributes
#.
#. *
#. * Parses a message stanza for XEP-0317 MEP notification data
#. * @param { Element } stanza - The message stanza
#. * @returns { Array } Returns an array of objects representing <activity> elements.
#.
#. *
#. * Given a MUC stanza, check whether it has extended message information that
#. * includes the sender's real JID, as described here:
#. * https://xmpp.org/extensions/xep-0313.html#business-storeret-muc-archives
#. *
#. * If so, parse and return that data and return the user's JID
#. *
#. * Note, this function doesn't check whether this is actually a MAM archived stanza.
#. *
#. * @private
#. * @param { Element } stanza - The message stanza
#. * @returns { Object }
#.
#. *
#. * @private
#. * @param {Element} stanza - The message stanza
#. *  message stanza, if it was contained, otherwise it's the message stanza itself.
#. * @returns {Object}
#.
#. *
#. * Determines whether the sender of this MUC message is the current user or
#. * someone else.
#. * @param {MUCMessageAttributes} attrs
#. * @param {MUC} chatbox
#. * @returns {'me'|'them'}
#.
#. *
#. * Parses a passed in message stanza and returns an object of attributes.
#. * @param {Element} stanza - The message stanza
#. * @param {MUC} chatbox
#. * @returns {Promise<MUCMessageAttributes|Error>}
#.
#. *
#. * Given an IQ stanza with a member list, create an array of objects containing
#. * known member data (e.g. jid, nick, role, affiliation).
#. *
#. * @typedef {Object} MemberListItem
#. * Either the JID or the nickname (or both) will be available.
#. * @property {string} affiliation
#. * @property {string} [role]
#. * @property {string} [jid]
#. * @property {string} [nick]
#. *
#. * @method muc_utils#parseMemberListIQ
#. * @returns { MemberListItem[] }
#.
#. #__PURE__
#. *
#. * @typedef {Object} MUCMessageAttributes
#. * The object which {@link parseMUCMessage} returns
#. * @property { ('me'|'them') } sender - Whether the message was sent by the current user or someone else
#. * @property { Array<Object> } activities - A list of objects representing XEP-0316 MEP notification data
#. * @property { Array<Object> } references - A list of objects representing XEP-0372 references
#. * @property { Boolean } editable - Is this message editable via XEP-0308?
#. * @property { Boolean } is_archived -  Is this message from a XEP-0313 MAM archive?
#. * @property { Boolean } is_carbon - Is this message a XEP-0280 Carbon?
#. * @property { Boolean } is_delayed - Was delivery of this message was delayed as per XEP-0203?
#. * @property { Boolean } is_encrypted -  Is this message XEP-0384  encrypted?
#. * @property { Boolean } is_error - Whether an error was received for this message
#. * @property { Boolean } is_headline - Is this a "headline" message?
#. * @property { Boolean } is_markable - Can this message be marked with a XEP-0333 chat marker?
#. * @property { Boolean } is_marker - Is this message a XEP-0333 Chat Marker?
#. * @property { Boolean } is_only_emojis - Does the message body contain only emojis?
#. * @property { Boolean } is_spoiler - Is this a XEP-0382 spoiler message?
#. * @property { Boolean } is_tombstone - Is this a XEP-0424 tombstone?
#. * @property { Boolean } is_unstyled - Whether XEP-0393 styling hints should be ignored
#. * @property { Boolean } is_valid_receipt_request - Does this message request a XEP-0184 receipt (and is not from us or a carbon or archived message)
#. * @property { Object } encrypted -  XEP-0384 encryption payload attributes
#. * @property { String } body - The contents of the <body> tag of the message stanza
#. * @property { String } chat_state - The XEP-0085 chat state notification contained in this message
#. * @property { String } edited - An ISO8601 string recording the time that the message was edited per XEP-0308
#. * @property { String } error_condition - The defined error condition
#. * @property { String } error_text - The error text received from the server
#. * @property { String } error_type - The type of error received from the server
#. * @property { String } from - The sender JID (${muc_jid}/${nick})
#. * @property { String } from_muc - The JID of the MUC from which this message was sent
#. * @property { String } from_real_jid - The real JID of the sender, if available
#. * @property { String } fullname - The full name of the sender
#. * @property { String } marker - The XEP-0333 Chat Marker value
#. * @property { String } marker_id - The `id` attribute of a XEP-0333 chat marker
#. * @property { String } moderated - The type of XEP-0425 moderation (if any) that was applied
#. * @property { String } moderated_by - The JID of the user that moderated this message
#. * @property { String } moderated_id - The  XEP-0359 Stanza ID of the message that this one moderates
#. * @property { String } moderation_reason - The reason provided why this message moderates another
#. * @property { String } msgid - The root `id` attribute of the stanza
#. * @property { String } nick - The MUC nickname of the sender
#. * @property { String } occupant_id - The XEP-0421 occupant ID
#. * @property { String } oob_desc - The description of the XEP-0066 out of band data
#. * @property { String } oob_url - The URL of the XEP-0066 out of band data
#. * @property { String } origin_id - The XEP-0359 Origin ID
#. * @property { String } receipt_id - The `id` attribute of a XEP-0184 <receipt> element
#. * @property { String } received - An ISO8601 string recording the time that the message was received
#. * @property { String } replace_id - The `id` attribute of a XEP-0308 <replace> element
#. * @property { String } retracted - An ISO8601 string recording the time that the message was retracted
#. * @property { String } retracted_id - The `id` attribute of a XEP-424 <retracted> element
#. * @property { String } spoiler_hint  The XEP-0382 spoiler hint
#. * @property { String } stanza_id - The XEP-0359 Stanza ID. Note: the key is actualy `stanza_id ${by_jid}` and there can be multiple.
#. * @property { String } subject - The <subject> element value
#. * @property { String } thread - The <thread> element value
#. * @property { String } time - The time (in ISO8601 format), either given by the XEP-0203 <delay> element, or of receipt.
#. * @property { String } to - The recipient JID
#. * @property { String } type - The type of message
#.
#. TODO: Should only be used for error and info messages
#. We prefer to use one of the XEP-0359 unique and stable stanza IDs as the Model id, to avoid duplicates.
#. *
#. * *Hook* which allows plugins to add additional parsing
#. * @event _converse#parseMUCMessage
#.
#. XXX: Prosody sends nick for the jid attribute value
#. Perhaps for anonymous room?
#. *
#. * Parses a passed in MUC presence stanza and returns an object of attributes.
#. * @method parseMUCPresence
#. * @param {Element} stanza - The presence stanza
#. * @param {MUC} chatbox
#. * @returns {MUCPresenceAttributes}
#.
#. *
#. * Object representing a XEP-0371 Hat
#. * @typedef {Object} MUCHat
#. * @property {string} title
#. * @property {string} uri
#. *
#. * The object which {@link parseMUCPresence} returns
#. * @typedef {Object} MUCPresenceAttributes
#. * @property {string} show
#. * @property {Array<MUCHat>} hats - An array of XEP-0317 hats
#. * @property {Array<string>} states
#. * @property {String} from - The sender JID (${muc_jid}/${nick})
#. * @property {String} nick - The nickname of the sender
#. * @property {String} occupant_id - The XEP-0421 occupant ID
#. * @property {String} type - The type of presence
#. * @property {String} [jid]
#. * @property {boolean} [is_me]
#.
#. CONCATENATED MODULE: ./src/headless/plugins/muc/affiliations/utils.js
#. *
#. * @copyright The Converse.js contributors
#. * @license Mozilla Public License (MPLv2)
#. * @module:muc-affiliations-utils
#. * @typedef {module:plugin-muc-parsers.MemberListItem} MemberListItem
#. * @typedef {module:plugin-muc-affiliations-api.User} User
#. * @typedef {import('@converse/skeletor').Model} Model
#.
#. *
#. * Sends an IQ stanza to the server, asking it for the relevant affiliation list .
#. * Returns an array of {@link MemberListItem} objects, representing occupants
#. * that have the given affiliation.
#. * See: https://xmpp.org/extensions/xep-0045.html#modifymember
#. * @typedef {("admin"|"owner"|"member")} NonOutcastAffiliation
#. * @param {NonOutcastAffiliation} affiliation
#. * @param {string} muc_jid - The JID of the MUC for which the affiliation list should be fetched
#. * @returns {Promise<MemberListItem[]|Error>}
#.
#. *
#. * Given an occupant model, see which affiliations may be assigned by that user
#. * @param {Model} occupant
#. * @returns {typeof AFFILIATIONS} An array of assignable affiliations
#.
#. #__PURE__
#: dist/converse-no-dependencies.js:15945
#: dist/converse-no-dependencies.js:46517
#, javascript-format
msgid "Error: timeout while fetching %1s list for MUC %2s"
msgstr ""

#: dist/converse-no-dependencies.js:15945
#: dist/converse-no-dependencies.js:46526
#, javascript-format
msgid "Error: not allowed to fetch %1s list for MUC %2s"
msgstr ""

#: dist/converse-no-dependencies.js:16140
#: dist/converse-no-dependencies.js:60346
msgid ""
"Your retraction was not delivered because you're not present in the "
"groupchat."
msgstr ""

#: dist/converse-no-dependencies.js:16140
#: dist/converse-no-dependencies.js:60353
msgid "Your message was not delivered because you weren't allowed to send it."
msgstr ""

#: dist/converse-no-dependencies.js:16140
#: dist/converse-no-dependencies.js:60355
msgid ""
"Your message was not delivered because you're not present in the groupchat."
msgstr ""

#. *
#. * Handles incoming message stanzas from the service that hosts this MUC
#. * @private
#. * @method MUC#handleMessageFromMUCHost
#. * @param { Element } stanza
#.
#. We're not interested in activity indicators when already joined to the room
#. Either/or between activity and unreads
#. *
#. * Handles XEP-0452 MUC Mention Notification messages
#. * @private
#. * @method MUC#handleForwardedMentions
#. * @param { Element } stanza
#.
#. Avoid counting mentions twice
#. #__PURE__
#. #__PURE__
#. *
#. * Parses an incoming message stanza and queues it for processing.
#. * @private
#. * @method MUC#handleMessageStanza
#. * @param {Strophe.Builder|Element} stanza
#.
#. #__PURE__
#. *
#. * An object containing the parsed {@link MUCMessageAttributes} and current {@link MUC}.
#. * @typedef {object} MUCMessageData
#. * @property {MUCMessageAttributes} attrs
#. * @property {MUC} chatbox
#. *
#. * Triggered when a groupchat message stanza has been received and parsed.
#. * @event _converse#message
#. * @type {object}
#. * @property {MUCMessageData} data
#.
#. *
#. * Register presence and message handlers relevant to this groupchat
#. * @private
#. * @method MUC#registerHandlers
#.
#. * @param {Element} stanza
#. * @param {Element} stanza
#. * @param {Element} stanza
#. * @param {Element} stanza
#. Remove the presence and message handlers that were
#. registered for this groupchat.
#. *
#. * Sends a message stanza to the XMPP server and expects a reflection
#. * or error message within a specific timeout period.
#. * @private
#. * @method MUC#sendTimedMessage
#. * @param {Strophe.Builder|Element } message
#. * @returns { Promise<Element>|Promise<TimeoutError> } Returns a promise
#. *  which resolves with the reflected message stanza or with an error stanza or
#. *  {@link TimeoutError}.
#.
#. inject id if not found
#. *
#. * Retract one of your messages in this groupchat
#. * @method MUC#retractOwnMessage
#. * @param {MUCMessage} message - The message which we're retracting.
#.
#. #__PURE__
#. Optimistic save
#: dist/converse-no-dependencies.js:16189
#: dist/converse-no-dependencies.js:60711
msgid "A timeout happened while while trying to retract your message."
msgstr ""

#. *
#. * Retract someone else's message in this groupchat.
#. * @method MUC#retractOtherMessage
#. * @param {MUCMessage} message - The message which we're retracting.
#. * @param {string} [reason] - The reason for retracting the message.
#. * @example
#. *  const room = await api.rooms.get(jid);
#. *  const message = room.messages.findWhere({'body': 'Get rich quick!'});
#. *  room.retractOtherMessage(message, 'spam');
#.
#. #__PURE__
#. Optimistic save
#. Undo the save if something went wrong
#. *
#. * Sends an IQ stanza to the XMPP server to retract a message in this groupchat.
#. * @private
#. * @method MUC#sendRetractionIQ
#. * @param {MUCMessage} message - The message which we're retracting.
#. * @param {string} [reason] - The reason for retracting the message.
#.
#. *
#. * Sends an IQ stanza to the XMPP server to destroy this groupchat. Not
#. * to be confused with the {@link MUC#destroy}
#. * method, which simply removes the room from the local browser storage cache.
#. * @private
#. * @method MUC#sendDestroyIQ
#. * @param { string } [reason] - The reason for destroying the groupchat.
#. * @param { string } [new_jid] - The JID of the new groupchat which replaces this one.
#.
#. *
#. * Leave the groupchat.
#. * @private
#. * @method MUC#leave
#. * @param { string } [exit_msg] - Message to indicate your reason for leaving
#.
#. #__PURE__
#. Delete the features model
#. Delete disco entity
#. #__PURE__
#. Delete the session model
#. *
#. * Return an array of unique nicknames based on all occupants and messages in this MUC.
#. * @private
#. * @method MUC#getAllKnownNicknames
#. * @returns { String[] }
#.
#. *
#. * Given a text message, look for `@` mentions and turn them into
#. * XEP-0372 references
#. * @param { String } text
#.
#. edge-case
#. #__PURE__
#. *
#. * *Hook* which allows plugins to update the attributes of an outgoing
#. * message.
#. * @event _converse#getOutgoingMessageAttributes
#.
#. *
#. * Utility method to construct the JID for the current user as occupant of the groupchat.
#. * @private
#. * @method MUC#getRoomJIDAndNick
#. * @returns {string} - The groupchat JID with the user's nickname added at the end.
#. * @example groupchat@conference.example.org/nickname
#.
#. *
#. * Sends a message with the current XEP-0085 chat state of the user
#. * as taken from the `chat_state` attribute of the {@link MUC}.
#. * @method MUC#sendChatState
#.
#. <gone/> is not applicable within MUC context
#. *
#. * Send a direct invitation as per XEP-0249
#. * @private
#. * @method MUC#directInvite
#. * @param { String } recipient - JID of the person being invited
#. * @param { String } [reason] - Reason for the invitation
#.
#. When inviting to a members-only groupchat, we first add
#. the person to the member list by giving them an
#. affiliation of 'member' otherwise they won't be able to join.
#. *
#. * After the user has sent out a direct invitation (as per XEP-0249),
#. * to a roster contact, asking them to join a room.
#. * @event _converse#chatBoxMaximized
#. * @type {object}
#. * @property {MUC} room
#. * @property {string} recipient - The JID of the person being invited
#. * @property {string} reason - The original reason for the invitation
#. * @example _converse.api.listen.on('chatBoxMaximized', view => { ... });
#.
#. *
#. * Refresh the disco identity, features and fields for this {@link MUC}.
#. * *features* are stored on the features {@link Model} attribute on this {@link MUC}.
#. * *fields* are stored on the config {@link Model} attribute on this {@link MUC}.
#. * @private
#. * @returns {Promise}
#.
#. *
#. * Fetch the *extended* MUC info from the server and cache it locally
#. * https://xmpp.org/extensions/xep-0045.html#disco-roominfo
#. * @private
#. * @method MUC#getDiscoInfo
#. * @returns {Promise}
#.
#. *
#. * Fetch the *extended* MUC info fields from the server and store them locally
#. * in the `config` {@link Model} attribute.
#. * See: https://xmpp.org/extensions/xep-0045.html#disco-roominfo
#. * @private
#. * @method MUC#getDiscoInfoFields
#. * @returns {Promise}
#.
#. #__PURE__
#. *
#. * Use converse-disco to populate the features {@link Model} which
#. * is stored as an attibute on this {@link MUC}.
#. * The results may be cached. If you want to force fetching the features from the
#. * server, call {@link MUC#refreshDiscoInfo} instead.
#. * @private
#. * @returns {Promise}
#.
#. #__PURE__
#. *
#. * Given a <field> element, return a copy with a <value> child if
#. * we can find a value for it in this rooms config.
#. * @private
#. * @method MUC#addFieldValue
#. * @param {Element} field
#. * @returns {Element}
#.
#. *
#. * Automatically configure the groupchat based on this model's
#. * 'roomconfig' data.
#. * @private
#. * @method MUC#autoConfigureChatRoom
#. * @returns {Promise<Element>}
#. * Returns a promise which resolves once a response IQ has
#. * been received.
#.
#. #__PURE__
#. *
#. * Send an IQ stanza to fetch the groupchat configuration data.
#. * Returns a promise which resolves once the response IQ
#. * has been received.
#. * @private
#. * @method MUC#fetchRoomConfiguration
#. * @returns { Promise<Element> }
#.
#. *
#. * Sends an IQ stanza with the groupchat configuration.
#. * @private
#. * @method MUC#sendConfiguration
#. * @param { Array } config - The groupchat configuration
#. * @returns { Promise<Element> } - A promise which resolves with
#. * the `result` stanza received from the XMPP server.
#.
#: dist/converse-no-dependencies.js:16320
#: dist/converse-no-dependencies.js:61472
msgid "Sorry, an error happened while running the command."
msgstr ""

#: dist/converse-no-dependencies.js:16320
#: dist/converse-no-dependencies.js:61472
#: dist/converse-no-dependencies.js:97727
msgid "Check your browser's developer console for details."
msgstr ""

#: dist/converse-no-dependencies.js:16320
#: dist/converse-no-dependencies.js:61491
#: dist/converse-no-dependencies.js:61509
msgid "Error: couldn't find a groupchat participant based on your arguments"
msgstr ""

#: dist/converse-no-dependencies.js:16320
#: dist/converse-no-dependencies.js:61499
msgid "Error: found multiple groupchat participant based on your arguments"
msgstr ""

#: dist/converse-no-dependencies.js:16320
#: dist/converse-no-dependencies.js:61523
#, javascript-format
msgid ""
"Error: the \"%1$s\" command takes two arguments, the user's nickname and "
"optionally a reason."
msgstr ""

#: dist/converse-no-dependencies.js:16320
#: dist/converse-no-dependencies.js:61584
msgid ""
"Forbidden: you do not have the necessary affiliation in order to do that."
msgstr ""

#: dist/converse-no-dependencies.js:16320
#: dist/converse-no-dependencies.js:61614
msgid "Forbidden: you do not have the necessary role in order to do that."
msgstr ""

#. *
#. * Returns the `role` which the current user has in this MUC
#. * @private
#. * @method MUC#getOwnRole
#. * @returns { ('none'|'visitor'|'participant'|'moderator') }
#.
#. *
#. * Returns the `affiliation` which the current user has in this MUC
#. * @private
#. * @method MUC#getOwnAffiliation
#. * @returns { ('none'|'outcast'|'member'|'admin'|'owner') }
#.
#. *
#. * Get the {@link MUCOccupant} instance which
#. * represents the current user.
#. * @method MUC#getOwnOccupant
#. * @returns {MUCOccupant}
#.
#. *
#. * Send a presence stanza to update the user's nickname in this MUC.
#. * @param { String } nick
#.
#. #__PURE__
#: dist/converse-no-dependencies.js:16338
#: dist/converse-no-dependencies.js:61703
msgid "Error: couldn't register new nickname in members only room"
msgstr ""

#. *
#. * Send an IQ stanza to modify an occupant's role
#. * @method MUC#setRole
#. * @param {MUCOccupant} occupant
#. * @param {string} role
#. * @param {string} reason
#. * @param {function} onSuccess - callback for a succesful response
#. * @param {function} onError - callback for an error response
#.
#. *
#. * @method MUC#getOccupant
#. * @param {string} nickname_or_jid - The nickname or JID of the occupant to be returned
#. * @returns {MUCOccupant}
#.
#. *
#. * Return an array of occupant models that have the required role
#. * @method MUC#getOccupantsWithRole
#. * @param {string} role
#. * @returns {{jid: string, nick: string, role: string}[]}
#.
#. * @type {string}
#. * @type {string}
#. * @type {string}
#. *
#. * Return an array of occupant models that have the required affiliation
#. * @method MUC#getOccupantsWithAffiliation
#. * @param {string} affiliation
#. * @returns {{jid: string, nick: string, affiliation: string}[]}
#.
#. * @type {string}
#. * @type {string}
#. * @type {string}
#. *
#. * Return an array of occupant models, sorted according to the passed-in attribute.
#. * @private
#. * @method MUC#getOccupantsSortedBy
#. * @param {string} attr - The attribute to sort the returned array by
#. * @returns {MUCOccupant[]}
#.
#. *
#. * Fetch the lists of users with the given affiliations.
#. * Then compute the delta between those users and
#. * the passed in members, and if it exists, send the delta
#. * to the XMPP server to update the member list.
#. * @private
#. * @method MUC#updateMemberLists
#. * @param {object} members - Map of member jids and affiliations.
#. * @returns {Promise}
#. *  A promise which is resolved once the list has been
#. *  updated or once it's been established there's no need
#. *  to update the list.
#.
#. #__PURE__
#. * @type {Array<NonOutcastAffiliation>}
#. *
#. * @param {MemberListItem[]} acc
#. * @param {MemberListItem[]|Error} val
#. * @returns {MemberListItem[]}
#.
#. * @type {MemberListItem[]}
#. *
#. * Given a nick name, save it to the model state, otherwise, look
#. * for a server-side reserved nickname or default configured
#. * nickname and if found, persist that to the model state.
#. * @method MUC#getAndPersistNickname
#. * @param {string} nick
#. * @returns {Promise<string>} A promise which resolves with the nickname
#.
#. #__PURE__
#. *
#. * Use service-discovery to ask the XMPP server whether
#. * this user has a reserved nickname for this groupchat.
#. * If so, we'll use that, otherwise we render the nickname form.
#. * @private
#. * @method MUC#getReservedNick
#. * @returns { Promise<string> } A promise which resolves with the reserved nick or null
#.
#. #__PURE__
#. Result might be undefined due to a timeout
#. *
#. * Send an IQ stanza to the MUC to register this user's nickname.
#. * This sets the user's affiliation to 'member' (if they weren't affiliated
#. * before) and reserves the nickname for this user, thereby preventing other
#. * users from using it in this MUC.
#. * See https://xmpp.org/extensions/xep-0045.html#register
#. * @private
#. * @method MUC#registerNickname
#.
#. #__PURE__
#: dist/converse-no-dependencies.js:16405
#: dist/converse-no-dependencies.js:62018
msgid "You're not allowed to register yourself in this groupchat."
msgstr ""

#: dist/converse-no-dependencies.js:16405
#: dist/converse-no-dependencies.js:62020
msgid ""
"You're not allowed to register in this groupchat because it's members-only."
msgstr ""

#: dist/converse-no-dependencies.js:16405
#: dist/converse-no-dependencies.js:62056
msgid ""
"Can't register your nickname in this groupchat, it doesn't support "
"registration."
msgstr ""

#: dist/converse-no-dependencies.js:16405
#: dist/converse-no-dependencies.js:62058
msgid ""
"Can't register your nickname in this groupchat, invalid data form supplied."
msgstr ""

#. *
#. * Check whether we should unregister the user from this MUC, and if so,
#. * call { @link MUC#sendUnregistrationIQ }
#. * @method MUC#unregisterNickname
#.
#. #__PURE__
#. *
#. * Send an IQ stanza to the MUC to unregister this user's nickname.
#. * If the user had a 'member' affiliation, it'll be removed and their
#. * nickname will no longer be reserved and can instead be used (and
#. * registered) by other users.
#. * @method MUC#sendUnregistrationIQ
#.
#. *
#. * Given a presence stanza, update the occupant model based on its contents.
#. * @private
#. * @method MUC#updateOccupantsOnPresence
#. * @param { Element } pres - The presence stanza
#.
#. Destroy an unavailable occupant if this isn't a nick change operation and if they're not affiliated
#. Before destroying we set the new data, so that we can show the disconnection message
#. 104: configuration change
#. 170: logging enabled
#. 171: logging disabled
#. 172: room no longer anonymous
#. 173: room now semi-anonymous
#. 174: room now fully anonymous
#. *
#. * Given two JIDs, which can be either user JIDs or MUC occupant JIDs,
#. * determine whether they belong to the same user.
#. * @method MUC#isSameUser
#. * @param { String } jid1
#. * @param { String } jid2
#. * @returns { Boolean }
#.
#. MUC JIDs
#. #__PURE__
#. #__PURE__
#. *
#. * Handle a possible subject change and return `true` if so.
#. * @private
#. * @method MUC#handleSubjectChange
#. * @param { object } attrs - Attributes representing a received
#. *  message, as returned by {@link parseMUCMessage}
#.
#. #__PURE__
#. https://xmpp.org/extensions/xep-0045.html#subject-mod
#. -----------------------------------------------------
#. The subject is changed by sending a message of type "groupchat" to the <room@service>,
#. where the <message/> MUST contain a <subject/> element that specifies the new subject but
#. MUST NOT contain a <body/> element (or a <thread/> element).
#: dist/converse-no-dependencies.js:16447
#: dist/converse-no-dependencies.js:62329
#, javascript-format
msgid "Topic set by %1$s"
msgstr ""

#: dist/converse-no-dependencies.js:16447
#: dist/converse-no-dependencies.js:62329
#, javascript-format
msgid "Topic cleared by %1$s"
msgstr ""

#: dist/converse-no-dependencies.js:16508
#: dist/converse-no-dependencies.js:62741
#, javascript-format
msgid "%1$s has entered the groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:16508
#: dist/converse-no-dependencies.js:62743
#, javascript-format
msgid "%1$s has left the groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:16508
#: dist/converse-no-dependencies.js:62745
#, javascript-format
msgid "%1$s is now a moderator"
msgstr ""

#: dist/converse-no-dependencies.js:16508
#: dist/converse-no-dependencies.js:62747
#, javascript-format
msgid "%1$s is no longer a moderator"
msgstr ""

#: dist/converse-no-dependencies.js:16508
#: dist/converse-no-dependencies.js:62749
#, javascript-format
msgid "%1$s has been given a voice"
msgstr ""

#: dist/converse-no-dependencies.js:16508
#: dist/converse-no-dependencies.js:62751
#, javascript-format
msgid "%1$s has been muted"
msgstr ""

#: dist/converse-no-dependencies.js:16508
#: dist/converse-no-dependencies.js:62759
#, javascript-format
msgid "%1$s and %2$s"
msgstr ""

#: dist/converse-no-dependencies.js:16508
#: dist/converse-no-dependencies.js:62762
#, javascript-format
msgid "%1$s are typing"
msgstr ""

#: dist/converse-no-dependencies.js:16508
#: dist/converse-no-dependencies.js:62764
#, javascript-format
msgid "%1$s have stopped typing"
msgstr ""

#: dist/converse-no-dependencies.js:16508
#: dist/converse-no-dependencies.js:62766
#, javascript-format
msgid "%1$s have gone away"
msgstr ""

#: dist/converse-no-dependencies.js:16508
#: dist/converse-no-dependencies.js:62768
#, javascript-format
msgid "%1$s have entered the groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:16508
#: dist/converse-no-dependencies.js:62770
#, javascript-format
msgid "%1$s have left the groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:16508
#: dist/converse-no-dependencies.js:62772
#, javascript-format
msgid "%1$s are now moderators"
msgstr ""

#: dist/converse-no-dependencies.js:16508
#: dist/converse-no-dependencies.js:62774
#, javascript-format
msgid "%1$s are no longer moderators"
msgstr ""

#: dist/converse-no-dependencies.js:16508
#: dist/converse-no-dependencies.js:62776
#, javascript-format
msgid "%1$s have been given voices"
msgstr ""

#: dist/converse-no-dependencies.js:16508
#: dist/converse-no-dependencies.js:62778
#, javascript-format
msgid "%1$s have been muted"
msgstr ""

#. *
#. * @param { String } actor - The nickname of the actor that caused the notification
#. * @param {String|Array<String>} states - The state or states representing the type of notificcation
#.
#. *
#. * Update the notifications model by adding the passed in nickname
#. * to the array of nicknames that all match a particular state.
#. *
#. * Removes the nickname from any other states it might be associated with.
#. *
#. * The state can be a XEP-0085 Chat State or a XEP-0045 join/leave
#. * state.
#. * @param { String } actor - The nickname of the actor that causes the notification
#. * @param { String } state - The state representing the type of notificcation
#.
#. For now we only allow metadata from the MUC itself and not
#. from individual users who are deemed less trustworthy.
#. Don't add metadata for the same URL again
#. *
#. * Given {@link MessageAttributes} look for XEP-0316 Room Notifications and create info
#. * messages for them.
#. * @param {MessageAttributes} attrs
#.
#. Trigger so that notifications are shown
#. *
#. * Returns an already cached message (if it exists) based on the
#. * passed in attributes map.
#. * @method MUC#getDuplicateMessage
#. * @param {object} attrs - Attributes representing a received
#. *  message, as returned by {@link parseMUCMessage}
#. * @returns {MUCMessage}
#.
#. *
#. * Handler for all MUC messages sent to this groupchat. This method
#. * shouldn't be called directly, instead {@link MUC#queueMessage}
#. * should be called.
#. * @method MUC#onMessage
#. * @param {MessageAttributes} attrs - A promise which resolves to the message attributes.
#.
#. #__PURE__
#. *
#. * @param {Element} pres
#.
#. *
#. * Handle a presence stanza that disconnects the user from the MUC
#. * @param { Element } stanza
#.
#. * @type {UserMessage}
#. By using querySelector we assume here there is
#. one <item> per <x xmlns='http://jabber.org/protocol/muc#user'>
#. element. This appears to be a safe assumption, since
#. each <x/> element pertains to a single user.
#: dist/converse-no-dependencies.js:16551
#: dist/converse-no-dependencies.js:63108
#, javascript-format
msgid "%1$s has been banned by %2$s"
msgstr ""

#: dist/converse-no-dependencies.js:16551
#: dist/converse-no-dependencies.js:63108
#, javascript-format
msgid "%1$s has been banned"
msgstr ""

#: dist/converse-no-dependencies.js:16551
#: dist/converse-no-dependencies.js:63110
#, javascript-format
msgid "%1$s's nickname has changed"
msgstr ""

#: dist/converse-no-dependencies.js:16551
#: dist/converse-no-dependencies.js:63112
#, javascript-format
msgid "%1$s has been kicked out by %2$s"
msgstr ""

#: dist/converse-no-dependencies.js:16551
#: dist/converse-no-dependencies.js:63112
#, javascript-format
msgid "%1$s has been kicked out"
msgstr ""

#: dist/converse-no-dependencies.js:16551
#: dist/converse-no-dependencies.js:63114
#, javascript-format
msgid "%1$s has been removed because of an affiliation change"
msgstr ""

#: dist/converse-no-dependencies.js:16551
#: dist/converse-no-dependencies.js:63116
#, javascript-format
msgid "%1$s has been removed for not being a member"
msgstr ""

#. If no previous affiliation was set, then we don't
#. interpret this as an affiliation change.
#. For example, if muc_send_probes is true, then occupants
#. are created based on incoming messages, in which case
#. we don't yet know the affiliation
#: dist/converse-no-dependencies.js:16556
#: dist/converse-no-dependencies.js:63136
#, javascript-format
msgid "%1$s is no longer an admin of this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:16556
#: dist/converse-no-dependencies.js:63141
#, javascript-format
msgid "%1$s is no longer an owner of this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:16556
#: dist/converse-no-dependencies.js:63146
#, javascript-format
msgid "%1$s is no longer banned from this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:16556
#: dist/converse-no-dependencies.js:63152
#, javascript-format
msgid "%1$s is no longer a member of this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:16556
#: dist/converse-no-dependencies.js:63158
#, javascript-format
msgid "%1$s is now a member of this groupchat"
msgstr ""

#. For example: AppleJack is now an (admin|owner) of this groupchat
#: dist/converse-no-dependencies.js:16557
#: dist/converse-no-dependencies.js:63164
#, javascript-format
msgid "%1$s is now an %2$s of this groupchat"
msgstr ""

#. We don't inform of role changes if they accompany affiliation changes.
#. Oly show this message if the user isn't already
#. an admin or owner, otherwise this isn't new information.
#. *
#. * Create an info message based on a received MUC status code
#. * @private
#. * @method MUC#createInfoMessage
#. * @param { string } code - The MUC status code
#. * @param { Element } stanza - The original stanza that contains the code
#. * @param { Boolean } is_self - Whether this stanza refers to our own presence
#.
#. * @type {UserMessage}
#. XXX: Side-effect of setting the nick. Should ideally be refactored out of this method
#. *
#. * Create info messages based on a received presence or message stanza
#. * @private
#. * @method MUC#createInfoMessages
#. * @param { Element } stanza
#.
#. See: https://github.com/xsf/xeps/pull/969/files#diff-ac5113766e59219806793c1f7d967f1bR4966
#. *
#. * Set parameters regarding disconnection from this room. This helps to
#. * communicate to the user why they were disconnected.
#. * @param {string} message - The disconnection message, as received from (or
#. *  implied by) the server.
#. * @param {string} [reason] - The reason provided for the disconnection
#. * @param {string} [actor] - The person (if any) responsible for this disconnection
#. * @param {number} [status] - The status code (see `ROOMSTATUS`)
#.
#. *
#. * @param {Element} presence
#.
#: dist/converse-no-dependencies.js:16584
#: dist/converse-no-dependencies.js:63306
msgid ""
"The nickname you chose is reserved or currently in use, please choose a "
"different one."
msgstr ""

#. *
#. * Parses a <presence> stanza with type "error" and sets the proper
#. * `connection_status` value for this {@link MUC} as
#. * well as any additional output that can be shown to the user.
#. * @private
#. * @param { Element } stanza - The presence stanza
#.
#. * @type {UserMessage}
#: dist/converse-no-dependencies.js:16590
#: dist/converse-no-dependencies.js:63335
msgid "Password incorrect"
msgstr ""

#: dist/converse-no-dependencies.js:16590
#: dist/converse-no-dependencies.js:63342
msgid "You are not on the member list of this groupchat."
msgstr ""

#: dist/converse-no-dependencies.js:16590
#: dist/converse-no-dependencies.js:63349
msgid "You are not allowed to create new groupchats."
msgstr ""

#: dist/converse-no-dependencies.js:16590
#: dist/converse-no-dependencies.js:63352
msgid "Your nickname doesn't conform to this groupchat's policies."
msgstr ""

#: dist/converse-no-dependencies.js:16590
#: dist/converse-no-dependencies.js:63367
msgid "This groupchat does not (yet) exist."
msgstr ""

#: dist/converse-no-dependencies.js:16590
#: dist/converse-no-dependencies.js:63370
msgid "This groupchat has reached its maximum number of participants."
msgstr ""

#: dist/converse-no-dependencies.js:16590
#: dist/converse-no-dependencies.js:63373
msgid "Remote server not found"
msgstr ""

#: dist/converse-no-dependencies.js:16590
#: dist/converse-no-dependencies.js:63376
msgid "You're not allowed to enter this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:16590
#: dist/converse-no-dependencies.js:63379
msgid "An error happened while trying to enter this groupchat"
msgstr ""

#. *
#. * Listens for incoming presence stanzas from the service that hosts this MUC
#. * @private
#. * @method MUC#onPresenceFromMUCHost
#. * @param { Element } stanza - The presence stanza
#.
#. If we get a <resource-constraint> error, we assume it's in context of XEP-0437 RAI.
#. We remove this MUC's host from the list of enabled domains and rejoin the MUC.
#. *
#. * Handles incoming presence stanzas coming from the MUC
#. * @private
#. * @method MUC#onPresence
#. * @param { Element } stanza
#.
#. *
#. * Handles a received presence relating to the current user.
#. *
#. * For locked groupchats (which are by definition "new"), the
#. * groupchat will either be auto-configured or created instantly
#. * (with default config) or a configuration groupchat will be
#. * rendered.
#. *
#. * If the groupchat is not locked, then the groupchat will be
#. * auto-configured only if applicable and if the current
#. * user is the groupchat's owner.
#. * @private
#. * @method MUC#onOwnPresence
#. * @param {Element} stanza - The stanza
#.
#. #__PURE__
#. Set connection_status before creating the occupant, but
#. only trigger afterwards, so that plugins can access the
#. occupant in their event handlers.
#. *
#. * Returns a boolean to indicate whether the current user
#. * was mentioned in a message.
#. * @method MUC#isUserMentioned
#. * @param {MUCMessage} message - The text message
#.
#. harmony default export
#. CONCATENATED MODULE: ./node_modules/hsluv/dist/hsluv.mjs
#. #__PURE__
#. RGB
#. CIE XYZ
#. CIE LUV
#. CIE LUV LCh
#. HSLuv
#. HPLuv
#. 6 lines in slope-intercept format: R < 0, R > 1, G < 0, G > 1, B < 0, B > 1
#. CONCATENATED MODULE: ./src/headless/utils/color.js
#. *
#. * Computes an RGB color as specified in XEP-0392
#. * https://xmpp.org/extensions/xep-0392.html
#. *
#. * @param {string} s JID or nickname to colorize
#. * @returns {Promise<string>}
#.
#. #__PURE__
#. We cache results in `cache`, to avoid unecessary computing (as it can be called very often)
#. Treat the output as little endian and extract the least-significant 16 bits.
#. (These are the first two bytes of the output, with the second byte being the most significant one.)
#. Divide the value by 65536 (use float division) and multiply it by 360 (to map it to degrees in a full circle).
#. Convert HSLuv angle to RGB Hex notation
#. CONCATENATED MODULE: ./src/headless/plugins/muc/occupant.js
#. *
#. * Represents a participant in a MUC
#. * @class
#. * @namespace _converse.MUCOccupant
#. * @memberOf _converse
#.
#. #__PURE__
#. eslint-disable-line no-eq-null
#. #__PURE__
#. #__PURE__
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/plugins/muc/occupants.js
#. *
#. * @typedef {module:plugin-muc-parsers.MemberListItem} MemberListItem
#. * @typedef {import('@converse/skeletor/src/types/collection').Attributes} Attributes
#. * @typedef {import('@converse/skeletor/src/types/collection').CollectionOptions} CollectionOptions
#. * @typedef {import('@converse/skeletor/src/types/collection').Options} Options
#.
#. *
#. * A list of {@link MUCOccupant} instances, representing participants in a MUC.
#. * @class
#. * @memberOf _converse
#.
#. #__PURE__
#. *
#. * @param {MUCOccupant[]} attrs
#. * @param {CollectionOptions} options
#.
#. *
#. * @param {Model|Attributes} attrs
#. * @param {Options} [options]
#.
#. #__PURE__
#. *
#. * @param {MemberListItem[]} acc
#. * @param {MemberListItem[]|Error} val
#. * @returns {MemberListItem[]}
#.
#. * @type {MemberListItem[]}
#. * @type {MemberListItem[]}
#. * @type {MemberListItem[]}
#. *
#. * Triggered once the member lists for this MUC have been fetched and processed.
#. * @event _converse#membersFetched
#. * @example _converse.api.listen.on('membersFetched', () => { ... });
#.
#. *
#. * @typedef { Object} OccupantData
#. * @property { String } [jid]
#. * @property { String } [nick]
#. * @property { String } [occupant_id] - The XEP-0421 unique occupant id
#.
#. *
#. * Try to find an existing occupant based on the provided
#. * @link { OccupantData } object.
#. *
#. * Fetching the user by `occupant_id` is the quickest, O(1),
#. * since it's a dictionary lookup.
#. *
#. * Fetching by jid or nick is O(n), since it requires traversing an array.
#. *
#. * Lookup by occupant_id is done first, then jid, and then nick.
#. *
#. * @method _converse.MUCOccupants#findOccupant
#. * @param { OccupantData } data
#.
#. *
#. * Get the {@link MUCOccupant} instance which
#. * represents the current user.
#. * @method _converse.MUCOccupants#getOwnOccupant
#. * @returns {MUCOccupant}
#.
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/plugins/chat/messages.js
#. #__PURE__
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/plugins/chat/api.js
#. *
#. * @typedef {import('./model.js').default} ChatBox
#.
#. harmony default export
#. *
#. * The "chats" namespace (used for one-on-one chats)
#. *
#. * @namespace api.chats
#. * @memberOf api
#.
#. *
#. * @method api.chats.create
#. * @param {string|string[]} jids An jid or array of jids
#. * @param {object} [attrs] An object containing configuration attributes.
#. * @returns {Promise<ChatBox|ChatBox[]>}
#.
#. #__PURE__
#. #__PURE__
#. #__PURE__
#. *
#. * Opens a new one-on-one chat.
#. *
#. * @method api.chats.open
#. * @param {String|string[]} jids - e.g. 'buddy@example.com' or ['buddy1@example.com', 'buddy2@example.com']
#. * @param {Object} [attrs] - Attributes to be set on the _converse.ChatBox model.
#. * @param {Boolean} [attrs.minimized] - Should the chat be created in minimized state.
#. * @param {Boolean} [force=false] - By default, a minimized
#. *   chat won't be maximized (in `overlayed` view mode) and in
#. *   `fullscreen` view mode a newly opened chat won't replace
#. *   another chat already in the foreground.
#. *   Set `force` to `true` if you want to force the chat to be
#. *   maximized or shown.
#. * @returns {Promise} Promise which resolves with the
#. *   _converse.ChatBox representing the chat.
#. *
#. * @example
#. * // To open a single chat, provide the JID of the contact you're chatting with in that chat:
#. * converse.plugins.add('myplugin', {
#. *     initialize: function() {
#. *         const _converse = this._converse;
#. *         // Note, buddy@example.org must be in your contacts roster!
#. *         api.chats.open('buddy@example.com').then(chat => {
#. *             // Now you can do something with the chat model
#. *         });
#. *     }
#. * });
#. *
#. * @example
#. * // To open an array of chats, provide an array of JIDs:
#. * converse.plugins.add('myplugin', {
#. *     initialize: function () {
#. *         const _converse = this._converse;
#. *         // Note, these users must first be in your contacts roster!
#. *         api.chats.open(['buddy1@example.com', 'buddy2@example.com']).then(chats => {
#. *             // Now you can do something with the chat models
#. *         });
#. *     }
#. * });
#.
#. #__PURE__
#. *
#. * Retrieves a chat or all chats.
#. *
#. * @method api.chats.get
#. * @param {String|string[]} jids - e.g. 'buddy@example.com' or ['buddy1@example.com', 'buddy2@example.com']
#. * @param { Object } [attrs] - Attributes to be set on the _converse.ChatBox model.
#. * @param { Boolean } [create=false] - Whether the chat should be created if it's not found.
#. * @returns { Promise<ChatBox[]> }
#. *
#. * @example
#. * // To return a single chat, provide the JID of the contact you're chatting with in that chat:
#. * const model = await api.chats.get('buddy@example.com');
#. *
#. * @example
#. * // To return an array of chats, provide an array of JIDs:
#. * const models = await api.chats.get(['buddy1@example.com', 'buddy2@example.com']);
#. *
#. * @example
#. * // To return all open chats, call the method without any parameters::
#. * const models = await api.chats.get();
#. *
#.
#. #__PURE__
#. #__PURE__
#. CONCATENATED MODULE: ./src/headless/plugins/chat/plugin.js
#. Configuration values for this plugin
#. ====================================
#. Refer to docs/source/configuration.rst for explanations of these
#. configuration settings.
#. TODO: DEPRECATED
#. CONCATENATED MODULE: ./src/headless/plugins/chat/index.js
#. CONCATENATED MODULE: ./src/headless/plugins/disco/entity.js
#. *
#. * @class
#. * @namespace _converse.DiscoEntity
#. * @memberOf _converse
#. *
#. * A Disco Entity is a JID addressable entity that can be queried for features.
#. *
#. * See XEP-0030: https://xmpp.org/extensions/xep-0030.html
#.
#. #__PURE__
#. eslint-disable-line class-methods-use-this
#. *
#. * Returns a Promise which resolves with a map indicating
#. * whether a given identity is provided by this entity.
#. * @method _converse.DiscoEntity#getIdentity
#. * @param { String } category - The identity category
#. * @param { String } type - The identity type
#.
#. #__PURE__
#. *
#. * Returns a Promise which resolves with a map indicating
#. * whether a given feature is supported.
#. * @method _converse.DiscoEntity#getFeature
#. * @param { String } feature - The feature that might be supported.
#.
#. #__PURE__
#. *
#. * Triggered when Converse has learned of a service provided by the XMPP server.
#. * See XEP-0030.
#. * @event _converse#serviceDiscovered
#. * @type { Model }
#. * @example _converse.api.listen.on('featuresDiscovered', feature => { ... });
#.
#. *
#. * Triggered when Converse has learned of a disco extension field.
#. * See XEP-0030.
#. * @event _converse#discoExtensionFieldDiscovered
#. * @example _converse.api.listen.on('discoExtensionFieldDiscovered', () => { ... });
#.
#. #__PURE__
#. #__PURE__
#. *
#. * @param {Element} stanza
#.
#. XXX: Ignore nodes for now.
#. See: https://xmpp.org/extensions/xep-0030.html#items-nodes
#. #__PURE__
#. *
#. * @param {Element} stanza
#.
#. #__PURE__
#. XEP-0128 Service Discovery Extensions
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/plugins/disco/entities.js
#. #__PURE__
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/plugins/disco/api.js
#. *
#. * @typedef {import('./index').DiscoState} DiscoState
#. * @typedef {import('./entities').default} DiscoEntities
#. * @typedef {import('@converse/skeletor').Collection} Collection
#.
#. harmony default export
#. *
#. * The XEP-0030 service discovery API
#. *
#. * This API lets you discover information about entities on the
#. * XMPP network.
#. *
#. * @namespace api.disco
#. * @memberOf api
#.
#. *
#. * @namespace api.disco.stream
#. * @memberOf api.disco
#.
#. *
#. * @method api.disco.stream.getFeature
#. * @param { String } name The feature name
#. * @param { String } xmlns The XML namespace
#. * @example _converse.api.disco.stream.getFeature('ver', 'urn:xmpp:features:rosterver')
#.
#. #__PURE__
#. * @type {Collection}
#. Happens during tests when disco lookups happen asynchronously after teardown.
#. *
#. * @namespace api.disco.own
#. * @memberOf api.disco
#.
#. *
#. * @namespace api.disco.own.identities
#. * @memberOf api.disco.own
#.
#. *
#. * Lets you add new identities for this client (i.e. instance of Converse)
#. * @method api.disco.own.identities.add
#. *
#. * @param { String } category - server, client, gateway, directory, etc.
#. * @param { String } type - phone, pc, web, etc.
#. * @param { String } name - "Converse"
#. * @param { String } lang - en, el, de, etc.
#. *
#. * @example _converse.api.disco.own.identities.clear();
#.
#. * @type {DiscoState}
#. *
#. * Clears all previously registered identities.
#. * @method api.disco.own.identities.clear
#. * @example _converse.api.disco.own.identities.clear();
#.
#. * @type {DiscoState}
#. *
#. * Returns all of the identities registered for this client
#. * (i.e. instance of Converse).
#. * @method api.disco.identities.get
#. * @example const identities = api.disco.own.identities.get();
#.
#. * @type {DiscoState}
#. *
#. * @namespace api.disco.own.features
#. * @memberOf api.disco.own
#.
#. *
#. * Lets you register new disco features for this client (i.e. instance of Converse)
#. * @method api.disco.own.features.add
#. * @param { String } name - e.g. http://jabber.org/protocol/caps
#. * @example _converse.api.disco.own.features.add("http://jabber.org/protocol/caps");
#.
#. * @type {DiscoState}
#. *
#. * Clears all previously registered features.
#. * @method api.disco.own.features.clear
#. * @example _converse.api.disco.own.features.clear();
#.
#. * @type {DiscoState}
#. *
#. * Returns all of the features registered for this client (i.e. instance of Converse).
#. * @method api.disco.own.features.get
#. * @example const features = api.disco.own.features.get();
#.
#. * @type {DiscoState}
#. *
#. * Query for information about an XMPP entity
#. *
#. * @method api.disco.info
#. * @param { string } jid The Jabber ID of the entity to query
#. * @param { string } [node] A specific node identifier associated with the JID
#. * @returns {promise} Promise which resolves once we have a result from the server.
#.
#. *
#. * Query for items associated with an XMPP entity
#. *
#. * @method api.disco.items
#. * @param { string } jid The Jabber ID of the entity to query for items
#. * @param { string } [node] A specific node identifier associated with the JID
#. * @returns {promise} Promise which resolves once we have a result from the server.
#.
#. *
#. * Namespace for methods associated with disco entities
#. *
#. * @namespace api.disco.entities
#. * @memberOf api.disco
#.
#. *
#. * Get the corresponding `DiscoEntity` instance.
#. *
#. * @method api.disco.entities.get
#. * @param { string } jid The Jabber ID of the entity
#. * @param { boolean } [create] Whether the entity should be created if it doesn't exist.
#. * @example _converse.api.disco.entities.get(jid);
#.
#. #__PURE__
#. * @type {DiscoEntities}
#. Happens during tests when disco lookups happen asynchronously after teardown.
#. *
#. * Return any disco items advertised on this entity
#. *
#. * @method api.disco.entities.items
#. * @param { string } jid - The Jabber ID of the entity for which we want to fetch items
#. * @example api.disco.entities.items(jid);
#.
#. * @type {DiscoEntities}
#. *
#. * Create a new  disco entity. It's identity and features
#. * will automatically be fetched from cache or from the
#. * XMPP server.
#. *
#. * Fetching from cache can be disabled by passing in
#. * `ignore_cache: true` in the options parameter.
#. *
#. * @method api.disco.entities.create
#. * @param { object } data
#. * @param { string } data.jid - The Jabber ID of the entity
#. * @param { string } data.parent_jid - The Jabber ID of the parent entity
#. * @param { string } data.name
#. * @param { object } [options] - Additional options
#. * @param { boolean } [options.ignore_cache]
#. *     If true, fetch all features from the XMPP server instead of restoring them from cache
#. * @example _converse.api.disco.entities.create({ jid }, {'ignore_cache': true});
#.
#. * @type {DiscoEntities}
#. *
#. * @namespace api.disco.features
#. * @memberOf api.disco
#.
#. *
#. * Return a given feature of a disco entity
#. *
#. * @method api.disco.features.get
#. * @param { string } feature The feature that might be
#. *     supported. In the XML stanza, this is the `var`
#. *     attribute of the `<feature>` element. For
#. *     example: `http://jabber.org/protocol/muc`
#. * @param { string } jid The JID of the entity
#. *     (and its associated items) which should be queried
#. * @returns {promise} A promise which resolves with a list containing
#. *     _converse.Entity instances representing the entity
#. *     itself or those items associated with the entity if
#. *     they support the given feature.
#. * @example
#. * api.disco.features.get(Strophe.NS.MAM, _converse.bare_jid);
#.
#. #__PURE__
#. Happens during tests when disco lookups happen asynchronously after teardown.
#. *
#. * Returns true if an entity with the given JID, or if one of its
#. * associated items, supports a given feature.
#. *
#. * @method api.disco.features.has
#. * @param { string } feature The feature that might be
#. *     supported. In the XML stanza, this is the `var`
#. *     attribute of the `<feature>` element. For
#. *     example: `http://jabber.org/protocol/muc`
#. * @param { string } jid The JID of the entity
#. *     (and its associated items) which should be queried
#. * @returns {Promise} A promise which resolves with a boolean
#. * @example
#. *      api.disco.features.has(Strophe.NS.MAM, _converse.bare_jid);
#.
#. #__PURE__
#. Happens during tests when disco lookups happen asynchronously after teardown.
#. *
#. * Used to determine whether an entity supports a given feature.
#. *
#. * @method api.disco.supports
#. * @param { string } feature The feature that might be
#. *     supported. In the XML stanza, this is the `var`
#. *     attribute of the `<feature>` element. For
#. *     example: `http://jabber.org/protocol/muc`
#. * @param { string } jid The JID of the entity
#. *     (and its associated items) which should be queried
#. * @returns {promise} A promise which resolves with `true` or `false`.
#. * @example
#. * if (await api.disco.supports(Strophe.NS.MAM, _converse.bare_jid)) {
#. *     // The feature is supported
#. * } else {
#. *     // The feature is not supported
#. * }
#.
#. *
#. * Refresh the features, fields and identities associated with a
#. * disco entity by refetching them from the server
#. * @method api.disco.refresh
#. * @param { string } jid The JID of the entity whose features are refreshed.
#. * @returns {promise} A promise which resolves once the features have been refreshed
#. * @example
#. * await api.disco.refresh('room@conference.example.org');
#.
#. #__PURE__
#. *
#. * @deprecated Use {@link api.disco.refresh} instead.
#. * @method api.disco.refreshFeatures
#.
#. *
#. * Return all the features associated with a disco entity
#. *
#. * @method api.disco.getFeatures
#. * @param { string } jid The JID of the entity whose features are returned.
#. * @returns {promise} A promise which resolves with the returned features
#. * @example
#. * const features = await api.disco.getFeatures('room@conference.example.org');
#.
#. #__PURE__
#. *
#. * Return all the service discovery extensions fields
#. * associated with an entity.
#. *
#. * See [XEP-0129: Service Discovery Extensions](https://xmpp.org/extensions/xep-0128.html)
#. *
#. * @method api.disco.getFields
#. * @param { string } jid The JID of the entity whose fields are returned.
#. * @example
#. * const fields = await api.disco.getFields('room@conference.example.org');
#.
#. #__PURE__
#. *
#. * Get the identity (with the given category and type) for a given disco entity.
#. *
#. * For example, when determining support for PEP (personal eventing protocol), you
#. * want to know whether the user's own JID has an identity with
#. * `category='pubsub'` and `type='pep'` as explained in this section of
#. * XEP-0163: https://xmpp.org/extensions/xep-0163.html#support
#. *
#. * @method api.disco.getIdentity
#. * @param {string} category -The identity category.
#. *     In the XML stanza, this is the `category`
#. *     attribute of the `<identity>` element.
#. *     For example: 'pubsub'
#. * @param {string} type - The identity type.
#. *     In the XML stanza, this is the `type`
#. *     attribute of the `<identity>` element.
#. *     For example: 'pep'
#. * @param {string} jid - The JID of the entity which might have the identity
#. * @returns {promise} A promise which resolves with a map indicating
#. *     whether an identity with a given type is provided by the entity.
#. * @example
#. * api.disco.getIdentity('pubsub', 'pep', _converse.bare_jid).then(
#. *     function (identity) {
#. *         if (identity) {
#. *             // The entity DOES have this identity
#. *         } else {
#. *             // The entity DOES NOT have this identity
#. *         }
#. *     }
#. * ).catch(e => log.error(e));
#.
#. #__PURE__
#. Happens during tests when disco lookups happen asynchronously after teardown.
#. CONCATENATED MODULE: ./src/headless/plugins/disco/utils.js
#. See https://xmpp.org/registrar/disco-categories.html
#. Limited support
#. *
#. * Triggered in converse-disco once the core disco features of
#. * Converse have been added.
#. * @event _converse#addClientFeatures
#. * @example _converse.api.listen.on('addClientFeatures', () => { ... });
#.
#. #__PURE__
#. XXX: DEPRECATED
#. If we don't have an entity for our own XMPP server, create one.
#. *
#. * Triggered once the `converse-disco` plugin has been initialized and the
#. * `_converse.disco_entities` collection will be available and populated with at
#. * least the service discovery features of the user's own server.
#. * @event _converse#discoInitialized
#. * @example _converse.api.listen.on('discoInitialized', () => { ... });
#.
#. Initialize the stream_features collection, and if we're
#. re-attaching to a pre-existing BOSH session, we restore the
#. features from cache.
#. Otherwise the features will be created once we've received them
#. from the server (see populateStreamFeatures).
#. XXX: DEPRECATED
#. *
#. * Triggered as soon as the stream features are known.
#. * If you want to check whether a stream feature is supported before proceeding,
#. * then you'll first want to wait for this event.
#. * @event _converse#streamFeaturesAdded
#. * @example _converse.api.listen.on('streamFeaturesAdded', () => { ... });
#.
#. Strophe.js sets the <stream:features> element on the
#. Strophe.Connection instance.
#.
#. Once this is we populate the stream_features collection
#. and trigger streamFeaturesAdded.
#. CONCATENATED MODULE: ./src/headless/plugins/disco/index.js
#. *
#. * @copyright The Converse.js contributors
#. * @license Mozilla Public License (MPLv2)
#. * @description Converse plugin which add support for XEP-0030: Service Discovery
#.
#. *
#. * @typedef {Object} DiscoState
#. * @property {Array} _identities
#. * @property {Array} _features
#.
#. XXX: DEPRECATED
#. XXX: DEPRECATED
#. #__PURE__
#. #__PURE__
#. #__PURE__
#. #__PURE__
#. XXX: DEPRECATED
#. All disco entities stored in sessionStorage and are refetched
#. upon login or reconnection and then stored with new ids, so to
#. avoid sessionStorage filling up, we remove them.
#. CONCATENATED MODULE: ./src/headless/plugins/emoji/regexes.js
#. CONCATENATED MODULE: ./src/headless/plugins/emoji/utils.js
#. Closured cache
#. *
#. * Converts unicode code points and code pairs to their respective characters
#. * @param {string} unicode
#.
#. *
#. * @param {string} str
#.
#. Replace ASCII smileys
#. if the ascii doesnt exist just return the entire match
#. *
#. * @param {string} text
#.
#. *
#. * @param {string} str
#. * @param {Function} callback
#.
#. *
#. * @param {string} text
#.
#. *
#. * Replaces all shortnames in the passed in string with their
#. * unicode (emoji) representation.
#. * @namespace u
#. * @method u.shortnamesToUnicode
#. * @param { String } str - String containing the shortname(s)
#. * @returns { String }
#.
#. *
#. * Determines whether the passed in string is just a single emoji shortname;
#. * @namespace u
#. * @method u.isOnlyEmojis
#. * @param { String } text - A string which migh be just an emoji shortname
#. * @returns { Boolean }
#.
#. *
#. * @namespace u
#. * @method u.getEmojisByAtrribute
#. * @param { 'category'|'cp'|'sn' } attr
#. *  The attribute according to which the returned map should be keyed.
#. * @returns { Object }
#. *  Map of emojis with the passed in `attr` used as key and a list of emojis as values.
#.
#. CONCATENATED MODULE: ./src/headless/plugins/emoji/picker.js
#. *
#. * Model for storing data related to the Emoji picker widget
#.
#. #__PURE__
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/plugins/emoji/index.js
#. *
#. * @module converse-emoji
#. * @copyright 2022, the Converse.js contributors
#. * @license Mozilla Public License (MPLv2)
#.
#. The initialize function gets called as soon as the plugin is
#. * loaded by converse.js's plugin machinery.
#.
#. We use the triple-underscore method which doesn't actually
#. translate but does signify to gettext that these strings should
#. go into the POT file. The translation then happens in the
#. template. We do this so that users can pass in their own
#. strings via converse.initialize, which is before __ is
#. available.
#: dist/converse-no-dependencies.js:17145
#: dist/converse-no-dependencies.js:70190
msgid "Smileys and emotions"
msgstr ""

#: dist/converse-no-dependencies.js:17145
#: dist/converse-no-dependencies.js:70191
msgid "People"
msgstr ""

#: dist/converse-no-dependencies.js:17145
#: dist/converse-no-dependencies.js:70192
msgid "Activities"
msgstr ""

#: dist/converse-no-dependencies.js:17145
#: dist/converse-no-dependencies.js:70193
msgid "Travel"
msgstr ""

#: dist/converse-no-dependencies.js:17145
#: dist/converse-no-dependencies.js:70194
msgid "Objects"
msgstr ""

#: dist/converse-no-dependencies.js:17145
#: dist/converse-no-dependencies.js:70195
msgid "Animals and nature"
msgstr ""

#: dist/converse-no-dependencies.js:17145
#: dist/converse-no-dependencies.js:70196
msgid "Food and drink"
msgstr ""

#: dist/converse-no-dependencies.js:17145
#: dist/converse-no-dependencies.js:70197
msgid "Symbols"
msgstr ""

#: dist/converse-no-dependencies.js:17145
#: dist/converse-no-dependencies.js:70198
msgid "Flags"
msgstr ""

#: dist/converse-no-dependencies.js:17145
#: dist/converse-no-dependencies.js:70199
msgid "Stickers"
msgstr ""

#. XXX: DEPRECATED
#. We extend the default converse.js API to add methods specific to MUC groupchats.
#. *
#. * @namespace api.emojis
#. * @memberOf api
#.
#. *
#. * Initializes Emoji support by downloading the emojis JSON (and any applicable images).
#. * @method api.emojis.initialize
#. * @returns {Promise}
#.
#. #__PURE__
#. import() | emojis
#. CONCATENATED MODULE: ./src/headless/plugins/muc/affiliations/api.js
#. *
#. * @module:plugin-muc-affiliations-api
#.
#. harmony default export
#. *
#. * The "affiliations" namespace groups methods relevant to setting and
#. * getting MUC affiliations.
#. *
#. * @namespace api.rooms.affiliations
#. * @memberOf api.rooms
#.
#. *
#. * Set the given affliation for the given JIDs in the specified MUCs
#. * @typedef {Object} User
#. * @property {string} User.jid - The JID of the user whose affiliation will change
#. * @property {Array} User.affiliation - The new affiliation for this user
#. * @property {string} [User.reason] - An optional reason for the affiliation change
#. *
#. * @param {String|Array<String>} muc_jids - The JIDs of the MUCs in
#. *  which the affiliation should be set.
#. * @param {User[]} users - An array of objects representing users
#. *  for whom the affiliation is to be set.
#. * @returns {Promise}
#. *
#. * @example
#. *  api.rooms.affiliations.set(
#. *      [
#. *          'muc1@muc.example.org',
#. *          'muc2@muc.example.org'
#. *      ], [
#. *          {
#. *              'jid': 'user@example.org',
#. *              'affiliation': 'member',
#. *              'reason': "You're one of us now!"
#. *          }
#. *      ]
#. *  )
#.
#. CONCATENATED MODULE: ./src/headless/plugins/muc/plugin.js
#. *
#. * @copyright The Converse.js contributors
#. * @license Mozilla Public License (MPLv2)
#. * @description Implements the core logic for XEP-0045 Multi-User Chat
#.
#. Add Strophe Namespaces
#. The initialize function gets called as soon as the plugin is
#. * loaded by converse.js's plugin machinery.
#.
#. Configuration values for this plugin
#. ====================================
#. Refer to docs/source/configuration.rst for explanations of these
#. configuration settings.
#. This is for tests (at least until we can import modules inside tests)
#. https://xmpp.org/extensions/xep-0045.html
#. * ----------------------------------------
#. * 100 message      Entering a groupchat         Inform user that any occupant is allowed to see the user's full JID
#. * 101 message (out of band)                     Affiliation change  Inform user that his or her affiliation changed while not in the groupchat
#. * 102 message      Configuration change         Inform occupants that groupchat now shows unavailable members
#. * 103 message      Configuration change         Inform occupants that groupchat now does not show unavailable members
#. * 104 message      Configuration change         Inform occupants that a non-privacy-related groupchat configuration change has occurred
#. * 110 presence     Any groupchat presence       Inform user that presence refers to one of its own groupchat occupants
#. * 170 message or initial presence               Configuration change    Inform occupants that groupchat logging is now enabled
#. * 171 message      Configuration change         Inform occupants that groupchat logging is now disabled
#. * 172 message      Configuration change         Inform occupants that the groupchat is now non-anonymous
#. * 173 message      Configuration change         Inform occupants that the groupchat is now semi-anonymous
#. * 174 message      Configuration change         Inform occupants that the groupchat is now fully-anonymous
#. * 201 presence     Entering a groupchat         Inform user that a new groupchat has been created
#. * 210 presence     Entering a groupchat         Inform user that the service has assigned or modified the occupant's roomnick
#. * 301 presence     Removal from groupchat       Inform user that he or she has been banned from the groupchat
#. * 303 presence     Exiting a groupchat          Inform all occupants of new groupchat nickname
#. * 307 presence     Removal from groupchat       Inform user that he or she has been kicked from the groupchat
#. * 321 presence     Removal from groupchat       Inform user that he or she is being removed from the groupchat because of an affiliation change
#. * 322 presence     Removal from groupchat       Inform user that he or she is being removed from the groupchat because the groupchat has been changed to members-only and the user is not a member
#. * 332 presence     Removal from groupchat       Inform user that he or she is being removed from the groupchat because of a system shutdown
#.
#: dist/converse-no-dependencies.js:17223
#: dist/converse-no-dependencies.js:70461
msgid "This groupchat is not anonymous"
msgstr ""

#: dist/converse-no-dependencies.js:17223
#: dist/converse-no-dependencies.js:70462
msgid "This groupchat now shows unavailable members"
msgstr ""

#: dist/converse-no-dependencies.js:17223
#: dist/converse-no-dependencies.js:70463
msgid "This groupchat does not show unavailable members"
msgstr ""

#: dist/converse-no-dependencies.js:17223
#: dist/converse-no-dependencies.js:70464
msgid "The groupchat configuration has changed"
msgstr ""

#: dist/converse-no-dependencies.js:17223
#: dist/converse-no-dependencies.js:70465
msgid "Groupchat logging is now enabled"
msgstr ""

#: dist/converse-no-dependencies.js:17223
#: dist/converse-no-dependencies.js:70466
msgid "Groupchat logging is now disabled"
msgstr ""

#: dist/converse-no-dependencies.js:17223
#: dist/converse-no-dependencies.js:70467
msgid "This groupchat is now no longer anonymous"
msgstr ""

#: dist/converse-no-dependencies.js:17223
#: dist/converse-no-dependencies.js:70468
msgid "This groupchat is now semi-anonymous"
msgstr ""

#: dist/converse-no-dependencies.js:17223
#: dist/converse-no-dependencies.js:70469
msgid "This groupchat is now fully-anonymous"
msgstr ""

#: dist/converse-no-dependencies.js:17223
#: dist/converse-no-dependencies.js:70470
msgid "A new groupchat has been created"
msgstr ""

#. XXX: Note the triple underscore function and not double underscore.
#: dist/converse-no-dependencies.js:17224
#: dist/converse-no-dependencies.js:70474
#, javascript-format
msgid "Your nickname has been automatically set to %1$s"
msgstr ""

#: dist/converse-no-dependencies.js:17224
#: dist/converse-no-dependencies.js:70475
#, javascript-format
msgid "Your nickname has been changed to %1$s"
msgstr ""

#: dist/converse-no-dependencies.js:17224
#: dist/converse-no-dependencies.js:70478
msgid "You have been banned from this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:17224
#: dist/converse-no-dependencies.js:70479
msgid "You have exited this groupchat due to a technical problem"
msgstr ""

#: dist/converse-no-dependencies.js:17224
#: dist/converse-no-dependencies.js:70480
msgid "You have been kicked from this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:17224
#: dist/converse-no-dependencies.js:70481
msgid ""
"You have been removed from this groupchat because of an affiliation change"
msgstr ""

#: dist/converse-no-dependencies.js:17224
#: dist/converse-no-dependencies.js:70482
msgid ""
"You have been removed from this groupchat because the groupchat has changed "
"to members-only and you're not a member"
msgstr ""

#: dist/converse-no-dependencies.js:17224
#: dist/converse-no-dependencies.js:70483
msgid ""
"You have been removed from this groupchat because the service hosting it is "
"being shut down"
msgstr ""

#. XXX DEPRECATED
#. TODO: DEPRECATED
#. XXX DEPRECATED
#. * @type {module:shared-api.APIEndpoint}
#. CONCATENATED MODULE: ./src/headless/plugins/muc/index.js
#. CONCATENATED MODULE: ./src/headless/plugins/bookmarks/model.js
#. #__PURE__
#. eslint-disable-line class-methods-use-this
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/plugins/bookmarks/collection.js
#. #__PURE__
#. * @type {Bookmark}
#. #__PURE__
#. *
#. * Triggered once the _converse.Bookmarks collection
#. * has been created and cached bookmarks have been fetched.
#. * @event _converse#bookmarksInitialized
#. * @type { Bookmarks }
#. * @example _converse.api.listen.on('bookmarksInitialized', (bookmarks) => { ... });
#.
#. *
#. * @param {Bookmark} bookmark
#.
#. #__PURE__
#: dist/converse-no-dependencies.js:17239
#: dist/converse-no-dependencies.js:72177
#: dist/converse-no-dependencies.js:72181
#: dist/converse-no-dependencies.js:72268
#: dist/converse-no-dependencies.js:78320
#: dist/converse-no-dependencies.js:85227
#: dist/converse-no-dependencies.js:97728
#: dist/converse-no-dependencies.js:110452
#: dist/converse-no-dependencies.js:110454
#: dist/converse-no-dependencies.js:111722
#: dist/converse-no-dependencies.js:113087
#: dist/converse-no-dependencies.js:126139
msgid "Error"
msgstr ""

#: dist/converse-no-dependencies.js:17239
msgid "Sorry, something went wrong while trying to save your bookmark."
msgstr ""

#. *
#. * @param {Bookmark} bookmark
#.
#. *
#. * @param {Bookmark} bookmark
#.
#. *
#. * @param {Element} stanza
#.
#. * @type {Element}
#: dist/converse-no-dependencies.js:17245
msgid "Timeout Error"
msgstr ""

#: dist/converse-no-dependencies.js:17245
msgid ""
"The server did not return your bookmarks within the allowed time. You can "
"reload the page to request them again."
msgstr ""

#. Not an exception, the user simply doesn't have any bookmarks.
#. #__PURE__
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/plugins/bookmarks/utils.js
#. #__PURE__
#. #__PURE__
#. TODO: DEPRECATED
#. CONCATENATED MODULE: ./src/headless/plugins/bookmarks/index.js
#. *
#. * @description
#. * Converse.js plugin which adds views for bookmarks specified in XEP-0048.
#. * @copyright 2022, the Converse.js contributors
#. * @license Mozilla Public License (MPLv2)
#.
#. Overrides mentioned here will be picked up by converse.js's
#. plugin architecture they will replace existing methods on the
#. relevant objects or classes.
#. New functions which don't exist yet can also be added.
#. Configuration values for this plugin
#. ====================================
#. Refer to docs/source/configuration.rst for explanations of these
#. configuration settings.
#. TODO: DEPRECATED
#. #__PURE__
#. #__PURE__
#. Add a handler for bookmarks pushed from other connected clients
#. CONCATENATED MODULE: ./src/headless/plugins/bosh/api.js
#. harmony default export
#. *
#. * This API namespace lets you access the BOSH tokens
#. * @namespace api.tokens
#. * @memberOf api
#.
#. *
#. * @method api.tokens.get
#. * @param {string} [id] The type of token to return ('rid' or 'sid').
#. * @returns {string} A token, either the RID or SID token depending on what's asked for.
#. * @example _converse.api.tokens.get('rid');
#.
#. CONCATENATED MODULE: ./src/headless/plugins/bosh/utils.js
#. *
#. * @typedef {module:shared.api.user} LoginHookPayload
#.
#. #__PURE__
#. Keepalive
#. #__PURE__
#. #__PURE__
#. *
#. * Triggered when fetching prebind tokens failed
#. * @event _converse#noResumeableBOSHSession
#. * @type { _converse }
#. * @example _converse.api.listen.on('noResumeableBOSHSession', _converse => { ... });
#.
#. *
#. * @param {unknown} _
#. * @param {LoginHookPayload} payload
#.
#. #__PURE__
#. See whether there is a BOSH session to re-attach to
#. Remove manually, even if we don't have the corresponding
#. model, to avoid trying to reconnect to a stale BOSH session
#. #__PURE__
#. CONCATENATED MODULE: ./src/headless/plugins/bosh/index.js
#. *
#. * @copyright The Converse.js contributors
#. * @license Mozilla Public License (MPLv2)
#. * @description Converse.js plugin which add support for XEP-0206: XMPP Over BOSH
#.
#. CONCATENATED MODULE: ./src/headless/plugins/caps/utils.js
#. *
#. * @typedef {import('strophe.js/src/builder.js').Builder} Strophe.Builder
#.
#. #__PURE__
#. *
#. * Given a stanza, adds a XEP-0115 CAPS element
#. * @param {Strophe.Builder} stanza
#.
#. #__PURE__
#. #__PURE__
#. CONCATENATED MODULE: ./src/headless/plugins/caps/index.js
#. *
#. * @copyright 2022, the Converse.js contributors
#. * @license Mozilla Public License (MPLv2)
#.
#. CONCATENATED MODULE: ./src/headless/plugins/chatboxes/chatboxes.js
#. *
#. * @typedef {import('../../plugins/chat/model.js').default} ChatBox
#. * @typedef {import('../../plugins/muc/muc').default} MUC
#. * @typedef {import('@converse/skeletor').Model} Model
#.
#. #__PURE__
#. *
#. * @param {Model[]} models
#. * @param {object} options
#.
#. *
#. * @param {Collection} collection
#.
#. *
#. * Triggered once all chat boxes have been recreated from the browser cache
#. * @event _converse#chatBoxesFetched
#. * @type {object}
#. * @property {ChatBox|MUC} chatbox
#. * @property {Element} stanza
#. * @example _converse.api.listen.on('chatBoxesFetched', obj => { ... });
#. * @example _converse.api.waitUntil('chatBoxesFetched').then(() => { ... });
#.
#. *
#. * @param {boolean} reconnecting
#.
#. *
#. * @param {object} attrs
#. * @param {object} options
#.
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/plugins/chatboxes/index.js
#. *
#. * @copyright 2022, the Converse.js contributors
#. * @license Mozilla Public License (MPLv2)
#.
#. TODO: DEPRECATED
#. TODO: DEPRECATED
#. *
#. * Triggered once the _converse.ChatBoxes collection has been initialized.
#. * @event _converse#chatBoxesInitialized
#. * @example _converse.api.listen.on('chatBoxesInitialized', () => { ... });
#. * @example _converse.api.waitUntil('chatBoxesInitialized').then(() => { ... });
#.
#. CONCATENATED MODULE: ./src/headless/plugins/adhoc/utils.js
#. CONCATENATED MODULE: ./src/headless/plugins/adhoc/api.js
#. harmony default export
#. *
#. * The XEP-0050 Ad-Hoc Commands API
#. *
#. * This API lets you discover ad-hoc commands available for an entity in the XMPP network.
#. *
#. * @namespace api.adhoc
#. * @memberOf api
#.
#. *
#. * @method api.adhoc.getCommands
#. * @param { String } to_jid
#.
#. #__PURE__
#. *
#. * @method api.adhoc.fetchCommandForm
#.
#. #__PURE__
#: dist/converse-no-dependencies.js:17352
msgid "An error occurred while trying to fetch the command form"
msgstr ""

#. *
#. * @method api.adhoc.runCommand
#. * @param { String } jid
#. * @param { String } sessionid
#. * @param { 'execute' | 'cancel' | 'prev' | 'next' | 'complete' } action
#. * @param { String } node
#. * @param { Array<{ [k:string]: string }> } inputs
#.
#. #__PURE__
#: dist/converse-no-dependencies.js:17359
msgid "A timeout occurred"
msgstr ""

#. CONCATENATED MODULE: ./src/headless/plugins/adhoc/index.js
#. CONCATENATED MODULE: ./src/headless/plugins/headlines/feed.js
#. *
#. * Shows headline messages
#. * @class
#. * @namespace _converse.HeadlinesFeed
#. * @memberOf _converse
#.
#. #__PURE__
#. Don't do MAM queries for this box
#. #__PURE__
#. *
#. * Triggered once a { @link _converse.HeadlinesFeed } has been created and initialized.
#. * @event _converse#headlinesFeedInitialized
#. * @type {HeadlinesFeed}
#. * @example _converse.api.listen.on('headlinesFeedInitialized', model => { ... });
#.
#. CONCATENATED MODULE: ./src/headless/plugins/headlines/api.js
#. *
#. * @typedef {import('./feed.js').default} HeadlinesFeed
#.
#. harmony default export
#. *
#. * The "headlines" namespace, which is used for headline-channels
#. * which are read-only channels containing messages of type
#. * "headline".
#. *
#. * @namespace api.headlines
#. * @memberOf api
#.
#. *
#. * Retrieves a headline-channel or all headline-channels.
#. *
#. * @method api.headlines.get
#. * @param {String|String[]} jids - e.g. 'buddy@example.com' or ['buddy1@example.com', 'buddy2@example.com']
#. * @param { Object } [attrs] - Attributes to be set on the _converse.ChatBox model.
#. * @param { Boolean } [create=false] - Whether the chat should be created if it's not found.
#. * @returns { Promise<HeadlinesFeed[]|HeadlinesFeed> }
#.
#. #__PURE__
#. #__PURE__
#. *
#. * @param {string} jid
#. * @returns {Promise<HeadlinesFeed>}
#.
#. CONCATENATED MODULE: ./src/headless/plugins/headlines/utils.js
#. *
#. * Handler method for all incoming messages of type "headline".
#. * @param { Element } stanza
#.
#. #__PURE__
#. CONCATENATED MODULE: ./src/headless/plugins/headlines/index.js
#. *
#. * @module converse-headlines
#. * @copyright 2022, the Converse.js contributors
#.
#. XXX: DEPRECATED
#. keep the handler
#. CONCATENATED MODULE: ./src/headless/plugins/mam/placeholder.js
#. #__PURE__
#. eslint-disable-line class-methods-use-this
#. CONCATENATED MODULE: ./src/headless/shared/rsm.js
#. *
#. * @module converse-rsm
#. * @copyright The Converse.js contributors
#. * @license Mozilla Public License (MPLv2)
#. * @description XEP-0059 Result Set Management
#. *   Some code taken from the Strophe RSM plugin, licensed under the MIT License
#. *   Copyright 2006-2017 Strophe (https://github.com/strophe/strophejs)
#.
#. *
#. * @typedef {Object} RSMQueryParameters
#. * [XEP-0059 RSM](https://xmpp.org/extensions/xep-0059.html) Attributes that can be used to filter query results
#. * @property {String} [after] - The XEP-0359 stanza ID of a message after which messages should be returned. Implies forward paging.
#. * @property {String} [before] - The XEP-0359 stanza ID of a message before which messages should be returned. Implies backward paging.
#. * @property {number} [index=0] - The index of the results page to return.
#. * @property {number} [max] - The maximum number of items to return.
#.
#. This array contains both query attributes and response attributes
#. *
#. * Instances of this class are used to page through query results according to XEP-0059 Result Set Management
#. * @class RSM
#.
#. #__PURE__
#. *
#. * Create a new RSM instance
#. * @param { Object } options - Configuration options
#. * @constructor
#.
#. *
#. * Returns a `<set>` XML element that confirms to XEP-0059 Result Set Management.
#. * The element is constructed based on the {@link module:converse-rsm~RSMQueryParameters}
#. * that are set on this RSM instance.
#. * @returns { Element }
#.
#. CONCATENATED MODULE: ./src/headless/plugins/mam/api.js
#. *
#. * @typedef {module:converse-rsm.RSMQueryParameters} RSMQueryParameters
#.
#. harmony default export
#. *
#. * The [XEP-0313](https://xmpp.org/extensions/xep-0313.html) Message Archive Management API
#. *
#. * Enables you to query an XMPP server for archived messages.
#. *
#. * See also the [message-archiving](/docs/html/configuration.html#message-archiving)
#. * option in the configuration settings section, which you'll
#. * usually want to use in conjunction with this API.
#. *
#. * @namespace _converse.api.archive
#. * @memberOf _converse.api
#.
#. *
#. * @typedef {RSMQueryParameters} MAMFilterParameters
#. * Filter parmeters which can be used to filter a MAM XEP-0313 archive
#. * @property String} [end] - A date string in ISO-8601 format, before which messages should be returned. Implies backward paging.
#. * @property {String} [start] - A date string in ISO-8601 format, after which messages should be returned. Implies forward paging.
#. * @property {String} [with] - A JID against which to match messages, according to either their `to` or `from` attributes.
#. *     An item in a MUC archive matches if the publisher of the item matches the JID.
#. *     If `with` is omitted, all messages that match the rest of the query will be returned, regardless of to/from
#. *     addresses of each message.
#.
#. *
#. * The options that can be passed in to the {@link _converse.api.archive.query } method
#. * @typedef {MAMFilterParameters} ArchiveQueryOptions
#. * @property {boolean} [groupchat=false] - Whether the MAM archive is for a groupchat.
#.
#. *
#. * Query for archived messages.
#. *
#. * The options parameter can also be an instance of
#. * RSM to enable easy querying between results pages.
#. *
#. * @method _converse.api.archive.query
#. * @param {ArchiveQueryOptions} options - An object containing query parameters
#. * @throws {Error} An error is thrown if the XMPP server responds with an error.
#. * @returns {Promise<MAMQueryResult>} A promise which resolves to a {@link MAMQueryResult} object.
#. *
#. * @example
#. * // Requesting all archived messages
#. * // ================================
#. * //
#. * // The simplest query that can be made is to simply not pass in any parameters.
#. * // Such a query will return all archived messages for the current user.
#. *
#. * let result;
#. * try {
#. *     result = await api.archive.query();
#. * } catch (e) {
#. *     // The query was not successful, perhaps inform the user?
#. *     // The IQ stanza returned by the XMPP server is passed in, so that you
#. *     // may inspect it and determine what the problem was.
#. * }
#. * // Do something with the messages, like showing them in your webpage.
#. * result.messages.forEach(m => this.showMessage(m));
#. *
#. * @example
#. * // Requesting all archived messages for a particular contact or room
#. * // =================================================================
#. * //
#. * // To query for messages sent between the current user and another user or room,
#. * // the query options need to contain the the JID (Jabber ID) of the user or
#. * // room under the  `with` key.
#. *
#. * // For a particular user
#. * let result;
#. * try {
#. *    result = await api.archive.query({'with': 'john@doe.net'});
#. * } catch (e) {
#. *     // The query was not successful
#. * }
#. *
#. * // For a particular room
#. * let result;
#. * try {
#. *    result = await api.archive.query({'with': 'discuss@conference.doglovers.net', 'groupchat': true});
#. * } catch (e) {
#. *     // The query was not successful
#. * }
#. *
#. * @example
#. * // Requesting all archived messages before or after a certain date
#. * // ===============================================================
#. * //
#. * // The `start` and `end` parameters are used to query for messages
#. * // within a certain timeframe. The passed in date values may either be ISO8601
#. * // formatted date strings, or JavaScript Date objects.
#. *
#. *  const options = {
#. *      'with': 'john@doe.net',
#. *      'start': '2010-06-07T00:00:00Z',
#. *      'end': '2010-07-07T13:23:54Z'
#. *  };
#. * let result;
#. * try {
#. *    result = await api.archive.query(options);
#. * } catch (e) {
#. *     // The query was not successful
#. * }
#. *
#. * @example
#. * // Limiting the amount of messages returned
#. * // ========================================
#. * //
#. * // The amount of returned messages may be limited with the `max` parameter.
#. * // By default, the messages are returned from oldest to newest.
#. *
#. * // Return maximum 10 archived messages
#. * let result;
#. * try {
#. *     result = await api.archive.query({'with': 'john@doe.net', 'max':10});
#. * } catch (e) {
#. *     // The query was not successful
#. * }
#. *
#. * @example
#. * // Paging forwards through a set of archived messages
#. * // ==================================================
#. * //
#. * // When limiting the amount of messages returned per query, you might want to
#. * // repeatedly make a further query to fetch the next batch of messages.
#. * //
#. * // To simplify this usecase for you, the callback method receives not only an array
#. * // with the returned archived messages, but also a special RSM (*Result Set Management*)
#. * // object which contains the query parameters you passed in, as well
#. * // as two utility methods `next`, and `previous`.
#. * //
#. * // When you call one of these utility methods on the returned RSM object, and then
#. * // pass the result into a new query, you'll receive the next or previous batch of
#. * // archived messages. Please note, when calling these methods, pass in an integer
#. * // to limit your results.
#. *
#. * const options = {'with': 'john@doe.net', 'max':10};
#. * let result;
#. * try {
#. *     result = await api.archive.query(options);
#. * } catch (e) {
#. *     // The query was not successful
#. * }
#. * // Do something with the messages, like showing them in your webpage.
#. * result.messages.forEach(m => this.showMessage(m));
#. *
#. * while (!result.complete) {
#. *     try {
#. *         result = await api.archive.query(Object.assign(options, rsm.next(10).query));
#. *     } catch (e) {
#. *         // The query was not successful
#. *     }
#. *     // Do something with the messages, like showing them in your webpage.
#. *     result.messages.forEach(m => this.showMessage(m));
#. * }
#. *
#. * @example
#. * // Paging backwards through a set of archived messages
#. * // ===================================================
#. * //
#. * // To page backwards through the archive, you need to know the UID of the message
#. * // which you'd like to page backwards from and then pass that as value for the
#. * // `before` parameter. If you simply want to page backwards from the most recent
#. * // message, pass in the `before` parameter with an empty string value `''`.
#. *
#. * let result;
#. * const options = {'before': '', 'max':5};
#. * try {
#. *     result = await api.archive.query(options);
#. * } catch (e) {
#. *     // The query was not successful
#. * }
#. * // Do something with the messages, like showing them in your webpage.
#. * result.messages.forEach(m => this.showMessage(m));
#. *
#. * // Now we query again, to get the previous batch.
#. * try {
#. *      result = await api.archive.query(Object.assign(options, rsm.previous(5).query));
#. * } catch (e) {
#. *     // The query was not successful
#. * }
#. * // Do something with the messages, like showing them in your webpage.
#. * result.messages.forEach(m => this.showMessage(m));
#. *
#.
#. #__PURE__
#. * @param {Element} stanza
#: dist/converse-no-dependencies.js:17613
msgid "Timeout while trying to fetch archived messages."
msgstr ""

#. *
#. * @typedef {Object} MAMQueryResult
#. * @property {Array} messages
#. * @property {RSM} [rsm] - An instance of {@link RSM}.
#. *  You can call `next()` or `previous()` on this instance,
#. *  to get the RSM query parameters for the next or previous
#. *  page in the result set.
#. * @property {boolean} [complete]
#. * @property {Error} [error]
#.
#. CONCATENATED MODULE: ./src/headless/plugins/mam/utils.js
#. *
#. * @typedef {import('../muc/muc.js').default} MUC
#. * @typedef {import('../chat/model.js').default} ChatBox
#.
#. *
#. * @param {Element} iq
#.
#. *
#. * Handle returned IQ stanza containing Message Archive
#. * Management (XEP-0313) preferences.
#. *
#. * XXX: For now we only handle the global default preference.
#. * The XEP also provides for per-JID preferences, which is
#. * currently not supported in converse.js.
#. *
#. * Per JID preferences will be set in chat boxes, so it'll
#. * probbaly be handled elsewhere in any case.
#.
#. XXX: Strictly speaking, the server should respond with the updated prefs
#. (see example 18: https://xmpp.org/extensions/xep-0313.html#config)
#. but Prosody doesn't do this, so we don't rely on it.
#. *
#. * @typedef {Object} MAMOptions
#. * A map of MAM related options that may be passed to fetchArchivedMessages
#. * @param {number} [options.max] - The maximum number of items to return.
#. *  Defaults to "archived_messages_page_size"
#. * @param {string} [options.after] - The XEP-0359 stanza ID of a message
#. *  after which messages should be returned. Implies forward paging.
#. * @param {string} [options.before] - The XEP-0359 stanza ID of a message
#. *  before which messages should be returned. Implies backward paging.
#. * @param {string} [options.end] - A date string in ISO-8601 format,
#. *  before which messages should be returned. Implies backward paging.
#. * @param {string} [options.start] - A date string in ISO-8601 format,
#. *  after which messages should be returned. Implies forward paging.
#. * @param {string} [options.with] - The JID of the entity with
#. *  which messages were exchanged.
#. * @param {boolean} [options.groupchat] - True if archive in groupchat.
#.
#. *
#. * Fetch XEP-0313 archived messages based on the passed in criteria.
#. * @param {ChatBox} model
#. * @param {MAMOptions} [options]
#. * @param {('forwards'|'backwards'|null)} [should_page=null] - Determines whether
#. *  this function should recursively page through the entire result set if a limited
#. *  number of results were returned.
#.
#. #__PURE__
#. *
#. * Synchronous event which allows listeners to first do some
#. * work based on the MAM result before calling the handlers here.
#. * @event _converse#MAMResult
#.
#. *
#. * Create a placeholder message which is used to indicate gaps in the history.
#. * @param {ChatBox} model
#. * @param {MAMOptions} options
#. * @param {object} result - The RSM result object
#.
#. #__PURE__
#. *
#. * Fetches messages that might have been archived *after*
#. * the last archived message in our local cache.
#. * @param {ChatBox} model
#.
#. #__PURE__
#. if clear_messages_on_reconnection is true, than any recent messages
#. must have been received *after* connection and we instead must query
#. for earlier messages
#. CONCATENATED MODULE: ./src/headless/plugins/mam/index.js
#. *
#. * @description XEP-0313 Message Archive Management
#. * @copyright 2022, the Converse.js contributors
#. * @license Mozilla Public License (MPLv2)
#.
#. Supported values are 'always', 'never', 'roster' (https://xmpp.org/extensions/xep-0313.html#prefs)
#. Time (in milliseconds) to wait before aborting MAM request
#. This is mainly done to aid with tests
#. XXX DEPRECATED
#. *********************** Event Handlers ***********************
#. If we want to show MAM logs before entering the MUC, we need
#. to be informed once it's clear that this MUC supports MAM.
#. CONCATENATED MODULE: ./src/headless/plugins/ping/utils.js
#. Handler on each stanza, saves the received date
#. in order to ping only when needed.
#. Wrapper so that we can spy on registerPingHandler in tests
#. CONCATENATED MODULE: ./src/headless/plugins/ping/api.js
#. harmony default export
#. *
#. * Pings the entity represented by the passed in JID by sending an IQ stanza to it.
#. * @method api.ping
#. * @param {string} [jid] - The JID of the service to ping
#. *  If the ping is sent out to the user's bare JID and no response is received it will attempt to reconnect.
#. * @param {number} [timeout] - The amount of time in
#. *  milliseconds to wait for a response. The default is 10000;
#. * @returns {Promise<boolean|null>}
#. *  Whether the pinged entity responded with a non-error IQ stanza.
#. *  If we already know we're not connected, no ping is sent out and `null` is returned.
#.
#. #__PURE__
#. XXX: We could first check here if the server advertised that it supports PING.
#. However, some servers don't advertise while still responding to pings
#. const feature = _converse.disco_entities[_converse.domain].features.findWhere({'var': Strophe.NS.PING});
#. CONCATENATED MODULE: ./src/headless/plugins/ping/index.js
#. *
#. * @description
#. * Converse.js plugin which add support for application-level pings
#. * as specified in XEP-0199 XMPP Ping.
#. * @copyright 2022, the Converse.js contributors
#. * @license Mozilla Public License (MPLv2)
#.
#. in seconds
#. CONCATENATED MODULE: ./src/headless/plugins/pubsub.js
#. *
#. * @module converse-pubsub
#. * @copyright The Converse.js contributors
#. * @license Mozilla Public License (MPLv2)
#. * @typedef {import('strophe.js/src/builder.js').Builder} Strophe.Builder
#.
#. *********************** BEGIN API ***********************
#. We extend the default converse.js API to add methods specific to MUC groupchats.
#. *
#. * The "pubsub" namespace groups methods relevant to PubSub
#. *
#. * @namespace _converse.api.pubsub
#. * @memberOf _converse.api
#.
#. *
#. * Publshes an item to a PubSub node
#. *
#. * @method _converse.api.pubsub.publish
#. * @param { string } jid The JID of the pubsub service where the node resides.
#. * @param { string } node The node being published to
#. * @param {Strophe.Builder} item The Strophe.Builder representation of the XML element being published
#. * @param { object } options An object representing the publisher options
#. *      (see https://xmpp.org/extensions/xep-0060.html#publisher-publish-options)
#. * @param { boolean } strict_options Indicates whether the publisher
#. *      options are a strict requirement or not. If they're NOT
#. *      strict, then Converse will publish to the node even if
#. *      the publish options precondication cannot be met.
#.
#. #__PURE__
#. The publish-options precondition couldn't be
#. met. We re-publish but without publish-options.
#. CONCATENATED MODULE: ./src/headless/plugins/status/api.js
#. harmony default export
#. *
#. * Set and get the user's chat status, also called their *availability*.
#. * @namespace _converse.api.user.status
#. * @memberOf _converse.api.user
#.
#. *
#. * Return the current user's availability status.
#. * @async
#. * @method _converse.api.user.status.get
#. * @example _converse.api.user.status.get();
#.
#. #__PURE__
#. *
#. * The user's status can be set to one of the following values:
#. *
#. * @async
#. * @method _converse.api.user.status.set
#. * @param { string } value The user's chat status (e.g. 'away', 'dnd', 'offline', 'online', 'unavailable' or 'xa')
#. * @param { string } [message] A custom status message
#. *
#. * @example _converse.api.user.status.set('dnd');
#. * @example _converse.api.user.status.set('dnd', 'In a meeting');
#.
#. #__PURE__
#. *
#. * Set and retrieve the user's custom status message.
#. *
#. * @namespace _converse.api.user.status.message
#. * @memberOf _converse.api.user.status
#.
#. *
#. * @async
#. * @method _converse.api.user.status.message.get
#. * @returns { Promise<string> } The status message
#. * @example const message = _converse.api.user.status.message.get()
#.
#. #__PURE__
#. *
#. * @async
#. * @method _converse.api.user.status.message.set
#. * @param { string } status The status message
#. * @example _converse.api.user.status.message.set('In a meeting');
#.
#. #__PURE__
#. CONCATENATED MODULE: ./src/headless/plugins/roster/filter.js
#. #__PURE__
#. CONCATENATED MODULE: ./src/headless/plugins/roster/utils.js
#. *
#. * @typedef {import('./contacts').default} RosterContacts
#.
#. Initialize the collections that represent the roster contacts and groups
#. XXX Deprecated
#. XXX Deprecated
#. *
#. * Triggered once the `RosterContacts`
#. * been created, but not yet populated with data.
#. * This event is useful when you want to create views for these collections.
#. * @event _converse#chatBoxMaximized
#. * @example _converse.api.listen.on('rosterInitialized', () => { ... });
#. * @example _converse.api.waitUntil('rosterInitialized').then(() => { ... });
#.
#. *
#. * Fetch all the roster groups, and then the roster contacts.
#. * Emit an event after fetching is done in each case.
#. * @param {boolean} ignore_cache - If set to to true, the local cache
#. *      will be ignored it's guaranteed that the XMPP server
#. *      will be queried for the roster.
#.
#. #__PURE__
#. * @type {RosterContacts}
#. * @type {RosterContacts}
#. * @type {RosterContacts}
#. *
#. * Roster specific event handler for the clearSession event
#.
#. #__PURE__
#. *
#. * Roster specific event handler for the presencesInitialized event
#. * @param { Boolean } reconnecting
#.
#. #__PURE__
#. * @type {RosterContacts}
#. XXX DEPRECATED
#. *
#. * Similar to `rosterInitialized`, but instead pertaining to reconnection.
#. * This event indicates that the roster and its groups are now again
#. * available after Converse.js has reconnected.
#. * @event _converse#rosterReadyAfterReconnection
#. * @example _converse.api.listen.on('rosterReadyAfterReconnection', () => { ... });
#.
#. * @type {RosterContacts}
#. *
#. * Roster specific event handler for the statusInitialized event
#. * @param { Boolean } reconnecting
#.
#. *
#. * Roster specific event handler for the chatBoxesInitialized event
#.
#. #__PURE__
#. We might be continuing an existing session, so we fetch
#. cached presence data.
#. *
#. * Triggered once the _converse.Presences collection has been
#. * initialized and its cached data fetched.
#. * Returns a boolean indicating whether this event has fired due to
#. * Converse having reconnected.
#. * @event _converse#presencesInitialized
#. * @type {boolean}
#. * @example _converse.api.listen.on('presencesInitialized', reconnecting => { ... });
#.
#. *
#. * Roster specific handler for the rosterContactsFetched promise
#.
#. * @type {RosterContacts}
#. When a new contact is added, check if we already have a
#. chatbox open for it, and if so attach it to the chatbox.
#. *
#. * Reject or cancel another user's subscription to our presence updates.
#. * @function rejectPresenceSubscription
#. * @param { String } jid - The Jabber ID of the user whose subscription is being canceled
#. * @param { String } message - An optional message to the user
#.
#. * @type {RosterContacts}
#. * @type {RosterContacts}
#. *
#. * @param {string} query
#.
#. #__PURE__
#. * @type {RequestMode}
#. CONCATENATED MODULE: ./src/headless/plugins/roster/contact.js
#. #__PURE__
#. #__PURE__
#. *
#. * When a contact's presence status has changed.
#. * The presence status is either `online`, `offline`, `dnd`, `away` or `xa`.
#. * @event _converse#contactPresenceChanged
#. * @type {RosterContact}
#. * @example _converse.api.listen.on('contactPresenceChanged', contact => { ... });
#.
#. *
#. * Synchronous event which provides a hook for further initializing a RosterContact
#. * @event _converse#rosterContactInitialized
#. * @param {RosterContact} contact
#.
#. *
#. * Return a string of tab-separated values that are to be used when
#. * matching against filter text.
#. *
#. * The goal is to be able to filter against the VCard fullname,
#. * roster nickname and JID.
#. * @returns {string} Lower-cased, tab-separated values
#.
#. Gets overridden in converse-vcard where the fullname is may be returned
#. Gets overridden in converse-vcard where the fullname may be returned
#. *
#. * Send a presence subscription request to this roster contact
#. * @method RosterContacts#subscribe
#. * @param {string} message - An optional message to explain the
#. *      reason for the subscription request.
#.
#. ask === 'subscribe' Means we have asked to subscribe to them.
#. *
#. * Upon receiving the presence stanza of type "subscribed",
#. * the user SHOULD acknowledge receipt of that subscription
#. * state notification by sending a presence stanza of type
#. * "subscribe" to the contact
#. * @method RosterContacts#ackSubscribe
#.
#. *
#. * Upon receiving the presence stanza of type "unsubscribed",
#. * the user SHOULD acknowledge receipt of that subscription state
#. * notification by sending a presence stanza of type "unsubscribe"
#. * this step lets the user's server know that it MUST no longer
#. * send notification of the subscription state change to the user.
#. * @method RosterContacts#ackUnsubscribe
#.
#. *
#. * Unauthorize this contact's presence subscription
#. * @method RosterContacts#unauthorize
#. * @param {string} message - Optional message to send to the person being unauthorized
#.
#. *
#. * Authorize presence subscription
#. * @method RosterContacts#authorize
#. * @param {string} message - Optional message to send to the person being authorized
#.
#. *
#. * Instruct the XMPP server to remove this contact from our roster
#. * @method RosterContacts#removeFromRoster
#. * @returns {Promise}
#.
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/plugins/roster/contacts.js
#. #__PURE__
#. Called as soon as the connection has been established
#. (either after initial login, or after reconnection).
#. Use the opportunity to register stanza handlers.
#. *
#. * Register a handler for roster IQ "set" stanzas, which update
#. * roster contacts.
#.
#. Register a handler for roster IQ "set" stanzas, which update
#. roster contacts.
#. *
#. * Register a handler for RosterX message stanzas, which are
#. * used to suggest roster contacts to a user.
#.
#. *
#. * Fetches the roster contacts, first by trying the browser cache,
#. * and if that's empty, then by querying the XMPP server.
#. * @returns {promise} Promise which resolves once the contacts have been fetched.
#.
#. #__PURE__
#. Force a full roster refresh
#. *
#. * The contacts roster has been retrieved from the local cache (`sessionStorage`).
#. * @event _converse#cachedRoster
#. * @type {RosterContacts}
#. * @example _converse.api.listen.on('cachedRoster', (items) => { ... });
#. * @example _converse.api.waitUntil('cachedRoster').then(items => { ... });
#.
#. eslint-disable-next-line class-methods-use-this
#. eslint-disable-next-line class-methods-use-this
#. *
#. * Add a roster contact and then once we have confirmation from
#. * the XMPP server we subscribe to that contact's presence updates.
#. * @method _converse.RosterContacts#addAndSubscribe
#. * @param { String } jid - The Jabber ID of the user being added and subscribed to.
#. * @param { String } name - The name of that user
#. * @param { Array<String> } groups - Any roster groups the user might belong to
#. * @param { String } message - An optional message to explain the reason for the subscription request.
#. * @param { Object } attributes - Any additional attributes to be stored on the user's model.
#.
#. #__PURE__
#. *
#. * Send an IQ stanza to the XMPP server to add a new roster contact.
#. * @method _converse.RosterContacts#sendContactAddIQ
#. * @param { String } jid - The Jabber ID of the user being added
#. * @param { String } name - The name of that user
#. * @param { Array<String> } groups - Any roster groups the user might belong to
#.
#. eslint-disable-next-line class-methods-use-this
#. *
#. * Adds a RosterContact instance to _converse.roster and
#. * registers the contact on the XMPP server.
#. * Returns a promise which is resolved once the XMPP server has responded.
#. * @method _converse.RosterContacts#addContactToRoster
#. * @param { String } jid - The Jabber ID of the user being added and subscribed to.
#. * @param { String } name - The name of that user
#. * @param { Array<String> } groups - Any roster groups the user might belong to
#. * @param { Object } attributes - Any additional attributes to be stored on the user's model.
#.
#. #__PURE__
#: dist/converse-no-dependencies.js:17938
#: dist/converse-no-dependencies.js:122673
#, javascript-format
msgid "Sorry, there was an error while trying to add %1$s as a contact."
msgstr ""

#. #__PURE__
#. Can happen when a subscription is retried or roster was deleted
#. *
#. * Handle roster updates from the XMPP server.
#. * See: https://xmpp.org/rfcs/rfc6121.html#roster-syntax-actions-push
#. * @method _converse.RosterContacts#onRosterPush
#. * @param { Element } iq - The IQ stanza received from the XMPP server.
#.
#. https://tools.ietf.org/html/rfc6121#page-15
#.
#. A receiving client MUST ignore the stanza unless it has no 'from'
#. attribute (i.e., implicitly from the bare JID of the user's
#. account) or it has a 'from' attribute whose value matches the
#. user's bare JID <user@domainpart>.
#. *
#. * When the roster receives a push event from server (i.e. new entry in your contacts roster).
#. * @event _converse#rosterPush
#. * @type { Element }
#. * @example _converse.api.listen.on('rosterPush', iq => { ... });
#.
#. *
#. * Fetch the roster from the XMPP server
#. * @emits _converse#roster
#. * @returns {promise}
#.
#. #__PURE__
#. We're getting the full roster, so remove all cached
#. contacts that aren't included in it.
#. Some unknown error happened, so we will try to fetch again if the page reloads.
#. *
#. * When the roster has been received from the XMPP server.
#. * See also the `cachedRoster` event further up, which gets called instead of
#. * `roster` if its already in `sessionStorage`.
#. * @event _converse#roster
#. * @type { Element }
#. * @example _converse.api.listen.on('roster', iq => { ... });
#. * @example _converse.api.waitUntil('roster').then(iq => { ... });
#.
#. *
#. * Update or create RosterContact models based on the given `item` XML
#. * node received in the resulting IQ stanza from the server.
#. * @param { Element } item
#.
#. We only find out about requesting contacts via the
#. presence handler, so if we receive a contact
#. here, we know they aren't requesting anymore.
#. *
#. * Triggered when someone has requested to subscribe to your presence (i.e. to be your contact).
#. * @event _converse#contactRequest
#. * @type {RosterContact}
#. * @example _converse.api.listen.on('contactRequest', contact => { ... });
#.
#: dist/converse-no-dependencies.js:17982
#: dist/converse-no-dependencies.js:122948
msgid "This client does not allow presence subscriptions"
msgstr ""

#. eslint-disable-next-line class-methods-use-this
#. Another resource has changed its status and
#. synchronize_availability option set to update,
#. we'll update ours as well.
#. XXX: We've received an "unavailable" presence from our
#. own resource. Apparently this happens due to a
#. Prosody bug, whereby we send an IQ stanza to remove
#. a roster contact, and Prosody then sends
#. "unavailable" globally, instead of directed to the
#. particular user that's removed.
#.
#. Here is the bug report: https://prosody.im/issues/1121
#.
#. I'm not sure whether this might legitimately happen
#. in other cases.
#.
#. As a workaround for now we simply send our presence again,
#. otherwise we're treated as offline.
#. Ignore MUC
#. presence_type is undefined
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/plugins/roster/resource.js
#. #__PURE__
#. eslint-disable-line class-methods-use-this
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/plugins/roster/resources.js
#. #__PURE__
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/plugins/roster/presence.js
#. #__PURE__
#. eslint-disable-line class-methods-use-this
#. eslint-disable-line class-methods-use-this
#. *
#. * Return the resource with the highest priority.
#. * If multiple resources have the same priority, take the latest one.
#. * @private
#.
#. *
#. * Adds a new resource and it's associated attributes as taken
#. * from the passed in presence stanza.
#. * Also updates the presence if the resource has higher priority (and is newer).
#. * @param { Element } presence: The presence stanza
#.
#. *
#. * Remove the passed in resource from the resources map.
#. * Also redetermines the presence given that there's one less
#. * resource.
#. * @param { string } name: The resource name
#.
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/plugins/roster/presences.js
#. #__PURE__
#. harmony default export
#. CONCATENATED MODULE: ./src/headless/plugins/status/utils.js
#. *
#. * Triggered when the user's own chat status has been initialized.
#. * @event _converse#statusInitialized
#. * @example _converse.api.listen.on('statusInitialized', status => { ... });
#. * @example _converse.api.waitUntil('statusInitialized').then(() => { ... });
#.
#. If there's no xmppstatus obj, then we were never connected to
#. begin with, so we set reconnecting to false.
#. *
#. * Resets counters and flags relating to CSI and auto_away/auto_xa
#.
#. We can't send out any stanzas when there's no authenticated connection.
#. This can happen when the connection reconnects.
#. XXX: we should really remember the original state here, and
#. then set it back to that...
#. An interval handler running every second.
#. * Used for CSI and the auto_away and auto_xa features.
#.
#. We can't send out any stanzas when there's no authenticated connection.
#. This can happen when the connection reconnects.
#. *
#. * Send out a Client State Indication (XEP-0352)
#. * @function sendCSI
#. * @param { String } stat - The user's chat status
#.
#. *
#. * Set an interval of one second and register a handler for it.
#. * Required for the auto_away, auto_xa and csi_waiting_time features.
#.
#. Waiting time of less then one second means features aren't used.
#. Was the user's status changed by Converse?
#. CONCATENATED MODULE: ./src/headless/plugins/status/status.js
#. #__PURE__
#. Gets overridden in converse-vcard
#. * Constructs a presence stanza
#. * @param {string} [type]
#. * @param {string} [to] - The JID to which this presence should be sent
#. * @param {string} [status_message]
#.
#. #__PURE__
#. *
#. * *Hook* which allows plugins to modify a presence stanza
#. * @event _converse#constructedPresence
#.
#. CONCATENATED MODULE: ./src/headless/plugins/status/plugin.js
#. Seconds after which user status is set to 'away'
#. Seconds after which user status is set to 'xa'
#. Support for XEP-0352. Seconds before client is considered idle and CSI is sent out.
#. Seconds after which an idle presence is sent
#. Deprecated
#. XXX DEPRECATED
#. CONCATENATED MODULE: ./src/headless/plugins/status/index.js
#. CONCATENATED MODULE: ./src/headless/plugins/roster/api.js
#. harmony default export
#. *
#. * @namespace _converse.api.contacts
#. * @memberOf _converse.api
#.
#. *
#. * This method is used to retrieve roster contacts.
#. *
#. * @method _converse.api.contacts.get
#. * @params {(string[]|string)} jid|jids The JID or JIDs of
#. *      the contacts to be returned.
#. * @returns {promise} Promise which resolves with the
#. *  _converse.RosterContact (or an array of them) representing the contact.
#. *
#. * @example
#. * // Fetch a single contact
#. * _converse.api.listen.on('rosterContactsFetched', function () {
#. *     const contact = await _converse.api.contacts.get('buddy@example.com')
#. *     // ...
#. * });
#. *
#. * @example
#. * // To get multiple contacts, pass in an array of JIDs:
#. * _converse.api.listen.on('rosterContactsFetched', function () {
#. *     const contacts = await _converse.api.contacts.get(
#. *         ['buddy1@example.com', 'buddy2@example.com']
#. *     )
#. *     // ...
#. * });
#. *
#. * @example
#. * // To return all contacts, simply call ``get`` without any parameters:
#. * _converse.api.listen.on('rosterContactsFetched', function () {
#. *     const contacts = await _converse.api.contacts.get();
#. *     // ...
#. * });
#.
#. #__PURE__
#. *
#. * Add a contact.
#. *
#. * @method _converse.api.contacts.add
#. * @param { string } jid The JID of the contact to be added
#. * @param { string } [name] A custom name to show the user by in the roster
#. * @example
#. *     _converse.api.contacts.add('buddy@example.com')
#. * @example
#. *     _converse.api.contacts.add('buddy@example.com', 'Buddy')
#.
#. #__PURE__
#. CONCATENATED MODULE: ./src/headless/plugins/roster/plugin.js
#. *
#. * @copyright The Converse.js contributors
#. * @license Mozilla Public License (MPLv2)
#.
#. API methods only available to plugins
#: dist/converse-no-dependencies.js:18117
#: dist/converse-no-dependencies.js:124109
msgid "My contacts"
msgstr ""

#: dist/converse-no-dependencies.js:18117
#: dist/converse-no-dependencies.js:124110
msgid "Pending contacts"
msgstr ""

#: dist/converse-no-dependencies.js:18117
#: dist/converse-no-dependencies.js:124111
msgid "Contact requests"
msgstr ""

#: dist/converse-no-dependencies.js:18117
#: dist/converse-no-dependencies.js:124112
msgid "Ungrouped"
msgstr ""

#: dist/converse-no-dependencies.js:18117
#: dist/converse-no-dependencies.js:79577
#: dist/converse-no-dependencies.js:124113
msgid "New messages"
msgstr ""

#: dist/converse-no-dependencies.js:19145
#: dist/converse-no-dependencies.js:19146
#: dist/converse-no-dependencies.js:83970
#: dist/converse-no-dependencies.js:90253
msgid "Close"
msgstr ""

#: dist/converse-no-dependencies.js:19973
msgid "OK"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:19973
#: dist/converse-no-dependencies.js:22220
#: dist/converse-no-dependencies.js:97175
#: dist/converse-no-dependencies.js:116452
msgid "Cancel"
msgstr ""

#: dist/converse-no-dependencies.js:22214
msgid "Execute"
msgstr ""

#: dist/converse-no-dependencies.js:22215
msgid "Previous"
msgstr ""

#: dist/converse-no-dependencies.js:22216
msgid "Next"
msgstr ""

#: dist/converse-no-dependencies.js:22217
msgid "Complete"
msgstr ""

#: dist/converse-no-dependencies.js:24802
msgid "Add to Contacts"
msgstr ""

#: dist/converse-no-dependencies.js:24813
#: dist/converse-no-dependencies.js:78220
#: dist/converse-no-dependencies.js:94701
#: dist/converse-no-dependencies.js:100021
#: dist/converse-no-dependencies.js:103939
#: dist/converse-no-dependencies.js:118225
msgid "Nickname"
msgstr ""

#: dist/converse-no-dependencies.js:24813
#: dist/converse-no-dependencies.js:49185
#: dist/converse-no-dependencies.js:78217
#: dist/converse-no-dependencies.js:87377
#: dist/converse-no-dependencies.js:98782
#: dist/converse-no-dependencies.js:103938
#: dist/converse-no-dependencies.js:124167
msgid "XMPP Address"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:24813
#: dist/converse-no-dependencies.js:25090
msgid "Affiliation"
msgstr ""

#: dist/converse-no-dependencies.js:24815
#: dist/converse-no-dependencies.js:25094
#: dist/converse-no-dependencies.js:78222
#: dist/converse-no-dependencies.js:103940
msgid "Role"
msgstr ""

#: dist/converse-no-dependencies.js:24817
msgid "Hats"
msgstr ""

#: dist/converse-no-dependencies.js:24817
msgid "Occupant Id"
msgstr ""

#: dist/converse-no-dependencies.js:24955
#: dist/converse-no-dependencies.js:47955
msgid "Affiliation changed"
msgstr ""

#: dist/converse-no-dependencies.js:24958
msgid "role changed"
msgstr ""

#: dist/converse-no-dependencies.js:25052
msgid ""
"Moderators are privileged users who can change the roles of other users "
"(except those with admin or owner affiliations."
msgstr ""

#: dist/converse-no-dependencies.js:25054
msgid "The default role, implies that you can read and write messages."
msgstr ""

#: dist/converse-no-dependencies.js:25056
msgid ""
"Visitors aren't allowed to write messages in a moderated multi-user chat."
msgstr ""

#: dist/converse-no-dependencies.js:25061
msgid ""
"Owner is the highest affiliation. Owners can modify roles and affiliations "
"of all other users."
msgstr ""

#: dist/converse-no-dependencies.js:25063
msgid ""
"Admin is the 2nd highest affiliation. Admins can modify roles and "
"affiliations of all other users except owners."
msgstr ""

#: dist/converse-no-dependencies.js:25065
msgid "To ban a user, you give them the affiliation of \"outcast\"."
msgstr ""

#: dist/converse-no-dependencies.js:25091
msgid "No users with that affiliation found."
msgstr ""

#: dist/converse-no-dependencies.js:25092
msgid "No users with that role found."
msgstr ""

#: dist/converse-no-dependencies.js:25093
msgid "Type here to filter the search results"
msgstr ""

#: dist/converse-no-dependencies.js:25095
msgid "Show users"
msgstr ""

#: dist/converse-no-dependencies.js:25096
msgid ""
"Roles are assigned to users to grant or deny them certain abilities in a "
"multi-user chat. They're assigned either explicitly or implicitly as part of "
"an affiliation. A role that's not due to an affiliation, is only valid for "
"the duration of the user's session."
msgstr ""

#: dist/converse-no-dependencies.js:25097
msgid ""
"An affiliation is a long-lived entitlement which typically implies a certain "
"role and which grants privileges and responsibilities. For example admins "
"and owners automatically have the moderator role."
msgstr ""

#: dist/converse-no-dependencies.js:47960
msgid "Role changed"
msgstr ""

#. eslint-disable-line class-methods-use-this
#: dist/converse-no-dependencies.js:48396
msgid "Moderator Tools"
msgstr ""

#: dist/converse-no-dependencies.js:48818
#, javascript-format
msgid "%1$s has invited you to join a groupchat: %2$s"
msgstr ""

#: dist/converse-no-dependencies.js:48820
#, javascript-format
msgid ""
"%1$s has invited you to join a groupchat: %2$s, and left the following "
"reason: \"%3$s\""
msgstr ""

#: dist/converse-no-dependencies.js:48837
msgid "Are you sure you want to destroy this groupchat?"
msgstr ""

#: dist/converse-no-dependencies.js:48840
msgid "Please enter the XMPP address of this groupchat to confirm"
msgstr ""

#: dist/converse-no-dependencies.js:48842
#: dist/converse-no-dependencies.js:124164
msgid "name@example.org"
msgstr ""

#: dist/converse-no-dependencies.js:48846
msgid "Optional reason for destroying this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:48847
#: dist/converse-no-dependencies.js:93308
#: dist/converse-no-dependencies.js:93885
msgid "Reason"
msgstr ""

#: dist/converse-no-dependencies.js:48850
msgid "Optional XMPP address for a new groupchat that replaces this one"
msgstr ""

#: dist/converse-no-dependencies.js:48851
msgid "replacement@example.org"
msgstr ""

#: dist/converse-no-dependencies.js:48855
#: dist/converse-no-dependencies.js:72140
#: dist/converse-no-dependencies.js:72214
#: dist/converse-no-dependencies.js:72242
#: dist/converse-no-dependencies.js:100098
msgid "Confirm"
msgstr ""

#: dist/converse-no-dependencies.js:49014
msgid ""
"Couldn't find a participant with that nickname. They might have left the "
"groupchat."
msgstr ""

#. e.g. Your nickname is "coolguy69"
#: dist/converse-no-dependencies.js:49120
#, javascript-format
msgid "Your nickname is \"%1$s\""
msgstr ""

#: dist/converse-no-dependencies.js:49138
msgid "Error: invalid number of arguments"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:49181
msgid "On which entity do you want to run commands?"
msgstr ""

#: dist/converse-no-dependencies.js:49182
msgid ""
"Certain XMPP services and entities allow privileged users to execute ad-hoc "
"commands on them."
msgstr ""

#: dist/converse-no-dependencies.js:49183
msgid "Commands found"
msgstr ""

#: dist/converse-no-dependencies.js:49184
msgid "List available commands"
msgstr ""

#: dist/converse-no-dependencies.js:49186
msgid "No commands found"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:49227
#, javascript-format
msgid "Download file \"%1$s\""
msgstr ""

#: dist/converse-no-dependencies.js:50553
msgid "Sorry, an error occurred while looking for commands on that entity."
msgstr ""

#: dist/converse-no-dependencies.js:50562
msgid "The specified entity doesn't support ad-hoc commands"
msgstr ""

#: dist/converse-no-dependencies.js:50669
msgid ""
"Sorry, an error occurred while trying to execute the command. See the "
"developer console for details"
msgstr ""

#: dist/converse-no-dependencies.js:50673
msgid "Executing"
msgstr ""

#: dist/converse-no-dependencies.js:50680
#: dist/converse-no-dependencies.js:50685
msgid "Completed"
msgstr ""

#: dist/converse-no-dependencies.js:50726
msgid ""
"An error occurred while trying to cancel the command. See the developer "
"console for details"
msgstr ""

#: dist/converse-no-dependencies.js:50733
msgid "Error: unexpected result"
msgstr ""

#: dist/converse-no-dependencies.js:51606
msgid "Bookmark this groupchat"
msgstr ""

#. eslint-disable-line class-methods-use-this
#: dist/converse-no-dependencies.js:51607
#: dist/converse-no-dependencies.js:52751
#: dist/converse-no-dependencies.js:119038
msgid "Bookmark"
msgstr ""

#: dist/converse-no-dependencies.js:51639
#, javascript-format
msgid "Are you sure you want to remove the bookmark \"%1$s\"?"
msgstr ""

#: dist/converse-no-dependencies.js:51691
msgid "Unbookmark this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:51692
#: dist/converse-no-dependencies.js:118560
#: dist/converse-no-dependencies.js:119059
msgid "Click to open this groupchat"
msgstr ""

#. harmony default export
#. *
#. * @param {import('shared/components/list-filter').default} el
#.
#. harmony default export
#. *
#. * @typedef {import('shared/components/list-filter').default} ListFilter
#.
#. *
#. * @param {ListFilter} el
#.
#. harmony default export
#: dist/converse-no-dependencies.js:51716
#: dist/converse-no-dependencies.js:95929
#: dist/converse-no-dependencies.js:124829
msgid "Filter"
msgstr ""

#: dist/converse-no-dependencies.js:52411
#: dist/converse-no-dependencies.js:119120
msgid "Bookmarks"
msgstr ""

#: dist/converse-no-dependencies.js:52435
#, javascript-format
msgid "Bookmark for \"%1$s\""
msgstr ""

#: dist/converse-no-dependencies.js:52436
msgid "Would you like this groupchat to be automatically joined upon startup?"
msgstr ""

#: dist/converse-no-dependencies.js:52437
msgid "Remove"
msgstr ""

#: dist/converse-no-dependencies.js:52438
msgid "The name for this bookmark:"
msgstr ""

#: dist/converse-no-dependencies.js:52439
msgid "What should your nickname for this groupchat be?"
msgstr ""

#: dist/converse-no-dependencies.js:52440
msgid "Update"
msgstr ""

#: dist/converse-no-dependencies.js:52440
#: dist/converse-no-dependencies.js:97174
#: dist/converse-no-dependencies.js:103494
msgid "Save"
msgstr ""

#: dist/converse-no-dependencies.js:72094
msgid ""
"You have an unsent message which will be lost if you continue. Are you sure?"
msgstr ""

#: dist/converse-no-dependencies.js:72134
#: dist/converse-no-dependencies.js:72204
msgid ""
"Be aware that other XMPP/Jabber clients (and servers) may not yet support "
"retractions and that this message may not be removed everywhere."
msgstr ""

#: dist/converse-no-dependencies.js:72135
#: dist/converse-no-dependencies.js:72209
#: dist/converse-no-dependencies.js:72237
msgid "Are you sure you want to retract this message?"
msgstr ""

#: dist/converse-no-dependencies.js:72176
msgid "A timeout occurred while trying to retract the message"
msgstr ""

#: dist/converse-no-dependencies.js:72180
msgid "Sorry, you're not allowed to retract this message."
msgstr ""

#: dist/converse-no-dependencies.js:72254
msgid "You are about to retract this message."
msgstr ""

#: dist/converse-no-dependencies.js:72254
msgid ""
"You may optionally include a message, explaining the reason for the "
"retraction."
msgstr ""

#: dist/converse-no-dependencies.js:72259
msgid "Message Retraction"
msgstr ""

#: dist/converse-no-dependencies.js:72259
msgid "Optional reason"
msgstr ""

#: dist/converse-no-dependencies.js:72267
msgid "Sorry, you're not allowed to retract this message"
msgstr ""

#: dist/converse-no-dependencies.js:72385
msgid "Show media"
msgstr ""

#: dist/converse-no-dependencies.js:72385
msgid "Hide media"
msgstr ""

#. * @type {MessageActionAttributes}
#: dist/converse-no-dependencies.js:72440
msgid "Cancel Editing"
msgstr ""

#: dist/converse-no-dependencies.js:72440
msgid "Edit"
msgstr ""

#: dist/converse-no-dependencies.js:72463
msgid "Retract"
msgstr ""

#: dist/converse-no-dependencies.js:72480
msgid "Copy"
msgstr ""

#: dist/converse-no-dependencies.js:72490
msgid "Quote"
msgstr ""

#: dist/converse-no-dependencies.js:77970
msgid "Older versions"
msgstr ""

#: dist/converse-no-dependencies.js:77972
msgid "No older versions found"
msgstr ""

#: dist/converse-no-dependencies.js:77972
msgid "Current version"
msgstr ""

#. eslint-disable-line class-methods-use-this
#: dist/converse-no-dependencies.js:78117
msgid "Message versions"
msgstr ""

#: dist/converse-no-dependencies.js:78199
msgid "Remove as contact"
msgstr ""

#: dist/converse-no-dependencies.js:78206
msgid "Refresh"
msgstr ""

#: dist/converse-no-dependencies.js:78218
#: dist/converse-no-dependencies.js:103936
msgid "Email"
msgstr ""

#: dist/converse-no-dependencies.js:78219
#: dist/converse-no-dependencies.js:103937
msgid "Full Name"
msgstr ""

#: dist/converse-no-dependencies.js:78221
#: dist/converse-no-dependencies.js:83723
msgid "The User's Profile Image"
msgstr ""

#: dist/converse-no-dependencies.js:78223
#: dist/converse-no-dependencies.js:103943
msgid "URL"
msgstr ""

#: dist/converse-no-dependencies.js:78320
#: dist/converse-no-dependencies.js:126139
#, javascript-format
msgid "Sorry, there was an error while trying to remove %1$s as a contact."
msgstr ""

#: dist/converse-no-dependencies.js:78980
msgid "Sorry, something went wrong while trying to refresh"
msgstr ""

#: dist/converse-no-dependencies.js:79012
#: dist/converse-no-dependencies.js:126121
msgid "Are you sure you want to remove this contact?"
msgstr ""

#: dist/converse-no-dependencies.js:79058
msgid "Uploading file:"
msgstr ""

#: dist/converse-no-dependencies.js:79081
msgid "Retry"
msgstr ""

#: dist/converse-no-dependencies.js:79610
msgid "This message has been edited"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:79617
msgid "Show more"
msgstr ""

#: dist/converse-no-dependencies.js:79619
msgid "Show less"
msgstr ""

#: dist/converse-no-dependencies.js:80401
#: dist/converse-no-dependencies.js:80403
#, javascript-format
msgid "%1$s has removed this message"
msgstr ""

#: dist/converse-no-dependencies.js:81680
msgid "Search results"
msgstr ""

#: dist/converse-no-dependencies.js:81706
msgid "Search"
msgstr ""

#: dist/converse-no-dependencies.js:82506
msgid "Insert emojis"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:83122
msgid "Message characters remaining"
msgstr ""

#: dist/converse-no-dependencies.js:83306
msgid "Send the message"
msgstr ""

#: dist/converse-no-dependencies.js:83538
msgid "Start a call"
msgstr ""

#: dist/converse-no-dependencies.js:83554
msgid "Hide participants"
msgstr ""

#: dist/converse-no-dependencies.js:83555
msgid "Show participants"
msgstr ""

#: dist/converse-no-dependencies.js:83576
msgid "Choose a file to send"
msgstr ""

#: dist/converse-no-dependencies.js:83593
msgid "Click to write as a normal (non-spoiler) message"
msgstr ""

#: dist/converse-no-dependencies.js:83595
msgid "Click to write your message as a spoiler"
msgstr ""

#: dist/converse-no-dependencies.js:83958
#: dist/converse-no-dependencies.js:99999
msgid "Details"
msgstr ""

#: dist/converse-no-dependencies.js:83959
msgid "See more information about this person"
msgstr ""

#: dist/converse-no-dependencies.js:83971
msgid "Close and end this conversation"
msgstr ""

#: dist/converse-no-dependencies.js:84384
msgid "Are you sure you want to clear the messages from this conversation?"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:84509
#: dist/converse-no-dependencies.js:94095
msgid "Hidden message"
msgstr ""

#: dist/converse-no-dependencies.js:84509
#: dist/converse-no-dependencies.js:94095
msgid "Message"
msgstr ""

#: dist/converse-no-dependencies.js:84510
#: dist/converse-no-dependencies.js:94096
msgid "Optional hint"
msgstr ""

#: dist/converse-no-dependencies.js:85226
msgid "Sorry, the connection has been lost, and your message could not be sent"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:85322
#: dist/converse-no-dependencies.js:94942
#: dist/converse-no-dependencies.js:94954
msgid "You have unread messages"
msgstr ""

#. eslint-disable-line class-methods-use-this
#: dist/converse-no-dependencies.js:86817
msgid "Remove messages"
msgstr ""

#: dist/converse-no-dependencies.js:86817
msgid "Close this chat"
msgstr ""

#: dist/converse-no-dependencies.js:86817
msgid "Write in the third person"
msgstr ""

#: dist/converse-no-dependencies.js:86817
#: dist/converse-no-dependencies.js:97017
msgid "Show this menu"
msgstr ""

#: dist/converse-no-dependencies.js:87350
msgid ""
"To improve performance, we cache your data in this browser. Uncheck this box "
"if this is a public computer or if you want your data to be deleted when you "
"log out. It's important that you explicitly log out, otherwise not all "
"cached data might be deleted. Please note, when using an untrusted device, "
"OMEMO encryption is NOT available."
msgstr ""

#: dist/converse-no-dependencies.js:87351
msgid "This is a trusted device"
msgstr ""

#: dist/converse-no-dependencies.js:87355
msgid "Connection URL"
msgstr ""

#: dist/converse-no-dependencies.js:87356
msgid "HTTP or websocket URL that is used to connect to your XMPP server"
msgstr ""

#: dist/converse-no-dependencies.js:87357
msgid "e.g. wss://example.org/xmpp-websocket"
msgstr ""

#: dist/converse-no-dependencies.js:87362
msgid "Password"
msgstr ""

#: dist/converse-no-dependencies.js:87366
msgid "Create an account"
msgstr ""

#: dist/converse-no-dependencies.js:87367
msgid "Don't have a chat account?"
msgstr ""

#: dist/converse-no-dependencies.js:87376
msgid "Log in"
msgstr ""

#: dist/converse-no-dependencies.js:87380
msgid "Username"
msgstr ""

#: dist/converse-no-dependencies.js:87380
msgid "user@domain"
msgstr ""

#: dist/converse-no-dependencies.js:87386
msgid "Disconnected"
msgstr ""

#: dist/converse-no-dependencies.js:87387
msgid "Click here to log in anonymously"
msgstr ""

#: dist/converse-no-dependencies.js:87503
#: dist/converse-no-dependencies.js:98781
#: dist/converse-no-dependencies.js:124676
msgid "Please enter a valid XMPP address"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:88426
msgid "Chat Contacts"
msgstr ""

#: dist/converse-no-dependencies.js:88426
msgid "Toggle chat"
msgstr ""

#: dist/converse-no-dependencies.js:90254
msgid "Close these announcements"
msgstr ""

#: dist/converse-no-dependencies.js:90860
msgid "Click to open this server message"
msgstr ""

#: dist/converse-no-dependencies.js:90869
msgid "Announcements"
msgstr ""

#: dist/converse-no-dependencies.js:91495
msgid "Click to load missing messages"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:93306
msgid "Change affiliation"
msgstr ""

#: dist/converse-no-dependencies.js:93307
msgid "New affiliation"
msgstr ""

#: dist/converse-no-dependencies.js:93808
msgid "Timeout error while trying to set the affiliation"
msgstr ""

#: dist/converse-no-dependencies.js:93810
msgid "Sorry, you're not allowed to make that change"
msgstr ""

#: dist/converse-no-dependencies.js:93812
msgid "Sorry, something went wrong while trying to set the affiliation"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:93883
msgid "Change role"
msgstr ""

#: dist/converse-no-dependencies.js:93884
msgid "New Role"
msgstr ""

#: dist/converse-no-dependencies.js:94045
msgid "You're not allowed to make that change"
msgstr ""

#: dist/converse-no-dependencies.js:94047
msgid "Sorry, something went wrong while trying to set the role"
msgstr ""

#: dist/converse-no-dependencies.js:94702
msgid "Change nickname"
msgstr ""

#: dist/converse-no-dependencies.js:94702
msgid "Enter groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:94703
msgid "Choose a nickname to enter"
msgstr ""

#: dist/converse-no-dependencies.js:94703
msgid "Please choose your nickname"
msgstr ""

#: dist/converse-no-dependencies.js:94956
msgid "You're not allowed to send messages in this room"
msgstr ""

#: dist/converse-no-dependencies.js:95861
#, javascript-format
msgid "Click to mention %1$s in your message."
msgstr ""

#: dist/converse-no-dependencies.js:95866
msgid "This user is a moderator."
msgstr ""

#: dist/converse-no-dependencies.js:95867
msgid "This user can send messages in this groupchat."
msgstr ""

#: dist/converse-no-dependencies.js:95868
msgid "This user can NOT send messages in this groupchat."
msgstr ""

#: dist/converse-no-dependencies.js:95884
msgid "Admin"
msgstr ""

#: dist/converse-no-dependencies.js:95885
msgid "Member"
msgstr ""

#: dist/converse-no-dependencies.js:95886
msgid "Moderator"
msgstr ""

#: dist/converse-no-dependencies.js:95887
msgid "Owner"
msgstr ""

#: dist/converse-no-dependencies.js:95888
msgid "Visitor"
msgstr ""

#: dist/converse-no-dependencies.js:95930
msgid "Filter by name"
msgstr ""

#: dist/converse-no-dependencies.js:95931
#: dist/converse-no-dependencies.js:124832
msgid "Filter by status"
msgstr ""

#: dist/converse-no-dependencies.js:95932
#: dist/converse-no-dependencies.js:124833
msgid "Any"
msgstr ""

#: dist/converse-no-dependencies.js:95933
#: dist/converse-no-dependencies.js:103493
msgid "Online"
msgstr ""

#: dist/converse-no-dependencies.js:95934
#: dist/converse-no-dependencies.js:124836
msgid "Chatty"
msgstr ""

#: dist/converse-no-dependencies.js:95935
#: dist/converse-no-dependencies.js:103492
#: dist/converse-no-dependencies.js:124837
msgid "Busy"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:95936
#: dist/converse-no-dependencies.js:103491
#: dist/converse-no-dependencies.js:124838
msgid "Away"
msgstr ""

#: dist/converse-no-dependencies.js:95937
#: dist/converse-no-dependencies.js:124839
msgid "Extended Away"
msgstr ""

#: dist/converse-no-dependencies.js:95938
#: dist/converse-no-dependencies.js:124840
msgid "Offline"
msgstr ""

#. *
#. * @param {MUCSidebar} el
#. * @param {Object} o
#.
#. harmony default export
#: dist/converse-no-dependencies.js:96011
msgid "Participant"
msgstr ""

#: dist/converse-no-dependencies.js:96011
msgid "Participants"
msgstr ""

#: dist/converse-no-dependencies.js:96012
msgid "Hide sidebar"
msgstr ""

#: dist/converse-no-dependencies.js:96013
#: dist/converse-no-dependencies.js:124901
msgid "Show filter"
msgstr ""

#: dist/converse-no-dependencies.js:96014
#: dist/converse-no-dependencies.js:124902
msgid "Hide filter"
msgstr ""

#: dist/converse-no-dependencies.js:97017
msgid "Change user's affiliation to admin"
msgstr ""

#: dist/converse-no-dependencies.js:97017
msgid "Ban user by changing their affiliation to outcast"
msgstr ""

#: dist/converse-no-dependencies.js:97017
msgid "Clear the chat area"
msgstr ""

#: dist/converse-no-dependencies.js:97017
msgid "Close this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:97017
msgid "Change user role to participant"
msgstr ""

#: dist/converse-no-dependencies.js:97017
#: dist/converse-no-dependencies.js:100075
msgid "Remove this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:97017
msgid "Kick user from groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:97017
msgid "Write in 3rd person"
msgstr ""

#: dist/converse-no-dependencies.js:97017
msgid "Grant membership to a user"
msgstr ""

#: dist/converse-no-dependencies.js:97017
msgid "Opens up the moderator tools GUI"
msgstr ""

#: dist/converse-no-dependencies.js:97017
msgid "Remove user's ability to post messages"
msgstr ""

#. eslint-disable-line class-methods-use-this
#: dist/converse-no-dependencies.js:97017
#: dist/converse-no-dependencies.js:99111
msgid "Change your nickname"
msgstr ""

#: dist/converse-no-dependencies.js:97017
msgid "Grant moderator role to user"
msgstr ""

#: dist/converse-no-dependencies.js:97017
msgid "Grant ownership of this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:97017
msgid "Register your nickname"
msgstr ""

#: dist/converse-no-dependencies.js:97017
msgid "Revoke the user's current affiliation"
msgstr ""

#: dist/converse-no-dependencies.js:97017
msgid "Set groupchat subject"
msgstr ""

#: dist/converse-no-dependencies.js:97017
msgid "Set groupchat subject (alias for /subject)"
msgstr ""

#: dist/converse-no-dependencies.js:97017
msgid "Allow muted user to post messages"
msgstr ""

#: dist/converse-no-dependencies.js:97172
msgid "Loading configuration form"
msgstr ""

#: dist/converse-no-dependencies.js:97727
msgid "Sorry, an error occurred while trying to submit the config form."
msgstr ""

#: dist/converse-no-dependencies.js:97780
msgid ""
"The conversation has moved to a new address. Click the link below to enter."
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:97786
msgid "This groupchat no longer exists"
msgstr ""

#: dist/converse-no-dependencies.js:97787
#, javascript-format
msgid "The following reason was given: \"%1$s\""
msgstr ""

#: dist/converse-no-dependencies.js:98488
#, javascript-format
msgid "This action was done by %1$s."
msgstr ""

#: dist/converse-no-dependencies.js:98492
#, javascript-format
msgid "The reason given is: \"%1$s\"."
msgstr ""

#: dist/converse-no-dependencies.js:98523
msgid "Topic"
msgstr ""

#: dist/converse-no-dependencies.js:98524
msgid "Topic author"
msgstr ""

#: dist/converse-no-dependencies.js:98534
msgid "XMPP address"
msgstr ""

#: dist/converse-no-dependencies.js:98535
msgid "Message archiving"
msgstr ""

#: dist/converse-no-dependencies.js:98536
msgid "Messages are archived on the server"
msgstr ""

#: dist/converse-no-dependencies.js:98537
msgid "Description"
msgstr ""

#: dist/converse-no-dependencies.js:98538
msgid "Features"
msgstr ""

#: dist/converse-no-dependencies.js:98539
#: dist/converse-no-dependencies.js:118525
msgid "Hidden"
msgstr ""

#: dist/converse-no-dependencies.js:98540
msgid "This groupchat is not publicly searchable"
msgstr ""

#: dist/converse-no-dependencies.js:98541
msgid "This groupchat is restricted to members only"
msgstr ""

#: dist/converse-no-dependencies.js:98542
msgid "Members only"
msgstr ""

#: dist/converse-no-dependencies.js:98543
#: dist/converse-no-dependencies.js:118527
msgid "Moderated"
msgstr ""

#: dist/converse-no-dependencies.js:98544
msgid ""
"Participants entering this groupchat need to request permission to write"
msgstr ""

#: dist/converse-no-dependencies.js:98545
#: dist/converse-no-dependencies.js:124166
msgid "Name"
msgstr ""

#: dist/converse-no-dependencies.js:98546
msgid "This groupchat does not require a password upon entry"
msgstr ""

#: dist/converse-no-dependencies.js:98547
msgid "No password required"
msgstr ""

#: dist/converse-no-dependencies.js:98548
msgid "Not anonymous"
msgstr ""

#: dist/converse-no-dependencies.js:98549
msgid "All other groupchat participants can see your XMPP address"
msgstr ""

#: dist/converse-no-dependencies.js:98550
msgid "Not moderated"
msgstr ""

#: dist/converse-no-dependencies.js:98551
msgid "Participants entering this groupchat can write right away"
msgstr ""

#: dist/converse-no-dependencies.js:98552
msgid "Online users"
msgstr ""

#: dist/converse-no-dependencies.js:98553
#: dist/converse-no-dependencies.js:118529
msgid "Open"
msgstr ""

#: dist/converse-no-dependencies.js:98554
msgid "Anyone can join this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:98555
msgid "This groupchat requires a password before entry"
msgstr ""

#: dist/converse-no-dependencies.js:98556
msgid "Password protected"
msgstr ""

#: dist/converse-no-dependencies.js:98557
msgid "Persistent"
msgstr ""

#: dist/converse-no-dependencies.js:98558
msgid "This groupchat persists even if it's unoccupied"
msgstr ""

#: dist/converse-no-dependencies.js:98559
#: dist/converse-no-dependencies.js:118531
msgid "Public"
msgstr ""

#: dist/converse-no-dependencies.js:98560
#: dist/converse-no-dependencies.js:118532
msgid "Semi-anonymous"
msgstr ""

#: dist/converse-no-dependencies.js:98561
msgid "Only moderators can see your XMPP address"
msgstr ""

#: dist/converse-no-dependencies.js:98562
#: dist/converse-no-dependencies.js:118533
msgid "Temporary"
msgstr ""

#: dist/converse-no-dependencies.js:98563
msgid "This groupchat will disappear once the last person leaves"
msgstr ""

#: dist/converse-no-dependencies.js:98564
msgid "This groupchat is publicly searchable"
msgstr ""

#. eslint-disable-line class-methods-use-this
#: dist/converse-no-dependencies.js:98758
#, javascript-format
msgid "Groupchat info for %1$s"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:98779
#: dist/converse-no-dependencies.js:100034
msgid "Invite"
msgstr ""

#: dist/converse-no-dependencies.js:98780
msgid "user@example.org"
msgstr ""

#: dist/converse-no-dependencies.js:98783
msgid "Optional reason for the invitation"
msgstr ""

#: dist/converse-no-dependencies.js:98946
msgid "Invite someone to this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:99388
msgid "Hide the groupchat topic"
msgstr ""

#: dist/converse-no-dependencies.js:99389
msgid "This groupchat is bookmarked"
msgstr ""

#: dist/converse-no-dependencies.js:100000
msgid "Show more information about this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:100010
msgid "Configure"
msgstr ""

#: dist/converse-no-dependencies.js:100011
msgid "Configure this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:100022
msgid "Change the nickname you're using in this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:100035
msgid "Invite someone to join this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:100047
msgid "Show topic"
msgstr ""

#: dist/converse-no-dependencies.js:100047
msgid "Hide topic"
msgstr ""

#: dist/converse-no-dependencies.js:100048
msgid "Show the topic message in the heading"
msgstr ""

#: dist/converse-no-dependencies.js:100048
msgid "Hide the topic in the heading"
msgstr ""

#: dist/converse-no-dependencies.js:100062
msgid "Moderate"
msgstr ""

#: dist/converse-no-dependencies.js:100063
msgid "Moderate this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:100074
msgid "Destroy"
msgstr ""

#: dist/converse-no-dependencies.js:100087
msgid "Leave"
msgstr ""

#: dist/converse-no-dependencies.js:100088
msgid "Leave and close this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:100096
msgid "Are you sure you want to leave this groupchat?"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:100147
msgid "This groupchat requires a password"
msgstr ""

#: dist/converse-no-dependencies.js:100148
msgid "Password: "
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:100149
#: dist/converse-no-dependencies.js:103983
msgid "Submit"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:101510
msgid "Minimized"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:102100
msgid "Click to restore this chat"
msgstr ""

#: dist/converse-no-dependencies.js:102259
#: dist/converse-no-dependencies.js:102277
msgid "Minimize"
msgstr ""

#: dist/converse-no-dependencies.js:102260
msgid "Minimize this chat"
msgstr ""

#: dist/converse-no-dependencies.js:102278
msgid "Minimize this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:103236
msgid "has gone offline"
msgstr ""

#: dist/converse-no-dependencies.js:103238
msgid "has gone away"
msgstr ""

#: dist/converse-no-dependencies.js:103240
msgid "is busy"
msgstr ""

#: dist/converse-no-dependencies.js:103242
msgid "has come online"
msgstr ""

#. workaround for Prosody which doesn't give type "headline"
#: dist/converse-no-dependencies.js:103277
#: dist/converse-no-dependencies.js:103283
#, javascript-format
msgid "Notification from %1$s"
msgstr ""

#: dist/converse-no-dependencies.js:103285
#: dist/converse-no-dependencies.js:103293
#: dist/converse-no-dependencies.js:103296
#, javascript-format
msgid "%1$s says"
msgstr ""

#: dist/converse-no-dependencies.js:103409
msgid "wants to be your contact"
msgstr ""

#: dist/converse-no-dependencies.js:103495
msgid "Away for long"
msgstr ""

#: dist/converse-no-dependencies.js:103496
msgid "Personal status message"
msgstr ""

#. eslint-disable-line class-methods-use-this
#: dist/converse-no-dependencies.js:103658
msgid "Change chat status"
msgstr ""

#: dist/converse-no-dependencies.js:103800
msgid "Your profile picture"
msgstr ""

#: dist/converse-no-dependencies.js:103941
msgid "Save and close"
msgstr ""

#: dist/converse-no-dependencies.js:103942
msgid ""
"Use commas to separate multiple roles. Your roles are shown next to your "
"name on your chat messages."
msgstr ""

#: dist/converse-no-dependencies.js:103944
msgid "OMEMO"
msgstr ""

#: dist/converse-no-dependencies.js:103945
msgid "Profile"
msgstr ""

#: dist/converse-no-dependencies.js:103946
msgid "Reset Password"
msgstr ""

#: dist/converse-no-dependencies.js:103984
msgid "The new passwords must match"
msgstr ""

#: dist/converse-no-dependencies.js:103985
msgid "New password"
msgstr ""

#: dist/converse-no-dependencies.js:103986
msgid "Confirm new password"
msgstr ""

#: dist/converse-no-dependencies.js:104493
msgid "Timeout error"
msgstr ""

#: dist/converse-no-dependencies.js:104500
msgid "Your server does not support password reset"
msgstr ""

#: dist/converse-no-dependencies.js:104507
msgid ""
"Your server responded with an unknown error, check the console for details"
msgstr ""

#: dist/converse-no-dependencies.js:104526
msgid "Timeout error while trying to set your password"
msgstr ""

#: dist/converse-no-dependencies.js:104528
msgid "Your server does not allow password reset"
msgstr ""

#: dist/converse-no-dependencies.js:104530
#: dist/converse-no-dependencies.js:104532
msgid "You are not allowed to change your password"
msgstr ""

#: dist/converse-no-dependencies.js:104534
msgid "Success"
msgstr ""

#: dist/converse-no-dependencies.js:104534
msgid "Your new password has been set"
msgstr ""

#. eslint-disable-line class-methods-use-this
#: dist/converse-no-dependencies.js:105065
msgid "Your Profile"
msgstr ""

#: dist/converse-no-dependencies.js:105086
msgid "Sorry, an error happened while trying to save your profile data."
msgstr ""

#: dist/converse-no-dependencies.js:105086
msgid "You can check your browser's developer console for any error output."
msgstr ""

#: dist/converse-no-dependencies.js:105159
msgid "About"
msgstr ""

#: dist/converse-no-dependencies.js:105160
msgid "Commands"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:105168
#, javascript-format
msgid ""
"%1$s Open Source %2$s XMPP chat client brought to you by %3$s Opkode %2$s"
msgstr ""

#: dist/converse-no-dependencies.js:105169
#, javascript-format
msgid "%1$s Translate %2$s it into your own language"
msgstr ""

#. eslint-disable-line class-methods-use-this
#: dist/converse-no-dependencies.js:105304
msgid "Settings"
msgstr ""

#: dist/converse-no-dependencies.js:105663
#: dist/converse-no-dependencies.js:105673
msgid "online"
msgstr ""

#: dist/converse-no-dependencies.js:105665
msgid "busy"
msgstr ""

#: dist/converse-no-dependencies.js:105667
msgid "away for long"
msgstr ""

#: dist/converse-no-dependencies.js:105669
msgid "away"
msgstr ""

#: dist/converse-no-dependencies.js:105671
msgid "offline"
msgstr ""

#: dist/converse-no-dependencies.js:105687
msgid "Are you sure you want to log out?"
msgstr ""

#: dist/converse-no-dependencies.js:105719
msgid "Log out"
msgstr ""

#: dist/converse-no-dependencies.js:105723
msgid "Show details about this chat client"
msgstr ""

#: dist/converse-no-dependencies.js:105729
#, javascript-format
msgid "I am %1$s"
msgstr ""

#: dist/converse-no-dependencies.js:105730
msgid "Click to change your chat status"
msgstr ""

#: dist/converse-no-dependencies.js:110445
#, javascript-format
msgid ""
"Sorry, we're unable to send an encrypted message because %1$s requires you "
"to be subscribed to their presence in order to see their OMEMO information"
msgstr ""

#: dist/converse-no-dependencies.js:110447
#, javascript-format
msgid ""
"Sorry, we're unable to send an encrypted message because the remote server "
"for %1$s could not be found"
msgstr ""

#: dist/converse-no-dependencies.js:110449
msgid "Unable to send an encrypted message due to an unexpected error."
msgstr ""

#: dist/converse-no-dependencies.js:110484
msgid ""
"This is an OMEMO encrypted message which your client doesn’t seem to "
"support. Find more information on https://conversations.im/omemo"
msgstr ""

#: dist/converse-no-dependencies.js:110725
msgid ""
"Error: could not decrypt a received encrypted file, because it could not be "
"downloaded"
msgstr ""

#: dist/converse-no-dependencies.js:110933
msgid ""
"Sorry, could not decrypt a received OMEMO message because we don't have the "
"XMPP address for that user."
msgstr ""

#: dist/converse-no-dependencies.js:110998
msgid "Sorry, could not decrypt a received OMEMO message due to an error."
msgstr ""

#: dist/converse-no-dependencies.js:111654
#, javascript-format
msgid ""
"%1$s doesn't appear to have a client that supports OMEMO. Encrypted chat "
"will no longer be possible in this grouchat."
msgstr ""

#: dist/converse-no-dependencies.js:111718
msgid ""
"Cannot use end-to-end encryption in this groupchat, either the groupchat has "
"some anonymity or not all participants support OMEMO."
msgstr ""

#: dist/converse-no-dependencies.js:111720
#, javascript-format
msgid ""
"Cannot use end-to-end encryption because %1$s uses a client that doesn't "
"support OMEMO."
msgstr ""

#: dist/converse-no-dependencies.js:111733
msgid "Messages are being sent in plaintext"
msgstr ""

#: dist/converse-no-dependencies.js:111734
msgid "Messages are sent encrypted"
msgstr ""

#: dist/converse-no-dependencies.js:111737
msgid ""
"This groupchat needs to be members-only and non-anonymous in order to "
"support OMEMO encrypted messages"
msgstr ""

#: dist/converse-no-dependencies.js:111739
msgid "OMEMO encryption is not supported"
msgstr ""

#: dist/converse-no-dependencies.js:111767
msgid ""
"Sorry, no devices found to which we can send an OMEMO encrypted message."
msgstr ""

#: dist/converse-no-dependencies.js:111954
msgid "Trusted"
msgstr ""

#: dist/converse-no-dependencies.js:111955
msgid "Untrusted"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:111963
msgid "OMEMO Fingerprints"
msgstr ""

#: dist/converse-no-dependencies.js:111964
msgid "No OMEMO-enabled devices found"
msgstr ""

#: dist/converse-no-dependencies.js:112499
msgid "Checkbox for selecting the following fingerprint"
msgstr ""

#: dist/converse-no-dependencies.js:112503
msgid "Device without a fingerprint"
msgstr ""

#: dist/converse-no-dependencies.js:112504
msgid "Checkbox for selecting the following device"
msgstr ""

#: dist/converse-no-dependencies.js:112512
msgid "Other OMEMO-enabled devices"
msgstr ""

#: dist/converse-no-dependencies.js:112513
msgid "Checkbox to select fingerprints of all other OMEMO devices"
msgstr ""

#: dist/converse-no-dependencies.js:112514
msgid "Remove checked devices and close"
msgstr ""

#: dist/converse-no-dependencies.js:112515
msgid "Select all"
msgstr ""

#: dist/converse-no-dependencies.js:112524
msgid "This device's OMEMO fingerprint"
msgstr ""

#: dist/converse-no-dependencies.js:112525
msgid "Generate new keys and fingerprint"
msgstr ""

#: dist/converse-no-dependencies.js:113087
msgid "Sorry, an error occurred while trying to remove the devices."
msgstr ""

#: dist/converse-no-dependencies.js:113114
msgid ""
"Are you sure you want to generate new OMEMO keys? This will remove your old "
"keys and all previously encrypted messages will no longer be decryptable on "
"this device."
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:116401
#: dist/converse-no-dependencies.js:116470
msgid "Already have a chat account?"
msgstr ""

#: dist/converse-no-dependencies.js:116402
#: dist/converse-no-dependencies.js:116471
msgid "Log in here"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:116422
msgid "Choose a different provider"
msgstr ""

#: dist/converse-no-dependencies.js:116423
msgid "Account Registration:"
msgstr ""

#: dist/converse-no-dependencies.js:116424
msgid "Register"
msgstr ""

#: dist/converse-no-dependencies.js:116463
msgid "Tip: A list of public XMPP providers is available"
msgstr ""

#: dist/converse-no-dependencies.js:116464
msgid "here"
msgstr ""

#: dist/converse-no-dependencies.js:116469
msgid "Fetch registration form"
msgstr ""

#: dist/converse-no-dependencies.js:116476
msgid "Create your account"
msgstr ""

#: dist/converse-no-dependencies.js:116477
msgid "Please enter the XMPP provider to register with:"
msgstr ""

#: dist/converse-no-dependencies.js:117138
msgid "Sorry, we're unable to connect to your chosen provider."
msgstr ""

#: dist/converse-no-dependencies.js:117150
msgid ""
"Sorry, the given provider does not support in band account registration. "
"Please try with a different provider."
msgstr ""

#: dist/converse-no-dependencies.js:117287
msgid "Now logging you in"
msgstr ""

#: dist/converse-no-dependencies.js:117289
msgid "Registered successfully"
msgstr ""

#: dist/converse-no-dependencies.js:117370
msgid ""
"The provider rejected your registration attempt. Please check the values you "
"entered for correctness."
msgstr ""

#: dist/converse-no-dependencies.js:117591
msgid " e.g. conversejs.org"
msgstr ""

#: dist/converse-no-dependencies.js:118226
msgid "This field is required"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:118230
msgid "Join"
msgstr ""

#: dist/converse-no-dependencies.js:118234
msgid "name@conference.example.org"
msgstr ""

#: dist/converse-no-dependencies.js:118236
msgid "Groupchat name"
msgstr ""

#: dist/converse-no-dependencies.js:118236
msgid "Groupchat address"
msgstr ""

#. eslint-disable-line class-methods-use-this
#: dist/converse-no-dependencies.js:118436
msgid "Enter a new Groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:118495
msgid "Groupchat id is invalid."
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:118520
msgid "Description:"
msgstr ""

#: dist/converse-no-dependencies.js:118521
msgid "Groupchat XMPP Address:"
msgstr ""

#: dist/converse-no-dependencies.js:118522
msgid "Participants:"
msgstr ""

#: dist/converse-no-dependencies.js:118523
msgid "Features:"
msgstr ""

#: dist/converse-no-dependencies.js:118524
msgid "Requires authentication"
msgstr ""

#: dist/converse-no-dependencies.js:118526
msgid "Requires an invitation"
msgstr ""

#: dist/converse-no-dependencies.js:118528
msgid "Non-anonymous"
msgstr ""

#: dist/converse-no-dependencies.js:118530
msgid "Permanent"
msgstr ""

#: dist/converse-no-dependencies.js:118534
msgid "Unmoderated"
msgstr ""

#: dist/converse-no-dependencies.js:118554
msgid "Show groupchats"
msgstr ""

#: dist/converse-no-dependencies.js:118555
msgid "Server address"
msgstr ""

#: dist/converse-no-dependencies.js:118559
#: dist/converse-no-dependencies.js:119061
msgid "Show more information on this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:118784
msgid "conference.example.org"
msgstr ""

#. eslint-disable-line class-methods-use-this
#: dist/converse-no-dependencies.js:118805
msgid "Query for Groupchats"
msgstr ""

#: dist/converse-no-dependencies.js:118843
msgid "Groupchats found"
msgstr ""

#: dist/converse-no-dependencies.js:118851
msgid "No groupchats found"
msgstr ""

#: dist/converse-no-dependencies.js:119057
msgid "Leave this groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:119068
msgid "Click to hide these rooms"
msgstr ""

#: dist/converse-no-dependencies.js:119116
msgid "Click to toggle the list of open groupchats"
msgstr ""

#: dist/converse-no-dependencies.js:119117
msgid "Groupchats"
msgstr ""

#: dist/converse-no-dependencies.js:119118
msgid "Query server"
msgstr ""

#: dist/converse-no-dependencies.js:119119
msgid "Add groupchat"
msgstr ""

#: dist/converse-no-dependencies.js:119723
#, javascript-format
msgid "Are you sure you want to leave the groupchat %1$s?"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:124163
msgid "Add"
msgstr ""

#: dist/converse-no-dependencies.js:124165
msgid "Group"
msgstr ""

#. eslint-disable-line class-methods-use-this
#: dist/converse-no-dependencies.js:124668
msgid "Add a Contact"
msgstr ""

#: dist/converse-no-dependencies.js:124679
msgid "This contact has already been added"
msgstr ""

#: dist/converse-no-dependencies.js:124719
msgid "Sorry, could not find a contact with that name"
msgstr ""

#. harmony default export
#: dist/converse-no-dependencies.js:124799
msgid "Click to hide these contacts"
msgstr ""

#: dist/converse-no-dependencies.js:124830
msgid "Filter by contact name"
msgstr ""

#: dist/converse-no-dependencies.js:124831
msgid "Filter by group name"
msgstr ""

#: dist/converse-no-dependencies.js:124834
msgid "Unread"
msgstr ""

#: dist/converse-no-dependencies.js:124835
msgid "Available"
msgstr ""

#. *
#. * @typedef {import('../rosterview').default} RosterView
#.
#. *
#. * @param {RosterView} el
#.
#. harmony default export
#: dist/converse-no-dependencies.js:124889
msgid "Contacts"
msgstr ""

#: dist/converse-no-dependencies.js:124890
msgid "Click to toggle contacts"
msgstr ""

#: dist/converse-no-dependencies.js:124891
msgid "Add a contact"
msgstr ""

#: dist/converse-no-dependencies.js:124916
msgid "Re-sync contacts"
msgstr ""

#: dist/converse-no-dependencies.js:125554
msgid "This contact is busy"
msgstr ""

#: dist/converse-no-dependencies.js:125555
msgid "This contact is online"
msgstr ""

#: dist/converse-no-dependencies.js:125556
msgid "This contact is offline"
msgstr ""

#: dist/converse-no-dependencies.js:125557
msgid "This contact is unavailable"
msgstr ""

#: dist/converse-no-dependencies.js:125558
msgid "This contact is away for an extended period"
msgstr ""

#: dist/converse-no-dependencies.js:125559
msgid "This contact is away"
msgstr ""

#: dist/converse-no-dependencies.js:125579
#, javascript-format
msgid "Click to remove %1$s as a contact"
msgstr ""

#: dist/converse-no-dependencies.js:125602
#, javascript-format
msgid "Click to chat with %1$s (XMPP address: %2$s)"
msgstr ""

#: dist/converse-no-dependencies.js:126090
#, javascript-format
msgid "Click to accept the contact request from %1$s"
msgstr ""

#: dist/converse-no-dependencies.js:126091
#, javascript-format
msgid "Click to decline the contact request from %1$s"
msgstr ""

#: dist/converse-no-dependencies.js:126188
msgid "Are you sure you want to decline this contact request?"
msgstr ""
